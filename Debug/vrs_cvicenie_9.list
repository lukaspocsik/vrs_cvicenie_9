
vrs_cvicenie_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08008078  08008078  00018078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008530  08008530  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008530  08008530  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008530  08008530  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008534  08008534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000a8  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aca9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002137  00000000  00000000  0002aeb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002cff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000808  00000000  00000000  0002d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184a7  00000000  00000000  0002e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000853e  00000000  00000000  000465af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bea1  00000000  00000000  0004eaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ca98e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003780  00000000  00000000  000ca9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800805c 	.word	0x0800805c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800805c 	.word	0x0800805c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f06f 0201 	mvn.w	r2, #1
 8000c56:	611a      	str	r2, [r3, #16]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	619a      	str	r2, [r3, #24]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000cc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f7ff ffdb 	bl	8000c8a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f7ff ffd5 	bl	8000c8a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <resetSegments+0x58>)
 8000ce4:	f7ff ffd1 	bl	8000c8a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000ce8:	2120      	movs	r1, #32
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <resetSegments+0x58>)
 8000cec:	f7ff ffcd 	bl	8000c8a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	480a      	ldr	r0, [pc, #40]	; (8000d1c <resetSegments+0x58>)
 8000cf4:	f7ff ffc9 	bl	8000c8a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f7ff ffc4 	bl	8000c8a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000d02:	2102      	movs	r1, #2
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f7ff ffbf 	bl	8000c8a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f7ff ffba 	bl	8000c8a <LL_GPIO_SetOutputPin>
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	48000400 	.word	0x48000400

08000d20 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f7ff ffbb 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ffb5 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <setSegments+0x58>)
 8000d40:	f7ff ffb1 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000d44:	2120      	movs	r1, #32
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <setSegments+0x58>)
 8000d48:	f7ff ffad 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	480a      	ldr	r0, [pc, #40]	; (8000d78 <setSegments+0x58>)
 8000d50:	f7ff ffa9 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d54:	2101      	movs	r1, #1
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f7ff ffa4 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000d5e:	2102      	movs	r1, #2
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f7ff ff9f 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000d68:	2108      	movs	r1, #8
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f7ff ff9a 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	48000400 	.word	0x48000400

08000d7c <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000d80:	2104      	movs	r1, #4
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f7ff ff8e 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <resetDigits+0x3c>)
 8000d8e:	f7ff ff8a 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000d92:	2110      	movs	r1, #16
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f7ff ff85 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000d9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f7ff ff7f 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f7ff ff7a 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	48000400 	.word	0x48000400

08000dbc <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <setDigits+0x3c>)
 8000dc4:	f7ff ff61 	bl	8000c8a <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000dc8:	2110      	movs	r1, #16
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f7ff ff5c 	bl	8000c8a <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f7ff ff56 	bl	8000c8a <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000dde:	2104      	movs	r1, #4
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f7ff ff51 	bl	8000c8a <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f7ff ff4c 	bl	8000c8a <LL_GPIO_SetOutputPin>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	48000400 	.word	0x48000400

08000dfc <decode_7seg>:
/*  x     y     z     */
    0x13, 0x3B, 0x6D
};

void decode_7seg(char chr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	if(seven_seg_digits_decode_abcdefg[chr - '0'] & 1<<6)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	3b30      	subs	r3, #48	; 0x30
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <decode_7seg+0xc8>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d004      	beq.n	8000e20 <decode_7seg+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000e16:	2102      	movs	r1, #2
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f7ff ff43 	bl	8000ca6 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[chr - '0'] & 1<<5)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	3b30      	subs	r3, #48	; 0x30
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <decode_7seg+0xc8>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <decode_7seg+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000e30:	2101      	movs	r1, #1
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f7ff ff36 	bl	8000ca6 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[chr - '0'] & 1<<4)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	3b30      	subs	r3, #48	; 0x30
 8000e3e:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <decode_7seg+0xc8>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <decode_7seg+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f7ff ff28 	bl	8000ca6 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[chr - '0'] & 1<<3)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	3b30      	subs	r3, #48	; 0x30
 8000e5a:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <decode_7seg+0xc8>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <decode_7seg+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000e66:	2120      	movs	r1, #32
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <decode_7seg+0xcc>)
 8000e6a:	f7ff ff1c 	bl	8000ca6 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[chr - '0'] & 1<<2)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3b30      	subs	r3, #48	; 0x30
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <decode_7seg+0xc8>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d005      	beq.n	8000e8a <decode_7seg+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000e7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f7ff ff0e 	bl	8000ca6 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[chr - '0'] & 1<<1)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3b30      	subs	r3, #48	; 0x30
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <decode_7seg+0xc8>)
 8000e90:	5cd3      	ldrb	r3, [r2, r3]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <decode_7seg+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f7ff ff01 	bl	8000ca6 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[chr - '0'] & 1<<0)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	3b30      	subs	r3, #48	; 0x30
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <decode_7seg+0xc8>)
 8000eaa:	5cd3      	ldrb	r3, [r2, r3]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <decode_7seg+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <decode_7seg+0xcc>)
 8000eb8:	f7ff fef5 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	080080a8 	.word	0x080080a8
 8000ec8:	48000400 	.word	0x48000400

08000ecc <setDP>:

void setDP(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4802      	ldr	r0, [pc, #8]	; (8000edc <setDP+0x10>)
 8000ed4:	f7ff fee7 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	48000400 	.word	0x48000400

08000ee0 <displaySign>:


void displaySign(char *c, int indexMain, int switch_stateMain)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	for(int j=0; j<4; j++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00c      	b.n	8000f0c <displaySign+0x2c>
	{
		dataDisplay[j] = *c;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	7819      	ldrb	r1, [r3, #0]
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <displaySign+0x4c>)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	460a      	mov	r2, r1
 8000efe:	701a      	strb	r2, [r3, #0]
		c++;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
	for(int j=0; j<4; j++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	ddef      	ble.n	8000ef2 <displaySign+0x12>
	}

	pom = indexMain;
 8000f12:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <displaySign+0x50>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	6013      	str	r3, [r2, #0]
	state = switch_stateMain;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <displaySign+0x54>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]


}
 8000f1e:	bf00      	nop
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000022c 	.word	0x2000022c
 8000f30:	20000234 	.word	0x20000234
 8000f34:	20000230 	.word	0x20000230

08000f38 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d823      	bhi.n	8000f90 <setDigit+0x58>
 8000f48:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <setDigit+0x18>)
 8000f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4e:	bf00      	nop
 8000f50:	08000f61 	.word	0x08000f61
 8000f54:	08000f6b 	.word	0x08000f6b
 8000f58:	08000f77 	.word	0x08000f77
 8000f5c:	08000f85 	.word	0x08000f85
	{
		case 0:
			DIGIT_1_ON;
 8000f60:	2101      	movs	r1, #1
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <setDigit+0x60>)
 8000f64:	f7ff fe91 	bl	8000c8a <LL_GPIO_SetOutputPin>
			break;
 8000f68:	e012      	b.n	8000f90 <setDigit+0x58>
		case 1:
			DIGIT_2_ON;
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f7ff fe8b 	bl	8000c8a <LL_GPIO_SetOutputPin>
			break;
 8000f74:	e00c      	b.n	8000f90 <setDigit+0x58>
		case 2:
			DIGIT_3_ON;
 8000f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f7ff fe84 	bl	8000c8a <LL_GPIO_SetOutputPin>
			break;
 8000f82:	e005      	b.n	8000f90 <setDigit+0x58>
		case 3:
			DIGIT_4_ON;
 8000f84:	2104      	movs	r1, #4
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f7ff fe7e 	bl	8000c8a <LL_GPIO_SetOutputPin>
			break;
 8000f8e:	bf00      	nop
	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	48000400 	.word	0x48000400

08000f9c <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < 4; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	e06f      	b.n	8001088 <updateDisplay+0xec>
	{
		setDigit(i);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffc4 	bl	8000f38 <setDigit>
		decode_7seg(dataDisplay[i]);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4a39      	ldr	r2, [pc, #228]	; (8001098 <updateDisplay+0xfc>)
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff20 	bl	8000dfc <decode_7seg>

		if(state == 0)
 8000fbc:	4b37      	ldr	r3, [pc, #220]	; (800109c <updateDisplay+0x100>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d111      	bne.n	8000fe8 <updateDisplay+0x4c>
		{
			if(pom == 3 && i == 3)
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <updateDisplay+0x104>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d104      	bne.n	8000fd6 <updateDisplay+0x3a>
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d101      	bne.n	8000fd6 <updateDisplay+0x3a>
				setDP();
 8000fd2:	f7ff ff7b 	bl	8000ecc <setDP>

			if(pom == 4 && i == 2)
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <updateDisplay+0x104>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d104      	bne.n	8000fe8 <updateDisplay+0x4c>
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d101      	bne.n	8000fe8 <updateDisplay+0x4c>
				setDP();
 8000fe4:	f7ff ff72 	bl	8000ecc <setDP>
		}


		if(state == 2)
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <updateDisplay+0x100>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d11a      	bne.n	8001026 <updateDisplay+0x8a>
		{
			if(pom == 3 && i == 3)
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <updateDisplay+0x104>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d104      	bne.n	8001002 <updateDisplay+0x66>
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d101      	bne.n	8001002 <updateDisplay+0x66>
				setDP();
 8000ffe:	f7ff ff65 	bl	8000ecc <setDP>

			if(pom == 4 && i == 2)
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <updateDisplay+0x104>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b04      	cmp	r3, #4
 8001008:	d104      	bne.n	8001014 <updateDisplay+0x78>
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d101      	bne.n	8001014 <updateDisplay+0x78>
				setDP();
 8001010:	f7ff ff5c 	bl	8000ecc <setDP>

			if(pom == 5 && i == 1)
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <updateDisplay+0x104>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b05      	cmp	r3, #5
 800101a:	d104      	bne.n	8001026 <updateDisplay+0x8a>
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <updateDisplay+0x8a>
				setDP();
 8001022:	f7ff ff53 	bl	8000ecc <setDP>
		}

		if(state == 3)
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <updateDisplay+0x100>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d111      	bne.n	8001052 <updateDisplay+0xb6>
		{
			if(pom == 3 && i == 3)
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <updateDisplay+0x104>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d104      	bne.n	8001040 <updateDisplay+0xa4>
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d101      	bne.n	8001040 <updateDisplay+0xa4>
				setDP();
 800103c:	f7ff ff46 	bl	8000ecc <setDP>

			if(pom == 4 && i == 2)
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <updateDisplay+0x104>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b04      	cmp	r3, #4
 8001046:	d104      	bne.n	8001052 <updateDisplay+0xb6>
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d101      	bne.n	8001052 <updateDisplay+0xb6>
				setDP();
 800104e:	f7ff ff3d 	bl	8000ecc <setDP>
		}

		disp_time_saved = disp_time;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <updateDisplay+0x108>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	4913      	ldr	r1, [pc, #76]	; (80010a8 <updateDisplay+0x10c>)
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 800105e:	bf00      	nop
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <updateDisplay+0x10c>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	1c94      	adds	r4, r2, #2
 8001068:	f143 0500 	adc.w	r5, r3, #0
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <updateDisplay+0x108>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	42ab      	cmp	r3, r5
 8001074:	bf08      	it	eq
 8001076:	42a2      	cmpeq	r2, r4
 8001078:	d3f2      	bcc.n	8001060 <updateDisplay+0xc4>

		resetDigits();
 800107a:	f7ff fe7f 	bl	8000d7c <resetDigits>
		resetSegments();
 800107e:	f7ff fe21 	bl	8000cc4 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	3301      	adds	r3, #1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d98c      	bls.n	8000fa8 <updateDisplay+0xc>
	}
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bdb0      	pop	{r4, r5, r7, pc}
 8001098:	2000022c 	.word	0x2000022c
 800109c:	20000230 	.word	0x20000230
 80010a0:	20000234 	.word	0x20000234
 80010a4:	20000200 	.word	0x20000200
 80010a8:	20000208 	.word	0x20000208

080010ac <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 80010b0:	4806      	ldr	r0, [pc, #24]	; (80010cc <TIM3_IRQHandler+0x20>)
 80010b2:	f7ff fdd7 	bl	8000c64 <LL_TIM_IsActiveFlag_UPDATE>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 80010bc:	f7ff ff6e 	bl	8000f9c <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM3_IRQHandler+0x20>)
 80010c2:	f7ff fdc1 	bl	8000c48 <LL_TIM_ClearFlag_UPDATE>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40000400 	.word	0x40000400

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ee:	695a      	ldr	r2, [r3, #20]
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4013      	ands	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000

08001214 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <LL_SYSCFG_SetEXTISource+0x58>)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3302      	adds	r3, #2
 8001226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	0c1b      	lsrs	r3, r3, #16
 800122e:	43db      	mvns	r3, r3
 8001230:	ea02 0103 	and.w	r1, r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	0c1b      	lsrs	r3, r3, #16
 8001238:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	fa03 f202 	lsl.w	r2, r3, r2
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <LL_SYSCFG_SetEXTISource+0x58>)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	430a      	orrs	r2, r1
 800125a:	3302      	adds	r3, #2
 800125c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40010000 	.word	0x40010000

08001270 <LL_GPIO_SetPinMode>:
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	613b      	str	r3, [r7, #16]
  return result;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2103      	movs	r1, #3
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	61bb      	str	r3, [r7, #24]
  return result;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_GPIO_SetPinPull>:
{
 80012ce:	b480      	push	{r7}
 80012d0:	b089      	sub	sp, #36	; 0x24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	613b      	str	r3, [r7, #16]
  return result;
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	fab3 f383 	clz	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2103      	movs	r1, #3
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	401a      	ands	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	61bb      	str	r3, [r7, #24]
  return result;
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	431a      	orrs	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	60da      	str	r2, [r3, #12]
}
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	; 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_GPIO_ResetOutputPin>:
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800136a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800136e:	f7ff ff39 	bl	80011e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001372:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001376:	f7ff ff35 	bl	80011e4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800137a:	f641 119f 	movw	r1, #6559	; 0x199f
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f7ff ffd3 	bl	800132c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001386:	2133      	movs	r1, #51	; 0x33
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <MX_GPIO_Init+0xf0>)
 800138a:	f7ff ffcf 	bl	800132c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800138e:	f641 139f 	movw	r3, #6559	; 0x199f
 8001392:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001394:	2301      	movs	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f002 fa32 	bl	8003814 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80013b0:	2333      	movs	r3, #51	; 0x33
 80013b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <MX_GPIO_Init+0xf0>)
 80013ca:	f002 fa23 	bl	8003814 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 80013ce:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff ff1e 	bl	8001214 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 80013d8:	2201      	movs	r2, #1
 80013da:	2108      	movs	r1, #8
 80013dc:	4816      	ldr	r0, [pc, #88]	; (8001438 <MX_GPIO_Init+0xf0>)
 80013de:	f7ff ff76 	bl	80012ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2108      	movs	r1, #8
 80013e6:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_GPIO_Init+0xf0>)
 80013e8:	f7ff ff42 	bl	8001270 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80013ec:	2308      	movs	r3, #8
 80013ee:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001400:	2302      	movs	r3, #2
 8001402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4618      	mov	r0, r3
 800140c:	f002 f80a 	bl	8003424 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001410:	f7ff fe5e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001414:	4603      	mov	r3, r0
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff feae 	bl	800117c <NVIC_EncodePriority>
 8001420:	4603      	mov	r3, r0
 8001422:	4619      	mov	r1, r3
 8001424:	2009      	movs	r0, #9
 8001426:	f7ff fe7f 	bl	8001128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800142a:	2009      	movs	r0, #9
 800142c:	f7ff fe5e 	bl	80010ec <__NVIC_EnableIRQ>

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	48000400 	.word	0x48000400

0800143c <__NVIC_GetPriorityGrouping>:
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	601a      	str	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015c2:	f023 0306 	bic.w	r3, r3, #6
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	60da      	str	r2, [r3, #12]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60da      	str	r2, [r3, #12]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f043 0204 	orr.w	r2, r3, #4
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 0204 	bic.w	r2, r3, #4
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b02      	cmp	r3, #2
 8001650:	d101      	bne.n	8001656 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b04      	cmp	r3, #4
 8001676:	d101      	bne.n	800167c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b20      	cmp	r3, #32
 800169c:	d101      	bne.n	80016a2 <LL_I2C_IsActiveFlag_STOP+0x18>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	61da      	str	r2, [r3, #28]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <LL_I2C_HandleTransfer+0x48>)
 800170c:	430b      	orrs	r3, r1
 800170e:	43db      	mvns	r3, r3
 8001710:	401a      	ands	r2, r3
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4319      	orrs	r1, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	041b      	lsls	r3, r3, #16
 800171c:	4319      	orrs	r1, r3
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4319      	orrs	r1, r3
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	430b      	orrs	r3, r1
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	03ff7bff 	.word	0x03ff7bff

0800173c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	b2db      	uxtb	r3, r3
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_AHB1_GRP1_EnableClock>:
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4313      	orrs	r3, r2
 8001786:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000

080017a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40021000 	.word	0x40021000

080017d4 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	; 0x38
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001802:	f7ff ffb7 	bl	8001774 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800180a:	2302      	movs	r3, #2
 800180c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001812:	2301      	movs	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800181a:	2304      	movs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4821      	ldr	r0, [pc, #132]	; (80018a8 <MX_I2C1_Init+0xd4>)
 8001824:	f001 fff6 	bl	8003814 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001828:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800182c:	f7ff ffba 	bl	80017a4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001830:	f7ff fe04 	bl	800143c <__NVIC_GetPriorityGrouping>
 8001834:	4603      	mov	r3, r0
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fe54 	bl	80014e8 <NVIC_EncodePriority>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	201f      	movs	r0, #31
 8001846:	f7ff fe25 	bl	8001494 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800184a:	201f      	movs	r0, #31
 800184c:	f7ff fe04 	bl	8001458 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001850:	4816      	ldr	r0, [pc, #88]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001852:	f7ff ff3d 	bl	80016d0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001858:	f7ff fec1 	bl	80015de <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <MX_I2C1_Init+0xd8>)
 800185e:	f7ff fe96 	bl	800158e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001862:	4812      	ldr	r0, [pc, #72]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001864:	f7ff fe83 	bl	800156e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_I2C1_Init+0xdc>)
 800186e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <MX_I2C1_Init+0xd8>)
 800188c:	f002 f8d5 	bl	8003a3a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001896:	f7ff fe8a 	bl	80015ae <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C1_Init+0xd8>)
 800189c:	f7ff fe57 	bl	800154e <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3738      	adds	r7, #56	; 0x38
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	48000400 	.word	0x48000400
 80018ac:	40005400 	.word	0x40005400
 80018b0:	2000090e 	.word	0x2000090e

080018b4 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	4604      	mov	r4, r0
 80018bc:	4608      	mov	r0, r1
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	4603      	mov	r3, r0
 80018c8:	71bb      	strb	r3, [r7, #6]
 80018ca:	460b      	mov	r3, r1
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	4613      	mov	r3, r2
 80018d0:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018de:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018e0:	7979      	ldrb	r1, [r7, #5]
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <i2c_master_write+0x80>)
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2302      	movs	r3, #2
 80018ee:	2200      	movs	r2, #0
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <i2c_master_write+0x84>)
 80018f2:	f7ff fefd 	bl	80016f0 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80018f6:	79bb      	ldrb	r3, [r7, #6]
 80018f8:	4619      	mov	r1, r3
 80018fa:	480f      	ldr	r0, [pc, #60]	; (8001938 <i2c_master_write+0x84>)
 80018fc:	f7ff ff2b 	bl	8001756 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001900:	e00a      	b.n	8001918 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <i2c_master_write+0x84>)
 8001904:	f7ff fe9b 	bl	800163e <LL_I2C_IsActiveFlag_TXIS>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4619      	mov	r1, r3
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <i2c_master_write+0x84>)
 8001914:	f7ff ff1f 	bl	8001756 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <i2c_master_write+0x84>)
 800191a:	f7ff feb6 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ee      	beq.n	8001902 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <i2c_master_write+0x84>)
 8001926:	f7ff fec3 	bl	80016b0 <LL_I2C_ClearFlag_STOP>
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	80002000 	.word	0x80002000
 8001938:	40005400 	.word	0x40005400

0800193c <i2c_master_read>:

uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af02      	add	r7, sp, #8
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	460b      	mov	r3, r1
 8001950:	70bb      	strb	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001956:	4a30      	ldr	r2, [pc, #192]	; (8001a18 <i2c_master_read+0xdc>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 800195c:	7c3b      	ldrb	r3, [r7, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001962:	78bb      	ldrb	r3, [r7, #2]
 8001964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001968:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <i2c_master_read+0xe0>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001970:	482b      	ldr	r0, [pc, #172]	; (8001a20 <i2c_master_read+0xe4>)
 8001972:	f7ff fe44 	bl	80015fe <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001976:	7879      	ldrb	r1, [r7, #1]
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <i2c_master_read+0xe8>)
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	2200      	movs	r2, #0
 8001986:	4826      	ldr	r0, [pc, #152]	; (8001a20 <i2c_master_read+0xe4>)
 8001988:	f7ff feb2 	bl	80016f0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800198c:	e00a      	b.n	80019a4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800198e:	4824      	ldr	r0, [pc, #144]	; (8001a20 <i2c_master_read+0xe4>)
 8001990:	f7ff fe55 	bl	800163e <LL_I2C_IsActiveFlag_TXIS>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	4619      	mov	r1, r3
 800199e:	4820      	ldr	r0, [pc, #128]	; (8001a20 <i2c_master_read+0xe4>)
 80019a0:	f7ff fed9 	bl	8001756 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <i2c_master_read+0xe4>)
 80019a6:	f7ff fe70 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ee      	beq.n	800198e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80019b0:	481b      	ldr	r0, [pc, #108]	; (8001a20 <i2c_master_read+0xe4>)
 80019b2:	f7ff fe7d 	bl	80016b0 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80019b6:	bf00      	nop
 80019b8:	4819      	ldr	r0, [pc, #100]	; (8001a20 <i2c_master_read+0xe4>)
 80019ba:	f7ff fe66 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80019c4:	7879      	ldrb	r1, [r7, #1]
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <i2c_master_read+0xec>)
 80019ca:	9201      	str	r2, [sp, #4]
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	9200      	str	r2, [sp, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	4812      	ldr	r0, [pc, #72]	; (8001a20 <i2c_master_read+0xe4>)
 80019d6:	f7ff fe8b 	bl	80016f0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80019da:	bf00      	nop
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <i2c_master_read+0xe4>)
 80019de:	f7ff fe54 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f9      	beq.n	80019dc <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <i2c_master_read+0xe4>)
 80019ea:	f7ff fe61 	bl	80016b0 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80019ee:	480c      	ldr	r0, [pc, #48]	; (8001a20 <i2c_master_read+0xe4>)
 80019f0:	f7ff fe15 	bl	800161e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <i2c_master_read+0xe4>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <i2c_master_read+0xe4>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <i2c_master_read+0xf0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <i2c_master_read+0xe0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001a0c:	4b02      	ldr	r3, [pc, #8]	; (8001a18 <i2c_master_read+0xdc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000023c 	.word	0x2000023c
 8001a1c:	20000210 	.word	0x20000210
 8001a20:	40005400 	.word	0x40005400
 8001a24:	80002000 	.word	0x80002000
 8001a28:	80002400 	.word	0x80002400
 8001a2c:	20000211 	.word	0x20000211

08001a30 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001a30:	b598      	push	{r3, r4, r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <I2C1_EV_IRQHandler+0x50>)
 8001a36:	f7ff fe15 	bl	8001664 <LL_I2C_IsActiveFlag_RXNE>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <I2C1_EV_IRQHandler+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	1c59      	adds	r1, r3, #1
 8001a4c:	b2c8      	uxtb	r0, r1
 8001a4e:	490e      	ldr	r1, [pc, #56]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a50:	7008      	strb	r0, [r1, #0]
 8001a52:	18d4      	adds	r4, r2, r3
 8001a54:	480a      	ldr	r0, [pc, #40]	; (8001a80 <I2C1_EV_IRQHandler+0x50>)
 8001a56:	f7ff fe71 	bl	800173c <LL_I2C_ReceiveData8>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b13      	cmp	r3, #19
 8001a66:	d903      	bls.n	8001a70 <I2C1_EV_IRQHandler+0x40>
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e001      	b.n	8001a74 <I2C1_EV_IRQHandler+0x44>
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <I2C1_EV_IRQHandler+0x5c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
	}
}
 8001a7a:	bf00      	nop
 8001a7c:	bd98      	pop	{r3, r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40005400 	.word	0x40005400
 8001a84:	2000023c 	.word	0x2000023c
 8001a88:	20000211 	.word	0x20000211
 8001a8c:	20000210 	.word	0x20000210

08001a90 <__NVIC_SetPriorityGrouping>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <LL_RCC_HSI_Enable+0x1c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <LL_RCC_HSI_Enable+0x1c>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000

08001b88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <LL_RCC_HSI_IsReady+0x20>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000

08001bac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <LL_RCC_SetSysClkSource+0x24>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 0203 	bic.w	r2, r3, #3
 8001be8:	4904      	ldr	r1, [pc, #16]	; (8001bfc <LL_RCC_SetSysClkSource+0x24>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000

08001c00 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <LL_RCC_GetSysClkSource+0x18>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <LL_RCC_SetAHBPrescaler+0x24>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	4904      	ldr	r1, [pc, #16]	; (8001c40 <LL_RCC_SetAHBPrescaler+0x24>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000

08001c44 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c54:	4904      	ldr	r1, [pc, #16]	; (8001c68 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000

08001c6c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7c:	4904      	ldr	r1, [pc, #16]	; (8001c90 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000

08001c94 <LL_APB1_GRP1_EnableClock>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <LL_FLASH_SetLatency+0x24>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	4904      	ldr	r1, [pc, #16]	; (8001d18 <LL_FLASH_SetLatency+0x24>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40022000 	.word	0x40022000

08001d1c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <LL_FLASH_GetLatency+0x18>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000

08001d38 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d106      	bne.n	8001d54 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <LL_SYSTICK_SetClkSource+0x34>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <LL_SYSTICK_SetClkSource+0x34>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001d52:	e005      	b.n	8001d60 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <LL_SYSTICK_SetClkSource+0x34>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <LL_SYSTICK_SetClkSource+0x34>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <LL_SYSTICK_EnableIT+0x1c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <LL_SYSTICK_EnableIT+0x1c>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <main>:
float temperature;
float humidity;
float altitude;

int main(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff ff95 	bl	8001cc4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d9e:	f7ff ff79 	bl	8001c94 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da2:	2003      	movs	r0, #3
 8001da4:	f7ff fe74 	bl	8001a90 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001da8:	f000 fc1a 	bl	80025e0 <SystemClock_Config>

  MX_GPIO_Init();
 8001dac:	f7ff facc 	bl	8001348 <MX_GPIO_Init>

  setSegments();
 8001db0:	f7fe ffb6 	bl	8000d20 <setSegments>
  setDigits();
 8001db4:	f7ff f802 	bl	8000dbc <setDigits>

  LL_mDelay(2000);
 8001db8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dbc:	f002 fa9c 	bl	80042f8 <LL_mDelay>

  resetDigits();
 8001dc0:	f7fe ffdc 	bl	8000d7c <resetDigits>
  resetSegments();
 8001dc4:	f7fe ff7e 	bl	8000cc4 <resetSegments>

  MX_TIM3_Init();
 8001dc8:	f000 ff14 	bl	8002bf4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001dcc:	f7ff fd02 	bl	80017d4 <MX_I2C1_Init>

  //type your code for EXTI configuration (priority, enable EXTI, setup EXTI for input pin, trigger edge) here:


  SYSCFG->EXTICR[0] &= ~(SYSCFG_EXTICR1_EXTI3);
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <main+0x200>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a6e      	ldr	r2, [pc, #440]	; (8001f90 <main+0x200>)
 8001dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dda:	6093      	str	r3, [r2, #8]
  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <main+0x200>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <main+0x200>)
 8001de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de6:	6093      	str	r3, [r2, #8]

  EXTI->IMR |= EXTI_IMR_MR3;
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <main+0x204>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <main+0x204>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6013      	str	r3, [r2, #0]

  //Set EXTI trigger to falling edge
  EXTI->RTSR &= ~(EXTI_IMR_MR3);
 8001df4:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <main+0x204>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a66      	ldr	r2, [pc, #408]	; (8001f94 <main+0x204>)
 8001dfa:	f023 0308 	bic.w	r3, r3, #8
 8001dfe:	6093      	str	r3, [r2, #8]
  EXTI->FTSR |= EXTI_IMR_MR3;
 8001e00:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <main+0x204>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <main+0x204>)
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	60d3      	str	r3, [r2, #12]

  NVIC_SetPriority(EXTI3_IRQn, 2); // Priority
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	2009      	movs	r0, #9
 8001e10:	f7ff fe80 	bl	8001b14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn); // Enable Interrupt
 8001e14:	2009      	movs	r0, #9
 8001e16:	f7ff fe5f 	bl	8001ad8 <__NVIC_EnableIRQ>

  if(!lps25hb_init() || !hts221_init())
 8001e1a:	f000 ff77 	bl	8002d0c <lps25hb_init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <main+0x9e>
 8001e24:	f001 f862 	bl	8002eec <hts221_init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <main+0xa4>
	 refresh = 1;
 8001e2e:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <main+0x208>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  while (1)
  {
		  lps25hb_get_pressure(&pressure);
 8001e34:	4859      	ldr	r0, [pc, #356]	; (8001f9c <main+0x20c>)
 8001e36:	f000 ff9b 	bl	8002d70 <lps25hb_get_pressure>
		  lps25hb_get_altitude(&altitude);
 8001e3a:	4859      	ldr	r0, [pc, #356]	; (8001fa0 <main+0x210>)
 8001e3c:	f000 ffbc 	bl	8002db8 <lps25hb_get_altitude>
		  hts221_get_temperature(&temperature);
 8001e40:	4858      	ldr	r0, [pc, #352]	; (8001fa4 <main+0x214>)
 8001e42:	f001 f885 	bl	8002f50 <hts221_get_temperature>
		  hts221_get_humidity(&humidity);
 8001e46:	4858      	ldr	r0, [pc, #352]	; (8001fa8 <main+0x218>)
 8001e48:	f001 f919 	bl	800307e <hts221_get_humidity>

		  /// TEMPERATURE

		  if (switch_state == 0)
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <main+0x21c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f040 80fe 	bne.w	8002052 <main+0x2c2>
		  {
			  if(temperature >= 100)
 8001e56:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <main+0x214>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001fb0 <main+0x220>
 8001e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	db02      	blt.n	8001e70 <main+0xe0>
		  		 temperature = 99.9;
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <main+0x214>)
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <main+0x224>)
 8001e6e:	601a      	str	r2, [r3, #0]

		  	  if(temperature <= -100)
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <main+0x214>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001fb8 <main+0x228>
 8001e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d802      	bhi.n	8001e8a <main+0xfa>
		  		 temperature = -99.9;
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <main+0x214>)
 8001e86:	4a4d      	ldr	r2, [pc, #308]	; (8001fbc <main+0x22c>)
 8001e88:	601a      	str	r2, [r3, #0]

		  	  sprintf(text_to_display, "TEMP_%2.1f", temperature);
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <main+0x214>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb5a 	bl	8000548 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4949      	ldr	r1, [pc, #292]	; (8001fc0 <main+0x230>)
 8001e9a:	484a      	ldr	r0, [pc, #296]	; (8001fc4 <main+0x234>)
 8001e9c:	f002 fefe 	bl	8004c9c <siprintf>

		  	  for(i = 0; i<strlen(text_to_display); i++)
 8001ea0:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <main+0x238>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e019      	b.n	8001edc <main+0x14c>
		  	  {
		  		  if(text_to_display[i] == '.')
 8001ea8:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <main+0x238>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <main+0x234>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8001eb2:	d10e      	bne.n	8001ed2 <main+0x142>
		  		  {
		  			  text_to_display[i] = text_to_display[i+1];
 8001eb4:	4b44      	ldr	r3, [pc, #272]	; (8001fc8 <main+0x238>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <main+0x238>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4941      	ldr	r1, [pc, #260]	; (8001fc4 <main+0x234>)
 8001ec0:	5c89      	ldrb	r1, [r1, r2]
 8001ec2:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <main+0x234>)
 8001ec4:	54d1      	strb	r1, [r2, r3]
		  			  text_to_display[i+1] = '\0';
 8001ec6:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <main+0x238>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <main+0x234>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	54d1      	strb	r1, [r2, r3]
		  	  for(i = 0; i<strlen(text_to_display); i++)
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <main+0x238>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <main+0x238>)
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4839      	ldr	r0, [pc, #228]	; (8001fc4 <main+0x234>)
 8001ede:	f7fe f977 	bl	80001d0 <strlen>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a38      	ldr	r2, [pc, #224]	; (8001fc8 <main+0x238>)
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d8dd      	bhi.n	8001ea8 <main+0x118>
		  		  }
		  	  }

			  if(shift<9)
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <main+0x23c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	dc43      	bgt.n	8001f7c <main+0x1ec>
			  {

				  for(i=0; i<5; i++)
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <main+0x238>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e03a      	b.n	8001f72 <main+0x1e2>
				  {
					  for(j=i; j<shift; j++)
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <main+0x238>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <main+0x240>)
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e019      	b.n	8001f3a <main+0x1aa>
					  {
						  data[x] = text_to_display[j];
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <main+0x240>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <main+0x244>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	492d      	ldr	r1, [pc, #180]	; (8001fc4 <main+0x234>)
 8001f10:	5c89      	ldrb	r1, [r1, r2]
 8001f12:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <main+0x248>)
 8001f14:	54d1      	strb	r1, [r2, r3]
						  displaySign(data, i, switch_state);
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <main+0x238>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <main+0x21c>)
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	482d      	ldr	r0, [pc, #180]	; (8001fd8 <main+0x248>)
 8001f22:	f7fe ffdd 	bl	8000ee0 <displaySign>
						  x++;
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <main+0x244>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <main+0x244>)
 8001f2e:	6013      	str	r3, [r2, #0]
					  for(j=i; j<shift; j++)
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <main+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <main+0x240>)
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <main+0x240>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <main+0x23c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dbdf      	blt.n	8001f06 <main+0x176>
					  }

					  LL_mDelay(500);
 8001f46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4a:	f002 f9d5 	bl	80042f8 <LL_mDelay>
					  memset(data, 0, sizeof data);
 8001f4e:	2204      	movs	r2, #4
 8001f50:	2100      	movs	r1, #0
 8001f52:	4821      	ldr	r0, [pc, #132]	; (8001fd8 <main+0x248>)
 8001f54:	f002 fa30 	bl	80043b8 <memset>
					  x = 0;
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <main+0x244>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
					  shift++;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <main+0x23c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <main+0x23c>)
 8001f66:	6013      	str	r3, [r2, #0]
				  for(i=0; i<5; i++)
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <main+0x238>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <main+0x238>)
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <main+0x238>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	ddc0      	ble.n	8001efc <main+0x16c>
 8001f7a:	e06a      	b.n	8002052 <main+0x2c2>
				  }
			  }else
			  {
				  for(i=3; i>=0; i--)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <main+0x238>)
 8001f7e:	2203      	movs	r2, #3
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e062      	b.n	800204a <main+0x2ba>
				  {
					  for(j=i; j<shift-2; j++)
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <main+0x238>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <main+0x240>)
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e040      	b.n	8002010 <main+0x280>
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40010400 	.word	0x40010400
 8001f98:	2000026c 	.word	0x2000026c
 8001f9c:	2000025c 	.word	0x2000025c
 8001fa0:	20000268 	.word	0x20000268
 8001fa4:	20000258 	.word	0x20000258
 8001fa8:	20000260 	.word	0x20000260
 8001fac:	20000218 	.word	0x20000218
 8001fb0:	42c80000 	.word	0x42c80000
 8001fb4:	42c7cccd 	.word	0x42c7cccd
 8001fb8:	c2c80000 	.word	0xc2c80000
 8001fbc:	c2c7cccd 	.word	0xc2c7cccd
 8001fc0:	08008078 	.word	0x08008078
 8001fc4:	20000244 	.word	0x20000244
 8001fc8:	20000264 	.word	0x20000264
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000240 	.word	0x20000240
 8001fd4:	20000214 	.word	0x20000214
 8001fd8:	20000220 	.word	0x20000220
					  {
						  data[x] = text_to_display[j];
 8001fdc:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <main+0x488>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b8e      	ldr	r3, [pc, #568]	; (800221c <main+0x48c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	498e      	ldr	r1, [pc, #568]	; (8002220 <main+0x490>)
 8001fe6:	5c89      	ldrb	r1, [r1, r2]
 8001fe8:	4a8e      	ldr	r2, [pc, #568]	; (8002224 <main+0x494>)
 8001fea:	54d1      	strb	r1, [r2, r3]
						  displaySign(data, i, switch_state);
 8001fec:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <main+0x498>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a8e      	ldr	r2, [pc, #568]	; (800222c <main+0x49c>)
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	488b      	ldr	r0, [pc, #556]	; (8002224 <main+0x494>)
 8001ff8:	f7fe ff72 	bl	8000ee0 <displaySign>
						  x++;
 8001ffc:	4b87      	ldr	r3, [pc, #540]	; (800221c <main+0x48c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a86      	ldr	r2, [pc, #536]	; (800221c <main+0x48c>)
 8002004:	6013      	str	r3, [r2, #0]
					  for(j=i; j<shift-2; j++)
 8002006:	4b84      	ldr	r3, [pc, #528]	; (8002218 <main+0x488>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	4a82      	ldr	r2, [pc, #520]	; (8002218 <main+0x488>)
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <main+0x4a0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	1e9a      	subs	r2, r3, #2
 8002016:	4b80      	ldr	r3, [pc, #512]	; (8002218 <main+0x488>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	dcde      	bgt.n	8001fdc <main+0x24c>
					  }

					  LL_mDelay(500);
 800201e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002022:	f002 f969 	bl	80042f8 <LL_mDelay>
					  memset(data, 0, sizeof data);
 8002026:	2204      	movs	r2, #4
 8002028:	2100      	movs	r1, #0
 800202a:	487e      	ldr	r0, [pc, #504]	; (8002224 <main+0x494>)
 800202c:	f002 f9c4 	bl	80043b8 <memset>
					  x = 0;
 8002030:	4b7a      	ldr	r3, [pc, #488]	; (800221c <main+0x48c>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
					  shift--;
 8002036:	4b7e      	ldr	r3, [pc, #504]	; (8002230 <main+0x4a0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3b01      	subs	r3, #1
 800203c:	4a7c      	ldr	r2, [pc, #496]	; (8002230 <main+0x4a0>)
 800203e:	6013      	str	r3, [r2, #0]
				  for(i=3; i>=0; i--)
 8002040:	4b79      	ldr	r3, [pc, #484]	; (8002228 <main+0x498>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	4a78      	ldr	r2, [pc, #480]	; (8002228 <main+0x498>)
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b77      	ldr	r3, [pc, #476]	; (8002228 <main+0x498>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	da98      	bge.n	8001f84 <main+0x1f4>
			  }
		  }

			  /// HUMIDITY

			  if (switch_state == 1)
 8002052:	4b76      	ldr	r3, [pc, #472]	; (800222c <main+0x49c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f040 80b0 	bne.w	80021bc <main+0x42c>
			  {
				  if(humidity >= 100)
 800205c:	4b75      	ldr	r3, [pc, #468]	; (8002234 <main+0x4a4>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002238 <main+0x4a8>
 8002066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	db02      	blt.n	8002076 <main+0x2e6>
					 humidity = 99;
 8002070:	4b70      	ldr	r3, [pc, #448]	; (8002234 <main+0x4a4>)
 8002072:	4a72      	ldr	r2, [pc, #456]	; (800223c <main+0x4ac>)
 8002074:	601a      	str	r2, [r3, #0]

			  	  if(humidity <= 0)
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <main+0x4a4>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	d803      	bhi.n	800208e <main+0x2fe>
			  		humidity = 0;
 8002086:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <main+0x4a4>)
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

			  	  sprintf(text_to_display, "HUM_%2.0f", humidity);
 800208e:	4b69      	ldr	r3, [pc, #420]	; (8002234 <main+0x4a4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa58 	bl	8000548 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4968      	ldr	r1, [pc, #416]	; (8002240 <main+0x4b0>)
 800209e:	4860      	ldr	r0, [pc, #384]	; (8002220 <main+0x490>)
 80020a0:	f002 fdfc 	bl	8004c9c <siprintf>



				  if(shift<7)
 80020a4:	4b62      	ldr	r3, [pc, #392]	; (8002230 <main+0x4a0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	dc43      	bgt.n	8002134 <main+0x3a4>
				  {

					  for(i=0; i<3; i++)
 80020ac:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <main+0x498>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e03a      	b.n	800212a <main+0x39a>
					  {
						  for(j=i; j<shift; j++)
 80020b4:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <main+0x498>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <main+0x488>)
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	e019      	b.n	80020f2 <main+0x362>
						  {
							  data[x] = text_to_display[j];
 80020be:	4b56      	ldr	r3, [pc, #344]	; (8002218 <main+0x488>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b56      	ldr	r3, [pc, #344]	; (800221c <main+0x48c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4956      	ldr	r1, [pc, #344]	; (8002220 <main+0x490>)
 80020c8:	5c89      	ldrb	r1, [r1, r2]
 80020ca:	4a56      	ldr	r2, [pc, #344]	; (8002224 <main+0x494>)
 80020cc:	54d1      	strb	r1, [r2, r3]
							  displaySign(data, i, switch_state);
 80020ce:	4b56      	ldr	r3, [pc, #344]	; (8002228 <main+0x498>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <main+0x49c>)
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4852      	ldr	r0, [pc, #328]	; (8002224 <main+0x494>)
 80020da:	f7fe ff01 	bl	8000ee0 <displaySign>
							  x++;
 80020de:	4b4f      	ldr	r3, [pc, #316]	; (800221c <main+0x48c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	4a4d      	ldr	r2, [pc, #308]	; (800221c <main+0x48c>)
 80020e6:	6013      	str	r3, [r2, #0]
						  for(j=i; j<shift; j++)
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <main+0x488>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	4a4a      	ldr	r2, [pc, #296]	; (8002218 <main+0x488>)
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b49      	ldr	r3, [pc, #292]	; (8002218 <main+0x488>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <main+0x4a0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dbdf      	blt.n	80020be <main+0x32e>
						  }

						  LL_mDelay(500);
 80020fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002102:	f002 f8f9 	bl	80042f8 <LL_mDelay>
						  memset(data, 0, sizeof data);
 8002106:	2204      	movs	r2, #4
 8002108:	2100      	movs	r1, #0
 800210a:	4846      	ldr	r0, [pc, #280]	; (8002224 <main+0x494>)
 800210c:	f002 f954 	bl	80043b8 <memset>
						  x = 0;
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <main+0x48c>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
						  shift++;
 8002116:	4b46      	ldr	r3, [pc, #280]	; (8002230 <main+0x4a0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	4a44      	ldr	r2, [pc, #272]	; (8002230 <main+0x4a0>)
 800211e:	6013      	str	r3, [r2, #0]
					  for(i=0; i<3; i++)
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <main+0x498>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <main+0x498>)
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <main+0x498>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b02      	cmp	r3, #2
 8002130:	ddc0      	ble.n	80020b4 <main+0x324>
 8002132:	e043      	b.n	80021bc <main+0x42c>
					  }
				  }else
				  {
					  for(i=1; i>=0; i--)
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <main+0x498>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e03b      	b.n	80021b4 <main+0x424>
					  {
						  for(j=i; j<shift-2; j++)
 800213c:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <main+0x498>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a35      	ldr	r2, [pc, #212]	; (8002218 <main+0x488>)
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e019      	b.n	800217a <main+0x3ea>
						  {
							  data[x] = text_to_display[j];
 8002146:	4b34      	ldr	r3, [pc, #208]	; (8002218 <main+0x488>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b34      	ldr	r3, [pc, #208]	; (800221c <main+0x48c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4934      	ldr	r1, [pc, #208]	; (8002220 <main+0x490>)
 8002150:	5c89      	ldrb	r1, [r1, r2]
 8002152:	4a34      	ldr	r2, [pc, #208]	; (8002224 <main+0x494>)
 8002154:	54d1      	strb	r1, [r2, r3]
							  displaySign(data, i, switch_state);
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <main+0x498>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a34      	ldr	r2, [pc, #208]	; (800222c <main+0x49c>)
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	4830      	ldr	r0, [pc, #192]	; (8002224 <main+0x494>)
 8002162:	f7fe febd 	bl	8000ee0 <displaySign>
							  x++;
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <main+0x48c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	4a2b      	ldr	r2, [pc, #172]	; (800221c <main+0x48c>)
 800216e:	6013      	str	r3, [r2, #0]
						  for(j=i; j<shift-2; j++)
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <main+0x488>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <main+0x488>)
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <main+0x4a0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1e9a      	subs	r2, r3, #2
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <main+0x488>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	dcde      	bgt.n	8002146 <main+0x3b6>
						  }

						  LL_mDelay(500);
 8002188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800218c:	f002 f8b4 	bl	80042f8 <LL_mDelay>
						  memset(data, 0, sizeof data);
 8002190:	2204      	movs	r2, #4
 8002192:	2100      	movs	r1, #0
 8002194:	4823      	ldr	r0, [pc, #140]	; (8002224 <main+0x494>)
 8002196:	f002 f90f 	bl	80043b8 <memset>
						  x = 0;
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <main+0x48c>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
						  shift--;
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <main+0x4a0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	4a22      	ldr	r2, [pc, #136]	; (8002230 <main+0x4a0>)
 80021a8:	6013      	str	r3, [r2, #0]
					  for(i=1; i>=0; i--)
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <main+0x498>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <main+0x498>)
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <main+0x498>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dabf      	bge.n	800213c <main+0x3ac>
				  }
			   }

			  /// PRESSURE

			  if (switch_state == 2)
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <main+0x49c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	f040 80ff 	bne.w	80023c4 <main+0x634>
			  {

				  if(pressure >= 10000)
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <main+0x4b4>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002248 <main+0x4b8>
 80021d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	db02      	blt.n	80021e0 <main+0x450>
					 pressure = 9999.99;
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <main+0x4b4>)
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <main+0x4bc>)
 80021de:	601a      	str	r2, [r3, #0]

			  	  if(pressure <= 0)
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <main+0x4b4>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	d803      	bhi.n	80021f8 <main+0x468>
			  		 pressure = 0;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <main+0x4b4>)
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

			  	  sprintf(text_to_display, "BAR_%4.2f", pressure);
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <main+0x4b4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f9a3 	bl	8000548 <__aeabi_f2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4912      	ldr	r1, [pc, #72]	; (8002250 <main+0x4c0>)
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <main+0x490>)
 800220a:	f002 fd47 	bl	8004c9c <siprintf>

			  	  for(i = 0; i<strlen(text_to_display); i++)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <main+0x498>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e042      	b.n	800229c <main+0x50c>
 8002216:	bf00      	nop
 8002218:	20000240 	.word	0x20000240
 800221c:	20000214 	.word	0x20000214
 8002220:	20000244 	.word	0x20000244
 8002224:	20000220 	.word	0x20000220
 8002228:	20000264 	.word	0x20000264
 800222c:	20000218 	.word	0x20000218
 8002230:	20000000 	.word	0x20000000
 8002234:	20000260 	.word	0x20000260
 8002238:	42c80000 	.word	0x42c80000
 800223c:	42c60000 	.word	0x42c60000
 8002240:	08008084 	.word	0x08008084
 8002244:	2000025c 	.word	0x2000025c
 8002248:	461c4000 	.word	0x461c4000
 800224c:	461c3ff6 	.word	0x461c3ff6
 8002250:	08008090 	.word	0x08008090
			  	  {
			  		  if(text_to_display[i] == '.')
 8002254:	4b8a      	ldr	r3, [pc, #552]	; (8002480 <main+0x6f0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a8a      	ldr	r2, [pc, #552]	; (8002484 <main+0x6f4>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	2b2e      	cmp	r3, #46	; 0x2e
 800225e:	d118      	bne.n	8002292 <main+0x502>
			  		  {
			  			text_to_display[i] = text_to_display[i+1];
 8002260:	4b87      	ldr	r3, [pc, #540]	; (8002480 <main+0x6f0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4b86      	ldr	r3, [pc, #536]	; (8002480 <main+0x6f0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4986      	ldr	r1, [pc, #536]	; (8002484 <main+0x6f4>)
 800226c:	5c89      	ldrb	r1, [r1, r2]
 800226e:	4a85      	ldr	r2, [pc, #532]	; (8002484 <main+0x6f4>)
 8002270:	54d1      	strb	r1, [r2, r3]
			  			text_to_display[i+1] = text_to_display[i+2];
 8002272:	4b83      	ldr	r3, [pc, #524]	; (8002480 <main+0x6f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1c9a      	adds	r2, r3, #2
 8002278:	4b81      	ldr	r3, [pc, #516]	; (8002480 <main+0x6f0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4981      	ldr	r1, [pc, #516]	; (8002484 <main+0x6f4>)
 8002280:	5c89      	ldrb	r1, [r1, r2]
 8002282:	4a80      	ldr	r2, [pc, #512]	; (8002484 <main+0x6f4>)
 8002284:	54d1      	strb	r1, [r2, r3]
			  			text_to_display[i+2] = '\0';
 8002286:	4b7e      	ldr	r3, [pc, #504]	; (8002480 <main+0x6f0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3302      	adds	r3, #2
 800228c:	4a7d      	ldr	r2, [pc, #500]	; (8002484 <main+0x6f4>)
 800228e:	2100      	movs	r1, #0
 8002290:	54d1      	strb	r1, [r2, r3]
			  	  for(i = 0; i<strlen(text_to_display); i++)
 8002292:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <main+0x6f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	4a79      	ldr	r2, [pc, #484]	; (8002480 <main+0x6f0>)
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4879      	ldr	r0, [pc, #484]	; (8002484 <main+0x6f4>)
 800229e:	f7fd ff97 	bl	80001d0 <strlen>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a76      	ldr	r2, [pc, #472]	; (8002480 <main+0x6f0>)
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d8d3      	bhi.n	8002254 <main+0x4c4>
			  		  }
			  	  }

				  if(shift<10)
 80022ac:	4b76      	ldr	r3, [pc, #472]	; (8002488 <main+0x6f8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	dc43      	bgt.n	800233c <main+0x5ac>
				  {

					  for(i=0; i<6; i++)
 80022b4:	4b72      	ldr	r3, [pc, #456]	; (8002480 <main+0x6f0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e03a      	b.n	8002332 <main+0x5a2>
					  {
						  for(j=i; j<shift; j++)
 80022bc:	4b70      	ldr	r3, [pc, #448]	; (8002480 <main+0x6f0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a72      	ldr	r2, [pc, #456]	; (800248c <main+0x6fc>)
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e019      	b.n	80022fa <main+0x56a>
						  {
							  data[x] = text_to_display[j];
 80022c6:	4b71      	ldr	r3, [pc, #452]	; (800248c <main+0x6fc>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b71      	ldr	r3, [pc, #452]	; (8002490 <main+0x700>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	496d      	ldr	r1, [pc, #436]	; (8002484 <main+0x6f4>)
 80022d0:	5c89      	ldrb	r1, [r1, r2]
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <main+0x704>)
 80022d4:	54d1      	strb	r1, [r2, r3]
							  displaySign(data, i, switch_state);
 80022d6:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <main+0x6f0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <main+0x708>)
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	486c      	ldr	r0, [pc, #432]	; (8002494 <main+0x704>)
 80022e2:	f7fe fdfd 	bl	8000ee0 <displaySign>
							  x++;
 80022e6:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <main+0x700>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <main+0x700>)
 80022ee:	6013      	str	r3, [r2, #0]
						  for(j=i; j<shift; j++)
 80022f0:	4b66      	ldr	r3, [pc, #408]	; (800248c <main+0x6fc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a65      	ldr	r2, [pc, #404]	; (800248c <main+0x6fc>)
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b64      	ldr	r3, [pc, #400]	; (800248c <main+0x6fc>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <main+0x6f8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	dbdf      	blt.n	80022c6 <main+0x536>
						  }

						  LL_mDelay(500);
 8002306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800230a:	f001 fff5 	bl	80042f8 <LL_mDelay>
						  memset(data, 0, sizeof data);
 800230e:	2204      	movs	r2, #4
 8002310:	2100      	movs	r1, #0
 8002312:	4860      	ldr	r0, [pc, #384]	; (8002494 <main+0x704>)
 8002314:	f002 f850 	bl	80043b8 <memset>
						  x = 0;
 8002318:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <main+0x700>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
						  shift++;
 800231e:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <main+0x6f8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <main+0x6f8>)
 8002326:	6013      	str	r3, [r2, #0]
					  for(i=0; i<6; i++)
 8002328:	4b55      	ldr	r3, [pc, #340]	; (8002480 <main+0x6f0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a54      	ldr	r2, [pc, #336]	; (8002480 <main+0x6f0>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <main+0x6f0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b05      	cmp	r3, #5
 8002338:	ddc0      	ble.n	80022bc <main+0x52c>
 800233a:	e043      	b.n	80023c4 <main+0x634>
					  }
				  }else
				  {
					  for(i=4; i>=0; i--)
 800233c:	4b50      	ldr	r3, [pc, #320]	; (8002480 <main+0x6f0>)
 800233e:	2204      	movs	r2, #4
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e03b      	b.n	80023bc <main+0x62c>
					  {
						  for(j=i; j<shift-2; j++)
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <main+0x6f0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <main+0x6fc>)
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e019      	b.n	8002382 <main+0x5f2>
						  {
							  data[x] = text_to_display[j];
 800234e:	4b4f      	ldr	r3, [pc, #316]	; (800248c <main+0x6fc>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <main+0x700>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	494b      	ldr	r1, [pc, #300]	; (8002484 <main+0x6f4>)
 8002358:	5c89      	ldrb	r1, [r1, r2]
 800235a:	4a4e      	ldr	r2, [pc, #312]	; (8002494 <main+0x704>)
 800235c:	54d1      	strb	r1, [r2, r3]
							  displaySign(data, i, switch_state);
 800235e:	4b48      	ldr	r3, [pc, #288]	; (8002480 <main+0x6f0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a4d      	ldr	r2, [pc, #308]	; (8002498 <main+0x708>)
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	484a      	ldr	r0, [pc, #296]	; (8002494 <main+0x704>)
 800236a:	f7fe fdb9 	bl	8000ee0 <displaySign>
							  x++;
 800236e:	4b48      	ldr	r3, [pc, #288]	; (8002490 <main+0x700>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	4a46      	ldr	r2, [pc, #280]	; (8002490 <main+0x700>)
 8002376:	6013      	str	r3, [r2, #0]
						  for(j=i; j<shift-2; j++)
 8002378:	4b44      	ldr	r3, [pc, #272]	; (800248c <main+0x6fc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	4a43      	ldr	r2, [pc, #268]	; (800248c <main+0x6fc>)
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <main+0x6f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1e9a      	subs	r2, r3, #2
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <main+0x6fc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	dcde      	bgt.n	800234e <main+0x5be>
						  }

						  LL_mDelay(500);
 8002390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002394:	f001 ffb0 	bl	80042f8 <LL_mDelay>
						  memset(data, 0, sizeof data);
 8002398:	2204      	movs	r2, #4
 800239a:	2100      	movs	r1, #0
 800239c:	483d      	ldr	r0, [pc, #244]	; (8002494 <main+0x704>)
 800239e:	f002 f80b 	bl	80043b8 <memset>
						  x = 0;
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <main+0x700>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
						  shift--;
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <main+0x6f8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	4a36      	ldr	r2, [pc, #216]	; (8002488 <main+0x6f8>)
 80023b0:	6013      	str	r3, [r2, #0]
					  for(i=4; i>=0; i--)
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <main+0x6f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	4a31      	ldr	r2, [pc, #196]	; (8002480 <main+0x6f0>)
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <main+0x6f0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	dabf      	bge.n	8002344 <main+0x5b4>
				  }
			  }

			  /// ALTITUDE

			  if (switch_state == 3)
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <main+0x708>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	f040 80f2 	bne.w	80025b2 <main+0x822>
			  {
				  if(altitude >= 10000)
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <main+0x70c>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80024a0 <main+0x710>
 80023d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e0:	db02      	blt.n	80023e8 <main+0x658>
					 altitude  = 9999.9;
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <main+0x70c>)
 80023e4:	4a2f      	ldr	r2, [pc, #188]	; (80024a4 <main+0x714>)
 80023e6:	601a      	str	r2, [r3, #0]

			  	  if(altitude  <= -10000)
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <main+0x70c>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80024a8 <main+0x718>
 80023f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	d802      	bhi.n	8002402 <main+0x672>
			  		 altitude  = -9999.9;
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <main+0x70c>)
 80023fe:	4a2b      	ldr	r2, [pc, #172]	; (80024ac <main+0x71c>)
 8002400:	601a      	str	r2, [r3, #0]

			  	  sprintf(text_to_display, "ALT_%4.1f", altitude);
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <main+0x70c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f89e 	bl	8000548 <__aeabi_f2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4927      	ldr	r1, [pc, #156]	; (80024b0 <main+0x720>)
 8002412:	481c      	ldr	r0, [pc, #112]	; (8002484 <main+0x6f4>)
 8002414:	f002 fc42 	bl	8004c9c <siprintf>

			  	  for(i = 0; i<strlen(text_to_display); i++)
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <main+0x6f0>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e019      	b.n	8002454 <main+0x6c4>
			  	  {
			  		  if(text_to_display[i] == '.')
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <main+0x6f0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <main+0x6f4>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	2b2e      	cmp	r3, #46	; 0x2e
 800242a:	d10e      	bne.n	800244a <main+0x6ba>
			  		  {
			  			  text_to_display[i] = text_to_display[i+1];
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <main+0x6f0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <main+0x6f0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4913      	ldr	r1, [pc, #76]	; (8002484 <main+0x6f4>)
 8002438:	5c89      	ldrb	r1, [r1, r2]
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <main+0x6f4>)
 800243c:	54d1      	strb	r1, [r2, r3]
			  			  text_to_display[i+1] = '\0';
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <main+0x6f0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <main+0x6f4>)
 8002446:	2100      	movs	r1, #0
 8002448:	54d1      	strb	r1, [r2, r3]
			  	  for(i = 0; i<strlen(text_to_display); i++)
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <main+0x6f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <main+0x6f0>)
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	480b      	ldr	r0, [pc, #44]	; (8002484 <main+0x6f4>)
 8002456:	f7fd febb 	bl	80001d0 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	4a08      	ldr	r2, [pc, #32]	; (8002480 <main+0x6f0>)
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	4293      	cmp	r3, r2
 8002462:	d8dd      	bhi.n	8002420 <main+0x690>
			  		  }
			  	  }

				  if(shift<9)
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <main+0x6f8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	dc5e      	bgt.n	800252a <main+0x79a>
				  {

					  for(i=0; i<5; i++)
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <main+0x6f0>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e055      	b.n	8002520 <main+0x790>
					  {
						  for(j=i; j<shift; j++)
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <main+0x6f0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <main+0x6fc>)
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e034      	b.n	80024e8 <main+0x758>
 800247e:	bf00      	nop
 8002480:	20000264 	.word	0x20000264
 8002484:	20000244 	.word	0x20000244
 8002488:	20000000 	.word	0x20000000
 800248c:	20000240 	.word	0x20000240
 8002490:	20000214 	.word	0x20000214
 8002494:	20000220 	.word	0x20000220
 8002498:	20000218 	.word	0x20000218
 800249c:	20000268 	.word	0x20000268
 80024a0:	461c4000 	.word	0x461c4000
 80024a4:	461c3f9a 	.word	0x461c3f9a
 80024a8:	c61c4000 	.word	0xc61c4000
 80024ac:	c61c3f9a 	.word	0xc61c3f9a
 80024b0:	0800809c 	.word	0x0800809c
						  {
							  data[x] = text_to_display[j];
 80024b4:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <main+0x834>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <main+0x838>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4943      	ldr	r1, [pc, #268]	; (80025cc <main+0x83c>)
 80024be:	5c89      	ldrb	r1, [r1, r2]
 80024c0:	4a43      	ldr	r2, [pc, #268]	; (80025d0 <main+0x840>)
 80024c2:	54d1      	strb	r1, [r2, r3]
							  displaySign(data, i, switch_state);
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <main+0x844>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a43      	ldr	r2, [pc, #268]	; (80025d8 <main+0x848>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4840      	ldr	r0, [pc, #256]	; (80025d0 <main+0x840>)
 80024d0:	f7fe fd06 	bl	8000ee0 <displaySign>
							  x++;
 80024d4:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <main+0x838>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <main+0x838>)
 80024dc:	6013      	str	r3, [r2, #0]
						  for(j=i; j<shift; j++)
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <main+0x834>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <main+0x834>)
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <main+0x834>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <main+0x84c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dbdf      	blt.n	80024b4 <main+0x724>
						  }

						  LL_mDelay(500);
 80024f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024f8:	f001 fefe 	bl	80042f8 <LL_mDelay>
						  memset(data, 0, sizeof data);
 80024fc:	2204      	movs	r2, #4
 80024fe:	2100      	movs	r1, #0
 8002500:	4833      	ldr	r0, [pc, #204]	; (80025d0 <main+0x840>)
 8002502:	f001 ff59 	bl	80043b8 <memset>
						  x = 0;
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <main+0x838>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
						  shift++;
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <main+0x84c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <main+0x84c>)
 8002514:	6013      	str	r3, [r2, #0]
					  for(i=0; i<5; i++)
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <main+0x844>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <main+0x844>)
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <main+0x844>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	dda5      	ble.n	8002474 <main+0x6e4>
 8002528:	e043      	b.n	80025b2 <main+0x822>
					  }
				  }else
				  {
					  for(i=3; i>=0; i--)
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <main+0x844>)
 800252c:	2203      	movs	r2, #3
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e03b      	b.n	80025aa <main+0x81a>
					  {
						  for(j=i; j<shift-2; j++)
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <main+0x844>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a23      	ldr	r2, [pc, #140]	; (80025c4 <main+0x834>)
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e019      	b.n	8002570 <main+0x7e0>
						  {
							  data[x] = text_to_display[j];
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <main+0x834>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <main+0x838>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4921      	ldr	r1, [pc, #132]	; (80025cc <main+0x83c>)
 8002546:	5c89      	ldrb	r1, [r1, r2]
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <main+0x840>)
 800254a:	54d1      	strb	r1, [r2, r3]
							  displaySign(data, i, switch_state);
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <main+0x844>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <main+0x848>)
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	481e      	ldr	r0, [pc, #120]	; (80025d0 <main+0x840>)
 8002558:	f7fe fcc2 	bl	8000ee0 <displaySign>
							  x++;
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <main+0x838>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <main+0x838>)
 8002564:	6013      	str	r3, [r2, #0]
						  for(j=i; j<shift-2; j++)
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <main+0x834>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <main+0x834>)
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <main+0x84c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	1e9a      	subs	r2, r3, #2
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <main+0x834>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	dcde      	bgt.n	800253c <main+0x7ac>
						  }

						  LL_mDelay(500);
 800257e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002582:	f001 feb9 	bl	80042f8 <LL_mDelay>
						  memset(data, 0, sizeof data);
 8002586:	2204      	movs	r2, #4
 8002588:	2100      	movs	r1, #0
 800258a:	4811      	ldr	r0, [pc, #68]	; (80025d0 <main+0x840>)
 800258c:	f001 ff14 	bl	80043b8 <memset>
						  x = 0;
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <main+0x838>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
						  shift--;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <main+0x84c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3b01      	subs	r3, #1
 800259c:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <main+0x84c>)
 800259e:	6013      	str	r3, [r2, #0]
					  for(i=3; i>=0; i--)
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <main+0x844>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <main+0x844>)
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <main+0x844>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	dabf      	bge.n	8002532 <main+0x7a2>
					  }
				  }
			  }

			  if(switch_state == 4)
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <main+0x848>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	f47f ac3c 	bne.w	8001e34 <main+0xa4>
				  switch_state = 0;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <main+0x848>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
		  lps25hb_get_pressure(&pressure);
 80025c2:	e437      	b.n	8001e34 <main+0xa4>
 80025c4:	20000240 	.word	0x20000240
 80025c8:	20000214 	.word	0x20000214
 80025cc:	20000244 	.word	0x20000244
 80025d0:	20000220 	.word	0x20000220
 80025d4:	20000264 	.word	0x20000264
 80025d8:	20000218 	.word	0x20000218
 80025dc:	20000000 	.word	0x20000000

080025e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff fb85 	bl	8001cf4 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80025ea:	f7ff fb97 	bl	8001d1c <LL_FLASH_GetLatency>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <SystemClock_Config+0x18>
  {
  Error_Handler();
 80025f4:	f000 f88c 	bl	8002710 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80025f8:	f7ff fab6 	bl	8001b68 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80025fc:	bf00      	nop
 80025fe:	f7ff fac3 	bl	8001b88 <LL_RCC_HSI_IsReady>
 8002602:	4603      	mov	r3, r0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d1fa      	bne.n	80025fe <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002608:	2010      	movs	r0, #16
 800260a:	f7ff facf 	bl	8001bac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff fb04 	bl	8001c1c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff fb15 	bl	8001c44 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff fb26 	bl	8001c6c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fad9 	bl	8001bd8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002626:	bf00      	nop
 8002628:	f7ff faea 	bl	8001c00 <LL_RCC_GetSysClkSource>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1fa      	bne.n	8002628 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8002632:	4806      	ldr	r0, [pc, #24]	; (800264c <SystemClock_Config+0x6c>)
 8002634:	f001 fe52 	bl	80042dc <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002638:	2004      	movs	r0, #4
 800263a:	f7ff fb7d 	bl	8001d38 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 800263e:	f7ff fb97 	bl	8001d70 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 8002642:	4802      	ldr	r0, [pc, #8]	; (800264c <SystemClock_Config+0x6c>)
 8002644:	f001 fe7e 	bl	8004344 <LL_SetSystemCoreClock>
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	007a1200 	.word	0x007a1200

08002650 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	4608      	mov	r0, r1
 800265a:	4611      	mov	r1, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4603      	mov	r3, r0
 8002660:	70fb      	strb	r3, [r7, #3]
 8002662:	460b      	mov	r3, r1
 8002664:	70bb      	strb	r3, [r7, #2]
 8002666:	4613      	mov	r3, r2
 8002668:	707b      	strb	r3, [r7, #1]
	uint8_t button_state = 0, timeout = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	2300      	movs	r3, #0
 8002670:	73bb      	strb	r3, [r7, #14]

	while(button_state < samples_required && timeout < samples_window)
 8002672:	e014      	b.n	800269e <checkButtonState+0x4e>
	{
		if(!(PORT->IDR & (1 << PIN)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <checkButtonState+0x3e>
		{
			button_state += 1;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	3301      	adds	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e001      	b.n	8002692 <checkButtonState+0x42>
		}
		else
		{
			button_state = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
		}

		timeout += 1;
 8002692:	7bbb      	ldrb	r3, [r7, #14]
 8002694:	3301      	adds	r3, #1
 8002696:	73bb      	strb	r3, [r7, #14]
		LL_mDelay(1);
 8002698:	2001      	movs	r0, #1
 800269a:	f001 fe2d 	bl	80042f8 <LL_mDelay>
	while(button_state < samples_required && timeout < samples_window)
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	7e3b      	ldrb	r3, [r7, #24]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d203      	bcs.n	80026ae <checkButtonState+0x5e>
 80026a6:	7bba      	ldrb	r2, [r7, #14]
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d3e2      	bcc.n	8002674 <checkButtonState+0x24>
	}

	if((button_state >= samples_required) && (timeout <= samples_window))
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	7e3b      	ldrb	r3, [r7, #24]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d305      	bcc.n	80026c2 <checkButtonState+0x72>
 80026b6:	7bba      	ldrb	r2, [r7, #14]
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d801      	bhi.n	80026c2 <checkButtonState+0x72>
	{
		return 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <checkButtonState+0x74>
	}
	else
	{
		return 0;
 80026c2:	2300      	movs	r3, #0
	}
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 80026d2:	2314      	movs	r3, #20
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2332      	movs	r3, #50	; 0x32
 80026d8:	2201      	movs	r2, #1
 80026da:	2103      	movs	r1, #3
 80026dc:	4809      	ldr	r0, [pc, #36]	; (8002704 <EXTI3_IRQHandler+0x38>)
 80026de:	f7ff ffb7 	bl	8002650 <checkButtonState>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <EXTI3_IRQHandler+0x26>
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		//switch_state ^= 1;
		switch_state++;
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <EXTI3_IRQHandler+0x3c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	4a06      	ldr	r2, [pc, #24]	; (8002708 <EXTI3_IRQHandler+0x3c>)
 80026f0:	6013      	str	r3, [r2, #0]
	}

	/* Clear EXTI4 pending register flag */

	EXTI->PR |= (EXTI_PR_PIF3);
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <EXTI3_IRQHandler+0x40>)
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <EXTI3_IRQHandler+0x40>)
 80026f8:	f043 0308 	orr.w	r3, r3, #8
 80026fc:	6153      	str	r3, [r2, #20]
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	48000400 	.word	0x48000400
 8002708:	20000218 	.word	0x20000218
 800270c:	40010400 	.word	0x40010400

08002710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <NMI_Handler+0x4>

08002724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <HardFault_Handler+0x4>

0800272a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <MemManage_Handler+0x4>

08002730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <BusFault_Handler+0x4>

08002736 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <UsageFault_Handler+0x4>

0800273c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <SysTick_Handler+0x20>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	1c50      	adds	r0, r2, #1
 8002774:	f143 0100 	adc.w	r1, r3, #0
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <SysTick_Handler+0x20>)
 800277a:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	20000200 	.word	0x20000200

0800278c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
	return 1;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_kill>:

int _kill(int pid, int sig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027a6:	f001 fddd 	bl	8004364 <__errno>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2216      	movs	r2, #22
 80027ae:	601a      	str	r2, [r3, #0]
	return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_exit>:

void _exit (int status)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ffe7 	bl	800279c <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ce:	e7fe      	b.n	80027ce <_exit+0x12>

080027d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e00a      	b.n	80027f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027e2:	f3af 8000 	nop.w
 80027e6:	4601      	mov	r1, r0
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	60ba      	str	r2, [r7, #8]
 80027ee:	b2ca      	uxtb	r2, r1
 80027f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dbf0      	blt.n	80027e2 <_read+0x12>
	}

return len;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e009      	b.n	8002830 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	60ba      	str	r2, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3301      	adds	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	dbf1      	blt.n	800281c <_write+0x12>
	}
	return len;
 8002838:	687b      	ldr	r3, [r7, #4]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_close>:

int _close(int file)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	return -1;
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286a:	605a      	str	r2, [r3, #4]
	return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_isatty>:

int _isatty(int file)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
	return 1;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
	return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <_sbrk+0x5c>)
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <_sbrk+0x60>)
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <_sbrk+0x64>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <_sbrk+0x68>)
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d207      	bcs.n	80028ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028dc:	f001 fd42 	bl	8004364 <__errno>
 80028e0:	4603      	mov	r3, r0
 80028e2:	220c      	movs	r2, #12
 80028e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	e009      	b.n	8002900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <_sbrk+0x64>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <_sbrk+0x64>)
 80028fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20003000 	.word	0x20003000
 800290c:	00000400 	.word	0x00000400
 8002910:	2000021c 	.word	0x2000021c
 8002914:	20000288 	.word	0x20000288

08002918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <SystemInit+0x20>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <SystemInit+0x20>)
 8002924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4907      	ldr	r1, [pc, #28]	; (8002990 <__NVIC_EnableIRQ+0x38>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <LL_APB1_GRP1_EnableClock>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	4907      	ldr	r1, [pc, #28]	; (8002a7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40021000 	.word	0x40021000

08002a80 <LL_TIM_EnableCounter>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_TIM_EnableARRPreload>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_TIM_OC_DisableFast>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d028      	beq.n	8002b22 <LL_TIM_OC_DisableFast+0x62>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d023      	beq.n	8002b1e <LL_TIM_OC_DisableFast+0x5e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d01e      	beq.n	8002b1a <LL_TIM_OC_DisableFast+0x5a>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d019      	beq.n	8002b16 <LL_TIM_OC_DisableFast+0x56>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae8:	d013      	beq.n	8002b12 <LL_TIM_OC_DisableFast+0x52>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af0:	d00d      	beq.n	8002b0e <LL_TIM_OC_DisableFast+0x4e>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	d007      	beq.n	8002b0a <LL_TIM_OC_DisableFast+0x4a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b00:	d101      	bne.n	8002b06 <LL_TIM_OC_DisableFast+0x46>
 8002b02:	2307      	movs	r3, #7
 8002b04:	e00e      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b06:	2308      	movs	r3, #8
 8002b08:	e00c      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	e00a      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e008      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <LL_TIM_OC_DisableFast+0x64>
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <LL_TIM_OC_DisableFast+0x9c>)
 8002b30:	5cd3      	ldrb	r3, [r2, r3]
 8002b32:	440b      	add	r3, r1
 8002b34:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	4908      	ldr	r1, [pc, #32]	; (8002b60 <LL_TIM_OC_DisableFast+0xa0>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	4619      	mov	r1, r3
 8002b42:	2304      	movs	r3, #4
 8002b44:	408b      	lsls	r3, r1
 8002b46:	43db      	mvns	r3, r3
 8002b48:	401a      	ands	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	080080f4 	.word	0x080080f4
 8002b60:	08008100 	.word	0x08008100

08002b64 <LL_TIM_SetClockSource>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	609a      	str	r2, [r3, #8]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_TIM_SetTriggerOutput>:
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_TIM_DisableMasterSlaveMode>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fbd1 	bl	80043b8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002c16:	2002      	movs	r0, #2
 8002c18:	f7ff ff1a 	bl	8002a50 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002c1c:	f7ff fe8e 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2200      	movs	r2, #0
 8002c24:	210f      	movs	r1, #15
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fede 	bl	80029e8 <NVIC_EncodePriority>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4619      	mov	r1, r3
 8002c30:	201d      	movs	r0, #29
 8002c32:	f7ff feaf 	bl	8002994 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002c36:	201d      	movs	r0, #29
 8002c38:	f7ff fe8e 	bl	8002958 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8002c3c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002c40:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8002c46:	2313      	movs	r3, #19
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c52:	4619      	mov	r1, r3
 8002c54:	4817      	ldr	r0, [pc, #92]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002c56:	f000 ffbd 	bl	8003bd4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002c5a:	4816      	ldr	r0, [pc, #88]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002c5c:	f7ff ff20 	bl	8002aa0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002c60:	2100      	movs	r1, #0
 8002c62:	4814      	ldr	r0, [pc, #80]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002c64:	f7ff ff7e 	bl	8002b64 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002c68:	2310      	movs	r3, #16
 8002c6a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2101      	movs	r1, #1
 8002c82:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002c84:	f001 f818 	bl	8003cb8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	480a      	ldr	r0, [pc, #40]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002c8c:	f7ff ff18 	bl	8002ac0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002c90:	2100      	movs	r1, #0
 8002c92:	4808      	ldr	r0, [pc, #32]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002c94:	f7ff ff7b 	bl	8002b8e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002c98:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002c9a:	f7ff ff8b 	bl	8002bb4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002ca0:	f7ff ff98 	bl	8002bd4 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <MX_TIM3_Init+0xc0>)
 8002ca6:	f7ff feeb 	bl	8002a80 <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	3738      	adds	r7, #56	; 0x38
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40000400 	.word	0x40000400

08002cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cbc:	480d      	ldr	r0, [pc, #52]	; (8002cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cbe:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cc0:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <LoopForever+0xe>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc4:	e002      	b.n	8002ccc <LoopCopyDataInit>

08002cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cca:	3304      	adds	r3, #4

08002ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd0:	d3f9      	bcc.n	8002cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cd4:	4c0b      	ldr	r4, [pc, #44]	; (8002d04 <LoopForever+0x16>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd8:	e001      	b.n	8002cde <LoopFillZerobss>

08002cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cdc:	3204      	adds	r2, #4

08002cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce0:	d3fb      	bcc.n	8002cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ce2:	f7ff fe19 	bl	8002918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ce6:	f001 fb43 	bl	8004370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cea:	f7ff f851 	bl	8001d90 <main>

08002cee <LoopForever>:

LoopForever:
    b LoopForever
 8002cee:	e7fe      	b.n	8002cee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cf0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cfc:	08008538 	.word	0x08008538
  ldr r2, =_sbss
 8002d00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d04:	20000288 	.word	0x20000288

08002d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d08:	e7fe      	b.n	8002d08 <ADC1_2_IRQHandler>
	...

08002d0c <lps25hb_init>:

uint8_t data = 0;
uint8_t address = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8002d16:	2064      	movs	r0, #100	; 0x64
 8002d18:	f001 faee 	bl	80042f8 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 8002d1c:	200f      	movs	r0, #15
 8002d1e:	f000 f8a7 	bl	8002e70 <lps25hb_read_byte>
 8002d22:	4603      	mov	r3, r0
 8002d24:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 8002d26:	79bb      	ldrb	r3, [r7, #6]
 8002d28:	2bbd      	cmp	r3, #189	; 0xbd
 8002d2a:	d102      	bne.n	8002d32 <lps25hb_init+0x26>
	{
		status = 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	e00f      	b.n	8002d52 <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		address = LPS25HB_DEVICE_ADDRESS_1;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <lps25hb_init+0x60>)
 8002d34:	22ba      	movs	r2, #186	; 0xba
 8002d36:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 8002d38:	200f      	movs	r0, #15
 8002d3a:	f000 f899 	bl	8002e70 <lps25hb_read_byte>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 8002d42:	79bb      	ldrb	r3, [r7, #6]
 8002d44:	2bbd      	cmp	r3, #189	; 0xbd
 8002d46:	d102      	bne.n	8002d4e <lps25hb_init+0x42>
		{
			status = 1;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	71fb      	strb	r3, [r7, #7]
 8002d4c:	e001      	b.n	8002d52 <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	uint8_t ctrl1 = 0b11000000;
 8002d52:	23c0      	movs	r3, #192	; 0xc0
 8002d54:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1); //active mode
 8002d56:	797b      	ldrb	r3, [r7, #5]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2020      	movs	r0, #32
 8002d5c:	f000 f8b4 	bl	8002ec8 <lps25hb_write_byte>

	return status;
 8002d60:	79fb      	ldrb	r3, [r7, #7]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000008 	.word	0x20000008

08002d70 <lps25hb_get_pressure>:

void lps25hb_get_pressure(float *p)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	uint8_t data[3];

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDRESS, 3);
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	2128      	movs	r1, #40	; 0x28
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f88d 	bl	8002ea0 <lps25hb_readArray>
	*p = ((int32_t)(data[2] << 16) | (data[1] << 8) | data[0])/(float)(4096);
 8002d86:	7bbb      	ldrb	r3, [r7, #14]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	7b7b      	ldrb	r3, [r7, #13]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	7b3a      	ldrb	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	ee07 3a90 	vmov	s15, r3
 8002d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d9c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002db4 <lps25hb_get_pressure+0x44>
 8002da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	edc3 7a00 	vstr	s15, [r3]
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	45800000 	.word	0x45800000

08002db8 <lps25hb_get_altitude>:


void lps25hb_get_altitude(float *a)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;
	float p0 = 1013.25;
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <lps25hb_get_altitude+0xb0>)
 8002dc2:	617b      	str	r3, [r7, #20]
	float scale = 4096;
 8002dc4:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8002dc8:	613b      	str	r3, [r7, #16]

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDRESS, 3);
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	2203      	movs	r2, #3
 8002dd0:	2128      	movs	r1, #40	; 0x28
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f864 	bl	8002ea0 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8002dd8:	7abb      	ldrb	r3, [r7, #10]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	7a7a      	ldrb	r2, [r7, #9]
 8002dde:	0212      	lsls	r2, r2, #8
 8002de0:	4313      	orrs	r3, r2
 8002de2:	7a3a      	ldrb	r2, [r7, #8]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
	*a = 44330*(1-pow((float)(pressure)/(float)(scale*p0),(1/5.255f)));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002df2:	edd7 6a04 	vldr	s13, [r7, #16]
 8002df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e02:	ee16 0a90 	vmov	r0, s13
 8002e06:	f7fd fb9f 	bl	8000548 <__aeabi_f2d>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002e58 <lps25hb_get_altitude+0xa0>
 8002e12:	ec43 2b10 	vmov	d0, r2, r3
 8002e16:	f004 f96d 	bl	80070f4 <pow>
 8002e1a:	ec53 2b10 	vmov	r2, r3, d0
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	4912      	ldr	r1, [pc, #72]	; (8002e6c <lps25hb_get_altitude+0xb4>)
 8002e24:	f7fd fa30 	bl	8000288 <__aeabi_dsub>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	a30b      	add	r3, pc, #44	; (adr r3, 8002e60 <lps25hb_get_altitude+0xa8>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fbdf 	bl	80005f8 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fd feb1 	bl	8000ba8 <__aeabi_d2f>
 8002e46:	4602      	mov	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	601a      	str	r2, [r3, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	f3af 8000 	nop.w
 8002e58:	c0000000 	.word	0xc0000000
 8002e5c:	3fc85b95 	.word	0x3fc85b95
 8002e60:	00000000 	.word	0x00000000
 8002e64:	40e5a540 	.word	0x40e5a540
 8002e68:	447d5000 	.word	0x447d5000
 8002e6c:	3ff00000 	.word	0x3ff00000

08002e70 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <lps25hb_read_byte+0x2c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDRESS, 0));
 8002e80:	79fa      	ldrb	r2, [r7, #7]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	23bb      	movs	r3, #187	; 0xbb
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <lps25hb_read_byte+0x2c>)
 8002e8c:	f7fe fd56 	bl	800193c <i2c_master_read>
 8002e90:	4603      	mov	r3, r0
 8002e92:	781b      	ldrb	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000220 	.word	0x20000220

08002ea0 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
 8002eac:	4613      	mov	r3, r2
 8002eae:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, LPS25HB_DEVICE_ADDRESS, 1);
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	78b9      	ldrb	r1, [r7, #2]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	23bb      	movs	r3, #187	; 0xbb
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe fd3e 	bl	800193c <i2c_master_read>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	71fb      	strb	r3, [r7, #7]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS25HB_DEVICE_ADDRESS, 0);
 8002ed8:	79f9      	ldrb	r1, [r7, #7]
 8002eda:	79b8      	ldrb	r0, [r7, #6]
 8002edc:	2300      	movs	r3, #0
 8002ede:	22bb      	movs	r2, #187	; 0xbb
 8002ee0:	f7fe fce8 	bl	80018b4 <i2c_master_write>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <hts221_init>:
#include "hts221.h"

uint8_t data1 = 0;
uint8_t address1 = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_init(void){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8002ef6:	2064      	movs	r0, #100	; 0x64
 8002ef8:	f001 f9fe 	bl	80042f8 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 8002efc:	200f      	movs	r0, #15
 8002efe:	f000 f923 	bl	8003148 <hts221_read_byte>
 8002f02:	4603      	mov	r3, r0
 8002f04:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 8002f06:	79bb      	ldrb	r3, [r7, #6]
 8002f08:	2bbc      	cmp	r3, #188	; 0xbc
 8002f0a:	d102      	bne.n	8002f12 <hts221_init+0x26>
	{
		status = 1;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	71fb      	strb	r3, [r7, #7]
 8002f10:	e00f      	b.n	8002f32 <hts221_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		address1 = HTS221_DEVICE_ADDRESS_1;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <hts221_init+0x60>)
 8002f14:	22bf      	movs	r2, #191	; 0xbf
 8002f16:	701a      	strb	r2, [r3, #0]
		val = hts221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 8002f18:	200f      	movs	r0, #15
 8002f1a:	f000 f915 	bl	8003148 <hts221_read_byte>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71bb      	strb	r3, [r7, #6]
		if(val == HTS221_WHO_AM_I_VALUE)
 8002f22:	79bb      	ldrb	r3, [r7, #6]
 8002f24:	2bbc      	cmp	r3, #188	; 0xbc
 8002f26:	d102      	bne.n	8002f2e <hts221_init+0x42>
		{
			status = 1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	71fb      	strb	r3, [r7, #7]
 8002f2c:	e001      	b.n	8002f32 <hts221_init+0x46>
		}
		else
		{
			status = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	uint8_t ctrl1 = 0b10000111;
 8002f32:	2387      	movs	r3, #135	; 0x87
 8002f34:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1); //active mode
 8002f36:	797b      	ldrb	r3, [r7, #5]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2020      	movs	r0, #32
 8002f3c:	f000 f930 	bl	80031a0 <hts221_write_byte>

	return status;
 8002f40:	79fb      	ldrb	r3, [r7, #7]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000009 	.word	0x20000009

08002f50 <hts221_get_temperature>:

void hts221_get_temperature(float *t)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	uint8_t data1[2];
	uint8_t ctrl = hts221_read_byte(HTS221_ADDRESS_CTRL2);
 8002f58:	2021      	movs	r0, #33	; 0x21
 8002f5a:	f000 f8f5 	bl	8003148 <hts221_read_byte>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]

	ctrl |= 0x1;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
	hts221_write_byte(HTS221_ADDRESS_CTRL2, ctrl);
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	2021      	movs	r0, #33	; 0x21
 8002f70:	f000 f916 	bl	80031a0 <hts221_write_byte>

	int16_t T_OUT, T0_OUT, T1_OUT, T0_degC, T1_degC;

	uint8_t T1_T0_MSB = hts221_read_byte(HTS221_ADDRESS_T1_T0_MSB);
 8002f74:	2035      	movs	r0, #53	; 0x35
 8002f76:	f000 f8e7 	bl	8003148 <hts221_read_byte>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75bb      	strb	r3, [r7, #22]

	T0_degC = hts221_read_byte(HTS221_ADDRESS_T0_degC_x8);
 8002f7e:	2032      	movs	r0, #50	; 0x32
 8002f80:	f000 f8e2 	bl	8003148 <hts221_read_byte>
 8002f84:	4603      	mov	r3, r0
 8002f86:	82bb      	strh	r3, [r7, #20]
	T1_degC = hts221_read_byte(HTS221_ADDRESS_T1_degC_x8);
 8002f88:	2033      	movs	r0, #51	; 0x33
 8002f8a:	f000 f8dd 	bl	8003148 <hts221_read_byte>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	827b      	strh	r3, [r7, #18]

	T0_degC += ((T1_T0_MSB & 0x3)<<8);
 8002f92:	7dbb      	ldrb	r3, [r7, #22]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	8abb      	ldrh	r3, [r7, #20]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	82bb      	strh	r3, [r7, #20]
	T0_degC /= 8;
 8002fa6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da00      	bge.n	8002fb0 <hts221_get_temperature+0x60>
 8002fae:	3307      	adds	r3, #7
 8002fb0:	10db      	asrs	r3, r3, #3
 8002fb2:	82bb      	strh	r3, [r7, #20]

	T1_degC += ((T1_T0_MSB & ((0x3)<<2))<<6);
 8002fb4:	7dbb      	ldrb	r3, [r7, #22]
 8002fb6:	019b      	lsls	r3, r3, #6
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	8a7b      	ldrh	r3, [r7, #18]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	827b      	strh	r3, [r7, #18]
	T1_degC /= 8;
 8002fc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da00      	bge.n	8002fd2 <hts221_get_temperature+0x82>
 8002fd0:	3307      	adds	r3, #7
 8002fd2:	10db      	asrs	r3, r3, #3
 8002fd4:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data1, HTS221_ADDRESS_T0_OUT_1, 2);
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	2202      	movs	r2, #2
 8002fdc:	213c      	movs	r1, #60	; 0x3c
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f8ca 	bl	8003178 <hts221_readArray>
	T0_OUT = (((uint16_t)data1[1]) << 8) | data1[0];
 8002fe4:	7a7b      	ldrb	r3, [r7, #9]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	7a3b      	ldrb	r3, [r7, #8]
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data1, HTS221_ADDRESS_T1_OUT_1, 2);
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	213e      	movs	r1, #62	; 0x3e
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f8bc 	bl	8003178 <hts221_readArray>
	T1_OUT = (((uint16_t)data1[1]) << 8) | data1[0];
 8003000:	7a7b      	ldrb	r3, [r7, #9]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	b21a      	sxth	r2, r3
 8003006:	7a3b      	ldrb	r3, [r7, #8]
 8003008:	b21b      	sxth	r3, r3
 800300a:	4313      	orrs	r3, r2
 800300c:	81fb      	strh	r3, [r7, #14]

	hts221_readArray(data1, HTS221_ADDRESS_T_OUT_1, 2);
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	2202      	movs	r2, #2
 8003014:	212a      	movs	r1, #42	; 0x2a
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f8ae 	bl	8003178 <hts221_readArray>

	T_OUT = ((uint16_t)data1[1]) << 8 | data1[0];
 800301c:	7a7b      	ldrb	r3, [r7, #9]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	b21a      	sxth	r2, r3
 8003022:	7a3b      	ldrb	r3, [r7, #8]
 8003024:	b21b      	sxth	r3, r3
 8003026:	4313      	orrs	r3, r2
 8003028:	81bb      	strh	r3, [r7, #12]
	*t = (float)((T1_degC - T0_degC)*(T_OUT-T0_OUT)/(float)(T1_OUT-T0_OUT)+T0_degC);
 800302a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800302e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003038:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800303c:	1a8a      	subs	r2, r1, r2
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800304a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800304e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	ee07 3a90 	vmov	s15, r3
 8003058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800305c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003060:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	edc3 7a00 	vstr	s15, [r3]
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <hts221_get_humidity>:

void hts221_get_humidity(float *h)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	uint8_t data[2], H0_rH, H1_rH, H0_rH_x2, H1_rH_x2;
	int16_t H_OUT, H0_T0_OUT, H1_T0_OUT;

	H0_rH_x2 = hts221_read_byte(HTS221_ADDRESS_H0_rH_x2);
 8003086:	2030      	movs	r0, #48	; 0x30
 8003088:	f000 f85e 	bl	8003148 <hts221_read_byte>
 800308c:	4603      	mov	r3, r0
 800308e:	75fb      	strb	r3, [r7, #23]
	H1_rH_x2 = hts221_read_byte(HTS221_ADDRESS_H1_rH_x2);
 8003090:	2031      	movs	r0, #49	; 0x31
 8003092:	f000 f859 	bl	8003148 <hts221_read_byte>
 8003096:	4603      	mov	r3, r0
 8003098:	75bb      	strb	r3, [r7, #22]

	H0_rH = H0_rH_x2/2;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	757b      	strb	r3, [r7, #21]
	H1_rH = H1_rH_x2/2;
 80030a0:	7dbb      	ldrb	r3, [r7, #22]
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	753b      	strb	r3, [r7, #20]

	hts221_readArray(data, HTS221_ADDRESS_H0_T0_OUT_1, 2);
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	2202      	movs	r2, #2
 80030ac:	2136      	movs	r1, #54	; 0x36
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f862 	bl	8003178 <hts221_readArray>
	H0_T0_OUT = ((uint16_t)data[1]) << 8 | data[0];
 80030b4:	7b7b      	ldrb	r3, [r7, #13]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	b21a      	sxth	r2, r3
 80030ba:	7b3b      	ldrb	r3, [r7, #12]
 80030bc:	b21b      	sxth	r3, r3
 80030be:	4313      	orrs	r3, r2
 80030c0:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_ADDRESS_H1_T0_OUT_1, 2);
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	2202      	movs	r2, #2
 80030c8:	213a      	movs	r1, #58	; 0x3a
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f854 	bl	8003178 <hts221_readArray>
	H1_T0_OUT = ((uint16_t)data[1]) << 8 | data[0];
 80030d0:	7b7b      	ldrb	r3, [r7, #13]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	b21a      	sxth	r2, r3
 80030d6:	7b3b      	ldrb	r3, [r7, #12]
 80030d8:	b21b      	sxth	r3, r3
 80030da:	4313      	orrs	r3, r2
 80030dc:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_ADDRESS_H_OUT_1, 2);
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	2202      	movs	r2, #2
 80030e4:	2128      	movs	r1, #40	; 0x28
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f846 	bl	8003178 <hts221_readArray>

	H_OUT = ((uint16_t)data[1]) << 8 | data[0];
 80030ec:	7b7b      	ldrb	r3, [r7, #13]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	7b3b      	ldrb	r3, [r7, #12]
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	81fb      	strh	r3, [r7, #14]
	*h = (float)((H1_rH-H0_rH)*(H_OUT-H0_T0_OUT)/(float)(H1_T0_OUT-H0_T0_OUT)+H0_rH);
 80030fa:	7d3a      	ldrb	r2, [r7, #20]
 80030fc:	7d7b      	ldrb	r3, [r7, #21]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003104:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003108:	1a8a      	subs	r2, r1, r2
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003116:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800311a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312c:	7d7b      	ldrb	r3, [r7, #21]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	edc3 7a00 	vstr	s15, [r3]
}
 8003140:	bf00      	nop
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af02      	add	r7, sp, #8
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
	data1 = 0;
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <hts221_read_byte+0x2c>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data1, 1, reg_addr, HTS221_DEVICE_ADDRESS, 0));
 8003158:	79fa      	ldrb	r2, [r7, #7]
 800315a:	2300      	movs	r3, #0
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	23be      	movs	r3, #190	; 0xbe
 8003160:	2101      	movs	r1, #1
 8003162:	4804      	ldr	r0, [pc, #16]	; (8003174 <hts221_read_byte+0x2c>)
 8003164:	f7fe fbea 	bl	800193c <i2c_master_read>
 8003168:	4603      	mov	r3, r0
 800316a:	781b      	ldrb	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000221 	.word	0x20000221

08003178 <hts221_readArray>:

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af02      	add	r7, sp, #8
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
 8003184:	4613      	mov	r3, r2
 8003186:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDRESS, 1);
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	78b9      	ldrb	r1, [r7, #2]
 800318c:	2301      	movs	r3, #1
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	23be      	movs	r3, #190	; 0xbe
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe fbd2 	bl	800193c <i2c_master_read>
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	460a      	mov	r2, r1
 80031aa:	71fb      	strb	r3, [r7, #7]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDRESS, 0);
 80031b0:	79f9      	ldrb	r1, [r7, #7]
 80031b2:	79b8      	ldrb	r0, [r7, #6]
 80031b4:	2300      	movs	r3, #0
 80031b6:	22be      	movs	r2, #190	; 0xbe
 80031b8:	f7fe fb7c 	bl	80018b4 <i2c_master_write>
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40010400 	.word	0x40010400

080031e8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <LL_EXTI_EnableIT_32_63+0x20>)
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	4904      	ldr	r1, [pc, #16]	; (8003208 <LL_EXTI_EnableIT_32_63+0x20>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	620b      	str	r3, [r1, #32]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40010400 	.word	0x40010400

0800320c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <LL_EXTI_DisableIT_0_31+0x24>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	43db      	mvns	r3, r3
 800321c:	4904      	ldr	r1, [pc, #16]	; (8003230 <LL_EXTI_DisableIT_0_31+0x24>)
 800321e:	4013      	ands	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010400 	.word	0x40010400

08003234 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <LL_EXTI_DisableIT_32_63+0x24>)
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	43db      	mvns	r3, r3
 8003244:	4904      	ldr	r1, [pc, #16]	; (8003258 <LL_EXTI_DisableIT_32_63+0x24>)
 8003246:	4013      	ands	r3, r2
 8003248:	620b      	str	r3, [r1, #32]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010400 	.word	0x40010400

0800325c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <LL_EXTI_EnableEvent_0_31+0x20>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]

}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40010400 	.word	0x40010400

08003280 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800328a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328c:	4904      	ldr	r1, [pc, #16]	; (80032a0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4313      	orrs	r3, r2
 8003292:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40010400 	.word	0x40010400

080032a4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	4904      	ldr	r1, [pc, #16]	; (80032c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010400 	.word	0x40010400

080032cc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80032d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	43db      	mvns	r3, r3
 80032dc:	4904      	ldr	r1, [pc, #16]	; (80032f0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80032de:	4013      	ands	r3, r2
 80032e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010400 	.word	0x40010400

080032f4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	4904      	ldr	r1, [pc, #16]	; (8003314 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]

}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40010400 	.word	0x40010400

08003318 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003324:	4904      	ldr	r1, [pc, #16]	; (8003338 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4313      	orrs	r3, r2
 800332a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40010400 	.word	0x40010400

0800333c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	43db      	mvns	r3, r3
 800334c:	4904      	ldr	r1, [pc, #16]	; (8003360 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800334e:	4013      	ands	r3, r2
 8003350:	608b      	str	r3, [r1, #8]

}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010400 	.word	0x40010400

08003364 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800336e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	43db      	mvns	r3, r3
 8003374:	4904      	ldr	r1, [pc, #16]	; (8003388 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003376:	4013      	ands	r3, r2
 8003378:	628b      	str	r3, [r1, #40]	; 0x28
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40010400 	.word	0x40010400

0800338c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4904      	ldr	r1, [pc, #16]	; (80033ac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4313      	orrs	r3, r2
 800339e:	60cb      	str	r3, [r1, #12]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40010400 	.word	0x40010400

080033b0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	4904      	ldr	r1, [pc, #16]	; (80033d0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40010400 	.word	0x40010400

080033d4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	60cb      	str	r3, [r1, #12]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010400 	.word	0x40010400

080033fc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	43db      	mvns	r3, r3
 800340c:	4904      	ldr	r1, [pc, #16]	; (8003420 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800340e:	4013      	ands	r3, r2
 8003410:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010400 	.word	0x40010400

08003424 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7a1b      	ldrb	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80cd 	beq.w	80035d4 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d061      	beq.n	8003506 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7a5b      	ldrb	r3, [r3, #9]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d01c      	beq.n	8003484 <LL_EXTI_Init+0x60>
 800344a:	2b02      	cmp	r3, #2
 800344c:	dc25      	bgt.n	800349a <LL_EXTI_Init+0x76>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <LL_EXTI_Init+0x34>
 8003452:	2b01      	cmp	r3, #1
 8003454:	d00b      	beq.n	800346e <LL_EXTI_Init+0x4a>
 8003456:	e020      	b.n	800349a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff21 	bl	80032a4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff feac 	bl	80031c4 <LL_EXTI_EnableIT_0_31>
          break;
 800346c:	e018      	b.n	80034a0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff feca 	bl	800320c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff feed 	bl	800325c <LL_EXTI_EnableEvent_0_31>
          break;
 8003482:	e00d      	b.n	80034a0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fe9b 	bl	80031c4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fee2 	bl	800325c <LL_EXTI_EnableEvent_0_31>
          break;
 8003498:	e002      	b.n	80034a0 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
          break;
 800349e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7a9b      	ldrb	r3, [r3, #10]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02e      	beq.n	8003506 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7a9b      	ldrb	r3, [r3, #10]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d01c      	beq.n	80034ea <LL_EXTI_Init+0xc6>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	dc25      	bgt.n	8003500 <LL_EXTI_Init+0xdc>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <LL_EXTI_Init+0x9a>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d00b      	beq.n	80034d4 <LL_EXTI_Init+0xb0>
 80034bc:	e020      	b.n	8003500 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff86 	bl	80033d4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff11 	bl	80032f4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80034d2:	e019      	b.n	8003508 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff2f 	bl	800333c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ff52 	bl	800338c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80034e8:	e00e      	b.n	8003508 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff00 	bl	80032f4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff47 	bl	800338c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80034fe:	e003      	b.n	8003508 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
            break;
 8003504:	e000      	b.n	8003508 <LL_EXTI_Init+0xe4>
        }
      }
 8003506:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d076      	beq.n	80035fe <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7a5b      	ldrb	r3, [r3, #9]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d01c      	beq.n	8003552 <LL_EXTI_Init+0x12e>
 8003518:	2b02      	cmp	r3, #2
 800351a:	dc25      	bgt.n	8003568 <LL_EXTI_Init+0x144>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <LL_EXTI_Init+0x102>
 8003520:	2b01      	cmp	r3, #1
 8003522:	d00b      	beq.n	800353c <LL_EXTI_Init+0x118>
 8003524:	e020      	b.n	8003568 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fece 	bl	80032cc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fe57 	bl	80031e8 <LL_EXTI_EnableIT_32_63>
          break;
 800353a:	e018      	b.n	800356e <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe77 	bl	8003234 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fe98 	bl	8003280 <LL_EXTI_EnableEvent_32_63>
          break;
 8003550:	e00d      	b.n	800356e <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe46 	bl	80031e8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe8d 	bl	8003280 <LL_EXTI_EnableEvent_32_63>
          break;
 8003566:	e002      	b.n	800356e <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
          break;
 800356c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7a9b      	ldrb	r3, [r3, #10]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d043      	beq.n	80035fe <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7a9b      	ldrb	r3, [r3, #10]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d01c      	beq.n	80035b8 <LL_EXTI_Init+0x194>
 800357e:	2b03      	cmp	r3, #3
 8003580:	dc25      	bgt.n	80035ce <LL_EXTI_Init+0x1aa>
 8003582:	2b01      	cmp	r3, #1
 8003584:	d002      	beq.n	800358c <LL_EXTI_Init+0x168>
 8003586:	2b02      	cmp	r3, #2
 8003588:	d00b      	beq.n	80035a2 <LL_EXTI_Init+0x17e>
 800358a:	e020      	b.n	80035ce <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff33 	bl	80033fc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff febc 	bl	8003318 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80035a0:	e02e      	b.n	8003600 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fedc 	bl	8003364 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fefd 	bl	80033b0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80035b6:	e023      	b.n	8003600 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff feab 	bl	8003318 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fef2 	bl	80033b0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80035cc:	e018      	b.n	8003600 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
            break;
 80035d2:	e015      	b.n	8003600 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fe17 	bl	800320c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fe5e 	bl	80032a4 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fe21 	bl	8003234 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fe68 	bl	80032cc <LL_EXTI_DisableEvent_32_63>
 80035fc:	e000      	b.n	8003600 <LL_EXTI_Init+0x1dc>
      }
 80035fe:	bf00      	nop
#endif
  }
  return status;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <LL_GPIO_SetPinMode>:
{
 800360a:	b480      	push	{r7}
 800360c:	b089      	sub	sp, #36	; 0x24
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	613b      	str	r3, [r7, #16]
  return result;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2103      	movs	r1, #3
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	401a      	ands	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	61bb      	str	r3, [r7, #24]
  return result;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]
}
 800365c:	bf00      	nop
 800365e:	3724      	adds	r7, #36	; 0x24
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_GPIO_SetPinOutputType>:
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	43db      	mvns	r3, r3
 800367c:	401a      	ands	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	431a      	orrs	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_GPIO_SetPinSpeed>:
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	613b      	str	r3, [r7, #16]
  return result;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2103      	movs	r1, #3
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	61bb      	str	r3, [r7, #24]
  return result;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	609a      	str	r2, [r3, #8]
}
 80036ea:	bf00      	nop
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_GPIO_SetPinPull>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b089      	sub	sp, #36	; 0x24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	613b      	str	r3, [r7, #16]
  return result;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2103      	movs	r1, #3
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	401a      	ands	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	61bb      	str	r3, [r7, #24]
  return result;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	431a      	orrs	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	60da      	str	r2, [r3, #12]
}
 8003748:	bf00      	nop
 800374a:	3724      	adds	r7, #36	; 0x24
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_GPIO_SetAFPin_0_7>:
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	613b      	str	r3, [r7, #16]
  return result;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	210f      	movs	r1, #15
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	401a      	ands	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	61bb      	str	r3, [r7, #24]
  return result;
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_GPIO_SetAFPin_8_15>:
{
 80037b2:	b480      	push	{r7}
 80037b4:	b089      	sub	sp, #36	; 0x24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	613b      	str	r3, [r7, #16]
  return result;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	210f      	movs	r1, #15
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	401a      	ands	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	61bb      	str	r3, [r7, #24]
  return result;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003808:	bf00      	nop
 800380a:	3724      	adds	r7, #36	; 0x24
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	613b      	str	r3, [r7, #16]
  return result;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003836:	e051      	b.n	80038dc <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2101      	movs	r1, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d043      	beq.n	80038d6 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d003      	beq.n	800385e <LL_GPIO_Init+0x4a>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d10e      	bne.n	800387c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	461a      	mov	r2, r3
 8003864:	69b9      	ldr	r1, [r7, #24]
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff16 	bl	8003698 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	461a      	mov	r2, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff fef6 	bl	8003668 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	461a      	mov	r2, r3
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff36 	bl	80036f6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11a      	bne.n	80038c8 <LL_GPIO_Init+0xb4>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	60bb      	str	r3, [r7, #8]
  return result;
 800389e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b07      	cmp	r3, #7
 80038a8:	d807      	bhi.n	80038ba <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	461a      	mov	r2, r3
 80038b0:	69b9      	ldr	r1, [r7, #24]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff4e 	bl	8003754 <LL_GPIO_SetAFPin_0_7>
 80038b8:	e006      	b.n	80038c8 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	461a      	mov	r2, r3
 80038c0:	69b9      	ldr	r1, [r7, #24]
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ff75 	bl	80037b2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	461a      	mov	r2, r3
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fe9a 	bl	800360a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3301      	adds	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1a6      	bne.n	8003838 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <LL_I2C_Enable>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	601a      	str	r2, [r3, #0]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_I2C_Disable>:
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 0201 	bic.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_I2C_ConfigFilters>:
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0219      	lsls	r1, r3, #8
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	430b      	orrs	r3, r1
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_I2C_SetOwnAddress1>:
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003976:	f023 0307 	bic.w	r3, r3, #7
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	430a      	orrs	r2, r1
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	609a      	str	r2, [r3, #8]
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_I2C_EnableOwnAddress1>:
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_I2C_DisableOwnAddress1>:
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_I2C_SetTiming>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	611a      	str	r2, [r3, #16]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_I2C_SetMode>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	601a      	str	r2, [r3, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_I2C_AcknowledgeNextData>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	605a      	str	r2, [r3, #4]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff65 	bl	8003914 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6899      	ldr	r1, [r3, #8]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	461a      	mov	r2, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff6d 	bl	8003934 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ffb6 	bl	80039d2 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ff44 	bl	80038f4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ffa0 	bl	80039b2 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6919      	ldr	r1, [r3, #16]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff70 	bl	8003962 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ff81 	bl	8003992 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffa9 	bl	80039ee <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ffb6 	bl	8003a14 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <LL_TIM_SetPrescaler>:
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_TIM_SetAutoReload>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_TIM_SetRepetitionCounter>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_TIM_OC_SetCompareCH1>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_TIM_OC_SetCompareCH2>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_TIM_OC_SetCompareCH3>:
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_TIM_OC_SetCompareCH4>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_TIM_OC_SetCompareCH5>:
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_TIM_OC_SetCompareCH6>:
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	615a      	str	r2, [r3, #20]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <LL_TIM_Init+0xd0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <LL_TIM_Init+0x28>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d003      	beq.n	8003bfc <LL_TIM_Init+0x28>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <LL_TIM_Init+0xd4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d106      	bne.n	8003c0a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a25      	ldr	r2, [pc, #148]	; (8003ca4 <LL_TIM_Init+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <LL_TIM_Init+0x66>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d00f      	beq.n	8003c3a <LL_TIM_Init+0x66>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <LL_TIM_Init+0xd4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <LL_TIM_Init+0x66>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a21      	ldr	r2, [pc, #132]	; (8003cac <LL_TIM_Init+0xd8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <LL_TIM_Init+0x66>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a20      	ldr	r2, [pc, #128]	; (8003cb0 <LL_TIM_Init+0xdc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d003      	beq.n	8003c3a <LL_TIM_Init+0x66>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <LL_TIM_Init+0xe0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d106      	bne.n	8003c48 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff3a 	bl	8003ace <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff26 	bl	8003ab2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <LL_TIM_Init+0xd0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <LL_TIM_Init+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <LL_TIM_Init+0xd8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <LL_TIM_Init+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <LL_TIM_Init+0xdc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <LL_TIM_Init+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <LL_TIM_Init+0xe0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d105      	bne.n	8003c92 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff2c 	bl	8003aea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff8d 	bl	8003bb2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cce:	d045      	beq.n	8003d5c <LL_TIM_OC_Init+0xa4>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd6:	d848      	bhi.n	8003d6a <LL_TIM_OC_Init+0xb2>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d036      	beq.n	8003d4e <LL_TIM_OC_Init+0x96>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce6:	d840      	bhi.n	8003d6a <LL_TIM_OC_Init+0xb2>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	d027      	beq.n	8003d40 <LL_TIM_OC_Init+0x88>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d838      	bhi.n	8003d6a <LL_TIM_OC_Init+0xb2>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfe:	d018      	beq.n	8003d32 <LL_TIM_OC_Init+0x7a>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d830      	bhi.n	8003d6a <LL_TIM_OC_Init+0xb2>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <LL_TIM_OC_Init+0x5e>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d007      	beq.n	8003d24 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8003d14:	e029      	b.n	8003d6a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f82d 	bl	8003d78 <OC1Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	75fb      	strb	r3, [r7, #23]
      break;
 8003d22:	e023      	b.n	8003d6c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f8a0 	bl	8003e6c <OC2Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d30:	e01c      	b.n	8003d6c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f917 	bl	8003f68 <OC3Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3e:	e015      	b.n	8003d6c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f98e 	bl	8004064 <OC4Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	e00e      	b.n	8003d6c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f9ed 	bl	8004130 <OC5Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	e007      	b.n	8003d6c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa44 	bl	80041ec <OC6Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	e000      	b.n	8003d6c <LL_TIM_OC_Init+0xb4>
      break;
 8003d6a:	bf00      	nop
  }

  return result;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 0202 	bic.w	r2, r3, #2
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0201 	bic.w	r2, r3, #1
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <OC1Config+0xe4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <OC1Config+0x7e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <OC1Config+0xe8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <OC1Config+0x7e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1e      	ldr	r2, [pc, #120]	; (8003e64 <OC1Config+0xec>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <OC1Config+0x7e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <OC1Config+0xf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d11e      	bne.n	8003e34 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 0208 	bic.w	r2, r3, #8
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f023 0204 	bic.w	r2, r3, #4
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fe5d 	bl	8003b06 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f023 0210 	bic.w	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	0212      	lsls	r2, r2, #8
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0220 	bic.w	r2, r3, #32
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0210 	bic.w	r2, r3, #16
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a21      	ldr	r2, [pc, #132]	; (8003f58 <OC2Config+0xec>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <OC2Config+0x84>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <OC2Config+0xf0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <OC2Config+0x84>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <OC2Config+0xf4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <OC2Config+0x84>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <OC2Config+0xf8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d11f      	bne.n	8003f30 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	019b      	lsls	r3, r3, #6
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	019b      	lsls	r3, r3, #6
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fded 	bl	8003b22 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800

08003f68 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a21      	ldr	r2, [pc, #132]	; (8004054 <OC3Config+0xec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00b      	beq.n	8003fea <OC3Config+0x82>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <OC3Config+0xf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <OC3Config+0x82>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <OC3Config+0xf4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <OC3Config+0x82>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <OC3Config+0xf8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d11f      	bne.n	800402a <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	029b      	lsls	r3, r3, #10
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	015b      	lsls	r3, r3, #5
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fd7e 	bl	8003b3e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800

08004064 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	0212      	lsls	r2, r2, #8
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	031b      	lsls	r3, r3, #12
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	031b      	lsls	r3, r3, #12
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <OC4Config+0xbc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <OC4Config+0x84>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a14      	ldr	r2, [pc, #80]	; (8004124 <OC4Config+0xc0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <OC4Config+0x84>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a13      	ldr	r2, [pc, #76]	; (8004128 <OC4Config+0xc4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <OC4Config+0x84>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <OC4Config+0xc8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d107      	bne.n	80040f8 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	019b      	lsls	r3, r3, #6
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fd25 	bl	8003b5a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004150:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a15      	ldr	r2, [pc, #84]	; (80041dc <OC5Config+0xac>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <OC5Config+0x74>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <OC5Config+0xb0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <OC5Config+0x74>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <OC5Config+0xb4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <OC5Config+0x74>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <OC5Config+0xb8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d109      	bne.n	80041b8 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fcd6 	bl	8003b76 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800

080041ec <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	0212      	lsls	r2, r2, #8
 800421e:	4313      	orrs	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	051b      	lsls	r3, r3, #20
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	051b      	lsls	r3, r3, #20
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a14      	ldr	r2, [pc, #80]	; (8004298 <OC6Config+0xac>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00b      	beq.n	8004262 <OC6Config+0x76>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <OC6Config+0xb0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <OC6Config+0x76>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <OC6Config+0xb4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <OC6Config+0x76>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <OC6Config+0xb8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d109      	bne.n	8004276 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	029b      	lsls	r3, r3, #10
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fc87 	bl	8003b96 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800

080042a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <LL_InitTick+0x30>)
 80042bc:	3b01      	subs	r3, #1
 80042be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <LL_InitTick+0x30>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <LL_InitTick+0x30>)
 80042c8:	2205      	movs	r2, #5
 80042ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e010 	.word	0xe000e010

080042dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80042e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ffdd 	bl	80042a8 <LL_InitTick>
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <LL_mDelay+0x48>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004306:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d00c      	beq.n	800432a <LL_mDelay+0x32>
  {
    Delay++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3301      	adds	r3, #1
 8004314:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004316:	e008      	b.n	800432a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <LL_mDelay+0x48>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <LL_mDelay+0x32>
    {
      Delay--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	607b      	str	r3, [r7, #4]
  while (Delay)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f3      	bne.n	8004318 <LL_mDelay+0x20>
    }
  }
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010

08004344 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <LL_SetSystemCoreClock+0x1c>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000004 	.word	0x20000004

08004364 <__errno>:
 8004364:	4b01      	ldr	r3, [pc, #4]	; (800436c <__errno+0x8>)
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	2000000c 	.word	0x2000000c

08004370 <__libc_init_array>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	4d0d      	ldr	r5, [pc, #52]	; (80043a8 <__libc_init_array+0x38>)
 8004374:	4c0d      	ldr	r4, [pc, #52]	; (80043ac <__libc_init_array+0x3c>)
 8004376:	1b64      	subs	r4, r4, r5
 8004378:	10a4      	asrs	r4, r4, #2
 800437a:	2600      	movs	r6, #0
 800437c:	42a6      	cmp	r6, r4
 800437e:	d109      	bne.n	8004394 <__libc_init_array+0x24>
 8004380:	4d0b      	ldr	r5, [pc, #44]	; (80043b0 <__libc_init_array+0x40>)
 8004382:	4c0c      	ldr	r4, [pc, #48]	; (80043b4 <__libc_init_array+0x44>)
 8004384:	f003 fe6a 	bl	800805c <_init>
 8004388:	1b64      	subs	r4, r4, r5
 800438a:	10a4      	asrs	r4, r4, #2
 800438c:	2600      	movs	r6, #0
 800438e:	42a6      	cmp	r6, r4
 8004390:	d105      	bne.n	800439e <__libc_init_array+0x2e>
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	f855 3b04 	ldr.w	r3, [r5], #4
 8004398:	4798      	blx	r3
 800439a:	3601      	adds	r6, #1
 800439c:	e7ee      	b.n	800437c <__libc_init_array+0xc>
 800439e:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a2:	4798      	blx	r3
 80043a4:	3601      	adds	r6, #1
 80043a6:	e7f2      	b.n	800438e <__libc_init_array+0x1e>
 80043a8:	08008530 	.word	0x08008530
 80043ac:	08008530 	.word	0x08008530
 80043b0:	08008530 	.word	0x08008530
 80043b4:	08008534 	.word	0x08008534

080043b8 <memset>:
 80043b8:	4402      	add	r2, r0
 80043ba:	4603      	mov	r3, r0
 80043bc:	4293      	cmp	r3, r2
 80043be:	d100      	bne.n	80043c2 <memset+0xa>
 80043c0:	4770      	bx	lr
 80043c2:	f803 1b01 	strb.w	r1, [r3], #1
 80043c6:	e7f9      	b.n	80043bc <memset+0x4>

080043c8 <__cvt>:
 80043c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043cc:	ec55 4b10 	vmov	r4, r5, d0
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	460e      	mov	r6, r1
 80043d4:	4619      	mov	r1, r3
 80043d6:	462b      	mov	r3, r5
 80043d8:	bfbb      	ittet	lt
 80043da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80043de:	461d      	movlt	r5, r3
 80043e0:	2300      	movge	r3, #0
 80043e2:	232d      	movlt	r3, #45	; 0x2d
 80043e4:	700b      	strb	r3, [r1, #0]
 80043e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80043ec:	4691      	mov	r9, r2
 80043ee:	f023 0820 	bic.w	r8, r3, #32
 80043f2:	bfbc      	itt	lt
 80043f4:	4622      	movlt	r2, r4
 80043f6:	4614      	movlt	r4, r2
 80043f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043fc:	d005      	beq.n	800440a <__cvt+0x42>
 80043fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004402:	d100      	bne.n	8004406 <__cvt+0x3e>
 8004404:	3601      	adds	r6, #1
 8004406:	2102      	movs	r1, #2
 8004408:	e000      	b.n	800440c <__cvt+0x44>
 800440a:	2103      	movs	r1, #3
 800440c:	ab03      	add	r3, sp, #12
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	ab02      	add	r3, sp, #8
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	ec45 4b10 	vmov	d0, r4, r5
 8004418:	4653      	mov	r3, sl
 800441a:	4632      	mov	r2, r6
 800441c:	f000 fcec 	bl	8004df8 <_dtoa_r>
 8004420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004424:	4607      	mov	r7, r0
 8004426:	d102      	bne.n	800442e <__cvt+0x66>
 8004428:	f019 0f01 	tst.w	r9, #1
 800442c:	d022      	beq.n	8004474 <__cvt+0xac>
 800442e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004432:	eb07 0906 	add.w	r9, r7, r6
 8004436:	d110      	bne.n	800445a <__cvt+0x92>
 8004438:	783b      	ldrb	r3, [r7, #0]
 800443a:	2b30      	cmp	r3, #48	; 0x30
 800443c:	d10a      	bne.n	8004454 <__cvt+0x8c>
 800443e:	2200      	movs	r2, #0
 8004440:	2300      	movs	r3, #0
 8004442:	4620      	mov	r0, r4
 8004444:	4629      	mov	r1, r5
 8004446:	f7fc fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800444a:	b918      	cbnz	r0, 8004454 <__cvt+0x8c>
 800444c:	f1c6 0601 	rsb	r6, r6, #1
 8004450:	f8ca 6000 	str.w	r6, [sl]
 8004454:	f8da 3000 	ldr.w	r3, [sl]
 8004458:	4499      	add	r9, r3
 800445a:	2200      	movs	r2, #0
 800445c:	2300      	movs	r3, #0
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f7fc fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8004466:	b108      	cbz	r0, 800446c <__cvt+0xa4>
 8004468:	f8cd 900c 	str.w	r9, [sp, #12]
 800446c:	2230      	movs	r2, #48	; 0x30
 800446e:	9b03      	ldr	r3, [sp, #12]
 8004470:	454b      	cmp	r3, r9
 8004472:	d307      	bcc.n	8004484 <__cvt+0xbc>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004478:	1bdb      	subs	r3, r3, r7
 800447a:	4638      	mov	r0, r7
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	b004      	add	sp, #16
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	9103      	str	r1, [sp, #12]
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e7f0      	b.n	800446e <__cvt+0xa6>

0800448c <__exponent>:
 800448c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448e:	4603      	mov	r3, r0
 8004490:	2900      	cmp	r1, #0
 8004492:	bfb8      	it	lt
 8004494:	4249      	neglt	r1, r1
 8004496:	f803 2b02 	strb.w	r2, [r3], #2
 800449a:	bfb4      	ite	lt
 800449c:	222d      	movlt	r2, #45	; 0x2d
 800449e:	222b      	movge	r2, #43	; 0x2b
 80044a0:	2909      	cmp	r1, #9
 80044a2:	7042      	strb	r2, [r0, #1]
 80044a4:	dd2a      	ble.n	80044fc <__exponent+0x70>
 80044a6:	f10d 0407 	add.w	r4, sp, #7
 80044aa:	46a4      	mov	ip, r4
 80044ac:	270a      	movs	r7, #10
 80044ae:	46a6      	mov	lr, r4
 80044b0:	460a      	mov	r2, r1
 80044b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80044b6:	fb07 1516 	mls	r5, r7, r6, r1
 80044ba:	3530      	adds	r5, #48	; 0x30
 80044bc:	2a63      	cmp	r2, #99	; 0x63
 80044be:	f104 34ff 	add.w	r4, r4, #4294967295
 80044c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044c6:	4631      	mov	r1, r6
 80044c8:	dcf1      	bgt.n	80044ae <__exponent+0x22>
 80044ca:	3130      	adds	r1, #48	; 0x30
 80044cc:	f1ae 0502 	sub.w	r5, lr, #2
 80044d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044d4:	1c44      	adds	r4, r0, #1
 80044d6:	4629      	mov	r1, r5
 80044d8:	4561      	cmp	r1, ip
 80044da:	d30a      	bcc.n	80044f2 <__exponent+0x66>
 80044dc:	f10d 0209 	add.w	r2, sp, #9
 80044e0:	eba2 020e 	sub.w	r2, r2, lr
 80044e4:	4565      	cmp	r5, ip
 80044e6:	bf88      	it	hi
 80044e8:	2200      	movhi	r2, #0
 80044ea:	4413      	add	r3, r2
 80044ec:	1a18      	subs	r0, r3, r0
 80044ee:	b003      	add	sp, #12
 80044f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80044fa:	e7ed      	b.n	80044d8 <__exponent+0x4c>
 80044fc:	2330      	movs	r3, #48	; 0x30
 80044fe:	3130      	adds	r1, #48	; 0x30
 8004500:	7083      	strb	r3, [r0, #2]
 8004502:	70c1      	strb	r1, [r0, #3]
 8004504:	1d03      	adds	r3, r0, #4
 8004506:	e7f1      	b.n	80044ec <__exponent+0x60>

08004508 <_printf_float>:
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	ed2d 8b02 	vpush	{d8}
 8004510:	b08d      	sub	sp, #52	; 0x34
 8004512:	460c      	mov	r4, r1
 8004514:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004518:	4616      	mov	r6, r2
 800451a:	461f      	mov	r7, r3
 800451c:	4605      	mov	r5, r0
 800451e:	f001 fa57 	bl	80059d0 <_localeconv_r>
 8004522:	f8d0 a000 	ldr.w	sl, [r0]
 8004526:	4650      	mov	r0, sl
 8004528:	f7fb fe52 	bl	80001d0 <strlen>
 800452c:	2300      	movs	r3, #0
 800452e:	930a      	str	r3, [sp, #40]	; 0x28
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	9305      	str	r3, [sp, #20]
 8004534:	f8d8 3000 	ldr.w	r3, [r8]
 8004538:	f894 b018 	ldrb.w	fp, [r4, #24]
 800453c:	3307      	adds	r3, #7
 800453e:	f023 0307 	bic.w	r3, r3, #7
 8004542:	f103 0208 	add.w	r2, r3, #8
 8004546:	f8c8 2000 	str.w	r2, [r8]
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004552:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800455a:	9307      	str	r3, [sp, #28]
 800455c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004560:	ee08 0a10 	vmov	s16, r0
 8004564:	4b9f      	ldr	r3, [pc, #636]	; (80047e4 <_printf_float+0x2dc>)
 8004566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800456a:	f04f 32ff 	mov.w	r2, #4294967295
 800456e:	f7fc fadd 	bl	8000b2c <__aeabi_dcmpun>
 8004572:	bb88      	cbnz	r0, 80045d8 <_printf_float+0xd0>
 8004574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004578:	4b9a      	ldr	r3, [pc, #616]	; (80047e4 <_printf_float+0x2dc>)
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	f7fc fab7 	bl	8000af0 <__aeabi_dcmple>
 8004582:	bb48      	cbnz	r0, 80045d8 <_printf_float+0xd0>
 8004584:	2200      	movs	r2, #0
 8004586:	2300      	movs	r3, #0
 8004588:	4640      	mov	r0, r8
 800458a:	4649      	mov	r1, r9
 800458c:	f7fc faa6 	bl	8000adc <__aeabi_dcmplt>
 8004590:	b110      	cbz	r0, 8004598 <_printf_float+0x90>
 8004592:	232d      	movs	r3, #45	; 0x2d
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004598:	4b93      	ldr	r3, [pc, #588]	; (80047e8 <_printf_float+0x2e0>)
 800459a:	4894      	ldr	r0, [pc, #592]	; (80047ec <_printf_float+0x2e4>)
 800459c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80045a0:	bf94      	ite	ls
 80045a2:	4698      	movls	r8, r3
 80045a4:	4680      	movhi	r8, r0
 80045a6:	2303      	movs	r3, #3
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	9b05      	ldr	r3, [sp, #20]
 80045ac:	f023 0204 	bic.w	r2, r3, #4
 80045b0:	6022      	str	r2, [r4, #0]
 80045b2:	f04f 0900 	mov.w	r9, #0
 80045b6:	9700      	str	r7, [sp, #0]
 80045b8:	4633      	mov	r3, r6
 80045ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80045bc:	4621      	mov	r1, r4
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f9d8 	bl	8004974 <_printf_common>
 80045c4:	3001      	adds	r0, #1
 80045c6:	f040 8090 	bne.w	80046ea <_printf_float+0x1e2>
 80045ca:	f04f 30ff 	mov.w	r0, #4294967295
 80045ce:	b00d      	add	sp, #52	; 0x34
 80045d0:	ecbd 8b02 	vpop	{d8}
 80045d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	4640      	mov	r0, r8
 80045de:	4649      	mov	r1, r9
 80045e0:	f7fc faa4 	bl	8000b2c <__aeabi_dcmpun>
 80045e4:	b140      	cbz	r0, 80045f8 <_printf_float+0xf0>
 80045e6:	464b      	mov	r3, r9
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfbc      	itt	lt
 80045ec:	232d      	movlt	r3, #45	; 0x2d
 80045ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045f2:	487f      	ldr	r0, [pc, #508]	; (80047f0 <_printf_float+0x2e8>)
 80045f4:	4b7f      	ldr	r3, [pc, #508]	; (80047f4 <_printf_float+0x2ec>)
 80045f6:	e7d1      	b.n	800459c <_printf_float+0x94>
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80045fe:	9206      	str	r2, [sp, #24]
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	d13f      	bne.n	8004684 <_printf_float+0x17c>
 8004604:	2306      	movs	r3, #6
 8004606:	6063      	str	r3, [r4, #4]
 8004608:	9b05      	ldr	r3, [sp, #20]
 800460a:	6861      	ldr	r1, [r4, #4]
 800460c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004610:	2300      	movs	r3, #0
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	ab0a      	add	r3, sp, #40	; 0x28
 8004616:	e9cd b301 	strd	fp, r3, [sp, #4]
 800461a:	ab09      	add	r3, sp, #36	; 0x24
 800461c:	ec49 8b10 	vmov	d0, r8, r9
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	6022      	str	r2, [r4, #0]
 8004624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff fecd 	bl	80043c8 <__cvt>
 800462e:	9b06      	ldr	r3, [sp, #24]
 8004630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004632:	2b47      	cmp	r3, #71	; 0x47
 8004634:	4680      	mov	r8, r0
 8004636:	d108      	bne.n	800464a <_printf_float+0x142>
 8004638:	1cc8      	adds	r0, r1, #3
 800463a:	db02      	blt.n	8004642 <_printf_float+0x13a>
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	4299      	cmp	r1, r3
 8004640:	dd41      	ble.n	80046c6 <_printf_float+0x1be>
 8004642:	f1ab 0b02 	sub.w	fp, fp, #2
 8004646:	fa5f fb8b 	uxtb.w	fp, fp
 800464a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800464e:	d820      	bhi.n	8004692 <_printf_float+0x18a>
 8004650:	3901      	subs	r1, #1
 8004652:	465a      	mov	r2, fp
 8004654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004658:	9109      	str	r1, [sp, #36]	; 0x24
 800465a:	f7ff ff17 	bl	800448c <__exponent>
 800465e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004660:	1813      	adds	r3, r2, r0
 8004662:	2a01      	cmp	r2, #1
 8004664:	4681      	mov	r9, r0
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	dc02      	bgt.n	8004670 <_printf_float+0x168>
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	07d2      	lsls	r2, r2, #31
 800466e:	d501      	bpl.n	8004674 <_printf_float+0x16c>
 8004670:	3301      	adds	r3, #1
 8004672:	6123      	str	r3, [r4, #16]
 8004674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004678:	2b00      	cmp	r3, #0
 800467a:	d09c      	beq.n	80045b6 <_printf_float+0xae>
 800467c:	232d      	movs	r3, #45	; 0x2d
 800467e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004682:	e798      	b.n	80045b6 <_printf_float+0xae>
 8004684:	9a06      	ldr	r2, [sp, #24]
 8004686:	2a47      	cmp	r2, #71	; 0x47
 8004688:	d1be      	bne.n	8004608 <_printf_float+0x100>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1bc      	bne.n	8004608 <_printf_float+0x100>
 800468e:	2301      	movs	r3, #1
 8004690:	e7b9      	b.n	8004606 <_printf_float+0xfe>
 8004692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004696:	d118      	bne.n	80046ca <_printf_float+0x1c2>
 8004698:	2900      	cmp	r1, #0
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	dd0b      	ble.n	80046b6 <_printf_float+0x1ae>
 800469e:	6121      	str	r1, [r4, #16]
 80046a0:	b913      	cbnz	r3, 80046a8 <_printf_float+0x1a0>
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	07d0      	lsls	r0, r2, #31
 80046a6:	d502      	bpl.n	80046ae <_printf_float+0x1a6>
 80046a8:	3301      	adds	r3, #1
 80046aa:	440b      	add	r3, r1
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80046b0:	f04f 0900 	mov.w	r9, #0
 80046b4:	e7de      	b.n	8004674 <_printf_float+0x16c>
 80046b6:	b913      	cbnz	r3, 80046be <_printf_float+0x1b6>
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	07d2      	lsls	r2, r2, #31
 80046bc:	d501      	bpl.n	80046c2 <_printf_float+0x1ba>
 80046be:	3302      	adds	r3, #2
 80046c0:	e7f4      	b.n	80046ac <_printf_float+0x1a4>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e7f2      	b.n	80046ac <_printf_float+0x1a4>
 80046c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80046ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046cc:	4299      	cmp	r1, r3
 80046ce:	db05      	blt.n	80046dc <_printf_float+0x1d4>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	6121      	str	r1, [r4, #16]
 80046d4:	07d8      	lsls	r0, r3, #31
 80046d6:	d5ea      	bpl.n	80046ae <_printf_float+0x1a6>
 80046d8:	1c4b      	adds	r3, r1, #1
 80046da:	e7e7      	b.n	80046ac <_printf_float+0x1a4>
 80046dc:	2900      	cmp	r1, #0
 80046de:	bfd4      	ite	le
 80046e0:	f1c1 0202 	rsble	r2, r1, #2
 80046e4:	2201      	movgt	r2, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	e7e0      	b.n	80046ac <_printf_float+0x1a4>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	055a      	lsls	r2, r3, #21
 80046ee:	d407      	bmi.n	8004700 <_printf_float+0x1f8>
 80046f0:	6923      	ldr	r3, [r4, #16]
 80046f2:	4642      	mov	r2, r8
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	d12c      	bne.n	8004758 <_printf_float+0x250>
 80046fe:	e764      	b.n	80045ca <_printf_float+0xc2>
 8004700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004704:	f240 80e0 	bls.w	80048c8 <_printf_float+0x3c0>
 8004708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800470c:	2200      	movs	r2, #0
 800470e:	2300      	movs	r3, #0
 8004710:	f7fc f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 8004714:	2800      	cmp	r0, #0
 8004716:	d034      	beq.n	8004782 <_printf_float+0x27a>
 8004718:	4a37      	ldr	r2, [pc, #220]	; (80047f8 <_printf_float+0x2f0>)
 800471a:	2301      	movs	r3, #1
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f af51 	beq.w	80045ca <_printf_float+0xc2>
 8004728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800472c:	429a      	cmp	r2, r3
 800472e:	db02      	blt.n	8004736 <_printf_float+0x22e>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	07d8      	lsls	r0, r3, #31
 8004734:	d510      	bpl.n	8004758 <_printf_float+0x250>
 8004736:	ee18 3a10 	vmov	r3, s16
 800473a:	4652      	mov	r2, sl
 800473c:	4631      	mov	r1, r6
 800473e:	4628      	mov	r0, r5
 8004740:	47b8      	blx	r7
 8004742:	3001      	adds	r0, #1
 8004744:	f43f af41 	beq.w	80045ca <_printf_float+0xc2>
 8004748:	f04f 0800 	mov.w	r8, #0
 800474c:	f104 091a 	add.w	r9, r4, #26
 8004750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	4543      	cmp	r3, r8
 8004756:	dc09      	bgt.n	800476c <_printf_float+0x264>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	079b      	lsls	r3, r3, #30
 800475c:	f100 8105 	bmi.w	800496a <_printf_float+0x462>
 8004760:	68e0      	ldr	r0, [r4, #12]
 8004762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004764:	4298      	cmp	r0, r3
 8004766:	bfb8      	it	lt
 8004768:	4618      	movlt	r0, r3
 800476a:	e730      	b.n	80045ce <_printf_float+0xc6>
 800476c:	2301      	movs	r3, #1
 800476e:	464a      	mov	r2, r9
 8004770:	4631      	mov	r1, r6
 8004772:	4628      	mov	r0, r5
 8004774:	47b8      	blx	r7
 8004776:	3001      	adds	r0, #1
 8004778:	f43f af27 	beq.w	80045ca <_printf_float+0xc2>
 800477c:	f108 0801 	add.w	r8, r8, #1
 8004780:	e7e6      	b.n	8004750 <_printf_float+0x248>
 8004782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	dc39      	bgt.n	80047fc <_printf_float+0x2f4>
 8004788:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <_printf_float+0x2f0>)
 800478a:	2301      	movs	r3, #1
 800478c:	4631      	mov	r1, r6
 800478e:	4628      	mov	r0, r5
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	f43f af19 	beq.w	80045ca <_printf_float+0xc2>
 8004798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800479c:	4313      	orrs	r3, r2
 800479e:	d102      	bne.n	80047a6 <_printf_float+0x29e>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	07d9      	lsls	r1, r3, #31
 80047a4:	d5d8      	bpl.n	8004758 <_printf_float+0x250>
 80047a6:	ee18 3a10 	vmov	r3, s16
 80047aa:	4652      	mov	r2, sl
 80047ac:	4631      	mov	r1, r6
 80047ae:	4628      	mov	r0, r5
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	f43f af09 	beq.w	80045ca <_printf_float+0xc2>
 80047b8:	f04f 0900 	mov.w	r9, #0
 80047bc:	f104 0a1a 	add.w	sl, r4, #26
 80047c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c2:	425b      	negs	r3, r3
 80047c4:	454b      	cmp	r3, r9
 80047c6:	dc01      	bgt.n	80047cc <_printf_float+0x2c4>
 80047c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ca:	e792      	b.n	80046f2 <_printf_float+0x1ea>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4652      	mov	r2, sl
 80047d0:	4631      	mov	r1, r6
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	f43f aef7 	beq.w	80045ca <_printf_float+0xc2>
 80047dc:	f109 0901 	add.w	r9, r9, #1
 80047e0:	e7ee      	b.n	80047c0 <_printf_float+0x2b8>
 80047e2:	bf00      	nop
 80047e4:	7fefffff 	.word	0x7fefffff
 80047e8:	08008110 	.word	0x08008110
 80047ec:	08008114 	.word	0x08008114
 80047f0:	0800811c 	.word	0x0800811c
 80047f4:	08008118 	.word	0x08008118
 80047f8:	08008120 	.word	0x08008120
 80047fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004800:	429a      	cmp	r2, r3
 8004802:	bfa8      	it	ge
 8004804:	461a      	movge	r2, r3
 8004806:	2a00      	cmp	r2, #0
 8004808:	4691      	mov	r9, r2
 800480a:	dc37      	bgt.n	800487c <_printf_float+0x374>
 800480c:	f04f 0b00 	mov.w	fp, #0
 8004810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004814:	f104 021a 	add.w	r2, r4, #26
 8004818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	eba3 0309 	sub.w	r3, r3, r9
 8004820:	455b      	cmp	r3, fp
 8004822:	dc33      	bgt.n	800488c <_printf_float+0x384>
 8004824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004828:	429a      	cmp	r2, r3
 800482a:	db3b      	blt.n	80048a4 <_printf_float+0x39c>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	07da      	lsls	r2, r3, #31
 8004830:	d438      	bmi.n	80048a4 <_printf_float+0x39c>
 8004832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004834:	9b05      	ldr	r3, [sp, #20]
 8004836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	eba2 0901 	sub.w	r9, r2, r1
 800483e:	4599      	cmp	r9, r3
 8004840:	bfa8      	it	ge
 8004842:	4699      	movge	r9, r3
 8004844:	f1b9 0f00 	cmp.w	r9, #0
 8004848:	dc35      	bgt.n	80048b6 <_printf_float+0x3ae>
 800484a:	f04f 0800 	mov.w	r8, #0
 800484e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004852:	f104 0a1a 	add.w	sl, r4, #26
 8004856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	eba3 0309 	sub.w	r3, r3, r9
 8004860:	4543      	cmp	r3, r8
 8004862:	f77f af79 	ble.w	8004758 <_printf_float+0x250>
 8004866:	2301      	movs	r3, #1
 8004868:	4652      	mov	r2, sl
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f aeaa 	beq.w	80045ca <_printf_float+0xc2>
 8004876:	f108 0801 	add.w	r8, r8, #1
 800487a:	e7ec      	b.n	8004856 <_printf_float+0x34e>
 800487c:	4613      	mov	r3, r2
 800487e:	4631      	mov	r1, r6
 8004880:	4642      	mov	r2, r8
 8004882:	4628      	mov	r0, r5
 8004884:	47b8      	blx	r7
 8004886:	3001      	adds	r0, #1
 8004888:	d1c0      	bne.n	800480c <_printf_float+0x304>
 800488a:	e69e      	b.n	80045ca <_printf_float+0xc2>
 800488c:	2301      	movs	r3, #1
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	9205      	str	r2, [sp, #20]
 8004894:	47b8      	blx	r7
 8004896:	3001      	adds	r0, #1
 8004898:	f43f ae97 	beq.w	80045ca <_printf_float+0xc2>
 800489c:	9a05      	ldr	r2, [sp, #20]
 800489e:	f10b 0b01 	add.w	fp, fp, #1
 80048a2:	e7b9      	b.n	8004818 <_printf_float+0x310>
 80048a4:	ee18 3a10 	vmov	r3, s16
 80048a8:	4652      	mov	r2, sl
 80048aa:	4631      	mov	r1, r6
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	d1be      	bne.n	8004832 <_printf_float+0x32a>
 80048b4:	e689      	b.n	80045ca <_printf_float+0xc2>
 80048b6:	9a05      	ldr	r2, [sp, #20]
 80048b8:	464b      	mov	r3, r9
 80048ba:	4442      	add	r2, r8
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	d1c1      	bne.n	800484a <_printf_float+0x342>
 80048c6:	e680      	b.n	80045ca <_printf_float+0xc2>
 80048c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ca:	2a01      	cmp	r2, #1
 80048cc:	dc01      	bgt.n	80048d2 <_printf_float+0x3ca>
 80048ce:	07db      	lsls	r3, r3, #31
 80048d0:	d538      	bpl.n	8004944 <_printf_float+0x43c>
 80048d2:	2301      	movs	r3, #1
 80048d4:	4642      	mov	r2, r8
 80048d6:	4631      	mov	r1, r6
 80048d8:	4628      	mov	r0, r5
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	f43f ae74 	beq.w	80045ca <_printf_float+0xc2>
 80048e2:	ee18 3a10 	vmov	r3, s16
 80048e6:	4652      	mov	r2, sl
 80048e8:	4631      	mov	r1, r6
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b8      	blx	r7
 80048ee:	3001      	adds	r0, #1
 80048f0:	f43f ae6b 	beq.w	80045ca <_printf_float+0xc2>
 80048f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048f8:	2200      	movs	r2, #0
 80048fa:	2300      	movs	r3, #0
 80048fc:	f7fc f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004900:	b9d8      	cbnz	r0, 800493a <_printf_float+0x432>
 8004902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004904:	f108 0201 	add.w	r2, r8, #1
 8004908:	3b01      	subs	r3, #1
 800490a:	4631      	mov	r1, r6
 800490c:	4628      	mov	r0, r5
 800490e:	47b8      	blx	r7
 8004910:	3001      	adds	r0, #1
 8004912:	d10e      	bne.n	8004932 <_printf_float+0x42a>
 8004914:	e659      	b.n	80045ca <_printf_float+0xc2>
 8004916:	2301      	movs	r3, #1
 8004918:	4652      	mov	r2, sl
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f ae52 	beq.w	80045ca <_printf_float+0xc2>
 8004926:	f108 0801 	add.w	r8, r8, #1
 800492a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492c:	3b01      	subs	r3, #1
 800492e:	4543      	cmp	r3, r8
 8004930:	dcf1      	bgt.n	8004916 <_printf_float+0x40e>
 8004932:	464b      	mov	r3, r9
 8004934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004938:	e6dc      	b.n	80046f4 <_printf_float+0x1ec>
 800493a:	f04f 0800 	mov.w	r8, #0
 800493e:	f104 0a1a 	add.w	sl, r4, #26
 8004942:	e7f2      	b.n	800492a <_printf_float+0x422>
 8004944:	2301      	movs	r3, #1
 8004946:	4642      	mov	r2, r8
 8004948:	e7df      	b.n	800490a <_printf_float+0x402>
 800494a:	2301      	movs	r3, #1
 800494c:	464a      	mov	r2, r9
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	47b8      	blx	r7
 8004954:	3001      	adds	r0, #1
 8004956:	f43f ae38 	beq.w	80045ca <_printf_float+0xc2>
 800495a:	f108 0801 	add.w	r8, r8, #1
 800495e:	68e3      	ldr	r3, [r4, #12]
 8004960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004962:	1a5b      	subs	r3, r3, r1
 8004964:	4543      	cmp	r3, r8
 8004966:	dcf0      	bgt.n	800494a <_printf_float+0x442>
 8004968:	e6fa      	b.n	8004760 <_printf_float+0x258>
 800496a:	f04f 0800 	mov.w	r8, #0
 800496e:	f104 0919 	add.w	r9, r4, #25
 8004972:	e7f4      	b.n	800495e <_printf_float+0x456>

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4616      	mov	r6, r2
 800497a:	4699      	mov	r9, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004984:	4293      	cmp	r3, r2
 8004986:	bfb8      	it	lt
 8004988:	4613      	movlt	r3, r2
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004990:	4607      	mov	r7, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b10a      	cbz	r2, 800499a <_printf_common+0x26>
 8004996:	3301      	adds	r3, #1
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	6833      	ldrmi	r3, [r6, #0]
 80049a2:	3302      	addmi	r3, #2
 80049a4:	6033      	strmi	r3, [r6, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d106      	bne.n	80049bc <_printf_common+0x48>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	6832      	ldr	r2, [r6, #0]
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	dc26      	bgt.n	8004a0a <_printf_common+0x96>
 80049bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c0:	1e13      	subs	r3, r2, #0
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	bf18      	it	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d42b      	bmi.n	8004a24 <_printf_common+0xb0>
 80049cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d0:	4649      	mov	r1, r9
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c0      	blx	r8
 80049d6:	3001      	adds	r0, #1
 80049d8:	d01e      	beq.n	8004a18 <_printf_common+0xa4>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	68e5      	ldr	r5, [r4, #12]
 80049de:	6832      	ldr	r2, [r6, #0]
 80049e0:	f003 0306 	and.w	r3, r3, #6
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	bf08      	it	eq
 80049e8:	1aad      	subeq	r5, r5, r2
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	6922      	ldr	r2, [r4, #16]
 80049ee:	bf0c      	ite	eq
 80049f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f4:	2500      	movne	r5, #0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bfc4      	itt	gt
 80049fa:	1a9b      	subgt	r3, r3, r2
 80049fc:	18ed      	addgt	r5, r5, r3
 80049fe:	2600      	movs	r6, #0
 8004a00:	341a      	adds	r4, #26
 8004a02:	42b5      	cmp	r5, r6
 8004a04:	d11a      	bne.n	8004a3c <_printf_common+0xc8>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e008      	b.n	8004a1c <_printf_common+0xa8>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4649      	mov	r1, r9
 8004a10:	4638      	mov	r0, r7
 8004a12:	47c0      	blx	r8
 8004a14:	3001      	adds	r0, #1
 8004a16:	d103      	bne.n	8004a20 <_printf_common+0xac>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7c6      	b.n	80049b2 <_printf_common+0x3e>
 8004a24:	18e1      	adds	r1, r4, r3
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	2030      	movs	r0, #48	; 0x30
 8004a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a2e:	4422      	add	r2, r4
 8004a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a38:	3302      	adds	r3, #2
 8004a3a:	e7c7      	b.n	80049cc <_printf_common+0x58>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4649      	mov	r1, r9
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0e6      	beq.n	8004a18 <_printf_common+0xa4>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7d9      	b.n	8004a02 <_printf_common+0x8e>
	...

08004a50 <_printf_i>:
 8004a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	460c      	mov	r4, r1
 8004a56:	4691      	mov	r9, r2
 8004a58:	7e27      	ldrb	r7, [r4, #24]
 8004a5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a5c:	2f78      	cmp	r7, #120	; 0x78
 8004a5e:	4680      	mov	r8, r0
 8004a60:	469a      	mov	sl, r3
 8004a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a66:	d807      	bhi.n	8004a78 <_printf_i+0x28>
 8004a68:	2f62      	cmp	r7, #98	; 0x62
 8004a6a:	d80a      	bhi.n	8004a82 <_printf_i+0x32>
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	f000 80d8 	beq.w	8004c22 <_printf_i+0x1d2>
 8004a72:	2f58      	cmp	r7, #88	; 0x58
 8004a74:	f000 80a3 	beq.w	8004bbe <_printf_i+0x16e>
 8004a78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a80:	e03a      	b.n	8004af8 <_printf_i+0xa8>
 8004a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a86:	2b15      	cmp	r3, #21
 8004a88:	d8f6      	bhi.n	8004a78 <_printf_i+0x28>
 8004a8a:	a001      	add	r0, pc, #4	; (adr r0, 8004a90 <_printf_i+0x40>)
 8004a8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a90:	08004ae9 	.word	0x08004ae9
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004a79 	.word	0x08004a79
 8004a9c:	08004a79 	.word	0x08004a79
 8004aa0:	08004a79 	.word	0x08004a79
 8004aa4:	08004a79 	.word	0x08004a79
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004a79 	.word	0x08004a79
 8004ab0:	08004a79 	.word	0x08004a79
 8004ab4:	08004a79 	.word	0x08004a79
 8004ab8:	08004a79 	.word	0x08004a79
 8004abc:	08004c09 	.word	0x08004c09
 8004ac0:	08004b2d 	.word	0x08004b2d
 8004ac4:	08004beb 	.word	0x08004beb
 8004ac8:	08004a79 	.word	0x08004a79
 8004acc:	08004a79 	.word	0x08004a79
 8004ad0:	08004c2b 	.word	0x08004c2b
 8004ad4:	08004a79 	.word	0x08004a79
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004a79 	.word	0x08004a79
 8004ae0:	08004a79 	.word	0x08004a79
 8004ae4:	08004bf3 	.word	0x08004bf3
 8004ae8:	680b      	ldr	r3, [r1, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	600a      	str	r2, [r1, #0]
 8004af0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0a3      	b.n	8004c44 <_printf_i+0x1f4>
 8004afc:	6825      	ldr	r5, [r4, #0]
 8004afe:	6808      	ldr	r0, [r1, #0]
 8004b00:	062e      	lsls	r6, r5, #24
 8004b02:	f100 0304 	add.w	r3, r0, #4
 8004b06:	d50a      	bpl.n	8004b1e <_printf_i+0xce>
 8004b08:	6805      	ldr	r5, [r0, #0]
 8004b0a:	600b      	str	r3, [r1, #0]
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	da03      	bge.n	8004b18 <_printf_i+0xc8>
 8004b10:	232d      	movs	r3, #45	; 0x2d
 8004b12:	426d      	negs	r5, r5
 8004b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b18:	485e      	ldr	r0, [pc, #376]	; (8004c94 <_printf_i+0x244>)
 8004b1a:	230a      	movs	r3, #10
 8004b1c:	e019      	b.n	8004b52 <_printf_i+0x102>
 8004b1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b22:	6805      	ldr	r5, [r0, #0]
 8004b24:	600b      	str	r3, [r1, #0]
 8004b26:	bf18      	it	ne
 8004b28:	b22d      	sxthne	r5, r5
 8004b2a:	e7ef      	b.n	8004b0c <_printf_i+0xbc>
 8004b2c:	680b      	ldr	r3, [r1, #0]
 8004b2e:	6825      	ldr	r5, [r4, #0]
 8004b30:	1d18      	adds	r0, r3, #4
 8004b32:	6008      	str	r0, [r1, #0]
 8004b34:	0628      	lsls	r0, r5, #24
 8004b36:	d501      	bpl.n	8004b3c <_printf_i+0xec>
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	e002      	b.n	8004b42 <_printf_i+0xf2>
 8004b3c:	0669      	lsls	r1, r5, #25
 8004b3e:	d5fb      	bpl.n	8004b38 <_printf_i+0xe8>
 8004b40:	881d      	ldrh	r5, [r3, #0]
 8004b42:	4854      	ldr	r0, [pc, #336]	; (8004c94 <_printf_i+0x244>)
 8004b44:	2f6f      	cmp	r7, #111	; 0x6f
 8004b46:	bf0c      	ite	eq
 8004b48:	2308      	moveq	r3, #8
 8004b4a:	230a      	movne	r3, #10
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b52:	6866      	ldr	r6, [r4, #4]
 8004b54:	60a6      	str	r6, [r4, #8]
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	bfa2      	ittt	ge
 8004b5a:	6821      	ldrge	r1, [r4, #0]
 8004b5c:	f021 0104 	bicge.w	r1, r1, #4
 8004b60:	6021      	strge	r1, [r4, #0]
 8004b62:	b90d      	cbnz	r5, 8004b68 <_printf_i+0x118>
 8004b64:	2e00      	cmp	r6, #0
 8004b66:	d04d      	beq.n	8004c04 <_printf_i+0x1b4>
 8004b68:	4616      	mov	r6, r2
 8004b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b72:	5dc7      	ldrb	r7, [r0, r7]
 8004b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b78:	462f      	mov	r7, r5
 8004b7a:	42bb      	cmp	r3, r7
 8004b7c:	460d      	mov	r5, r1
 8004b7e:	d9f4      	bls.n	8004b6a <_printf_i+0x11a>
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d10b      	bne.n	8004b9c <_printf_i+0x14c>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	07df      	lsls	r7, r3, #31
 8004b88:	d508      	bpl.n	8004b9c <_printf_i+0x14c>
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	6861      	ldr	r1, [r4, #4]
 8004b8e:	4299      	cmp	r1, r3
 8004b90:	bfde      	ittt	le
 8004b92:	2330      	movle	r3, #48	; 0x30
 8004b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b9c:	1b92      	subs	r2, r2, r6
 8004b9e:	6122      	str	r2, [r4, #16]
 8004ba0:	f8cd a000 	str.w	sl, [sp]
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	aa03      	add	r2, sp, #12
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4640      	mov	r0, r8
 8004bac:	f7ff fee2 	bl	8004974 <_printf_common>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d14c      	bne.n	8004c4e <_printf_i+0x1fe>
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	b004      	add	sp, #16
 8004bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bbe:	4835      	ldr	r0, [pc, #212]	; (8004c94 <_printf_i+0x244>)
 8004bc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	680e      	ldr	r6, [r1, #0]
 8004bc8:	061f      	lsls	r7, r3, #24
 8004bca:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bce:	600e      	str	r6, [r1, #0]
 8004bd0:	d514      	bpl.n	8004bfc <_printf_i+0x1ac>
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	bf44      	itt	mi
 8004bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004bda:	6023      	strmi	r3, [r4, #0]
 8004bdc:	b91d      	cbnz	r5, 8004be6 <_printf_i+0x196>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f023 0320 	bic.w	r3, r3, #32
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	2310      	movs	r3, #16
 8004be8:	e7b0      	b.n	8004b4c <_printf_i+0xfc>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	f043 0320 	orr.w	r3, r3, #32
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	2378      	movs	r3, #120	; 0x78
 8004bf4:	4828      	ldr	r0, [pc, #160]	; (8004c98 <_printf_i+0x248>)
 8004bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bfa:	e7e3      	b.n	8004bc4 <_printf_i+0x174>
 8004bfc:	065e      	lsls	r6, r3, #25
 8004bfe:	bf48      	it	mi
 8004c00:	b2ad      	uxthmi	r5, r5
 8004c02:	e7e6      	b.n	8004bd2 <_printf_i+0x182>
 8004c04:	4616      	mov	r6, r2
 8004c06:	e7bb      	b.n	8004b80 <_printf_i+0x130>
 8004c08:	680b      	ldr	r3, [r1, #0]
 8004c0a:	6826      	ldr	r6, [r4, #0]
 8004c0c:	6960      	ldr	r0, [r4, #20]
 8004c0e:	1d1d      	adds	r5, r3, #4
 8004c10:	600d      	str	r5, [r1, #0]
 8004c12:	0635      	lsls	r5, r6, #24
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	d501      	bpl.n	8004c1c <_printf_i+0x1cc>
 8004c18:	6018      	str	r0, [r3, #0]
 8004c1a:	e002      	b.n	8004c22 <_printf_i+0x1d2>
 8004c1c:	0671      	lsls	r1, r6, #25
 8004c1e:	d5fb      	bpl.n	8004c18 <_printf_i+0x1c8>
 8004c20:	8018      	strh	r0, [r3, #0]
 8004c22:	2300      	movs	r3, #0
 8004c24:	6123      	str	r3, [r4, #16]
 8004c26:	4616      	mov	r6, r2
 8004c28:	e7ba      	b.n	8004ba0 <_printf_i+0x150>
 8004c2a:	680b      	ldr	r3, [r1, #0]
 8004c2c:	1d1a      	adds	r2, r3, #4
 8004c2e:	600a      	str	r2, [r1, #0]
 8004c30:	681e      	ldr	r6, [r3, #0]
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	2100      	movs	r1, #0
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7fb fad2 	bl	80001e0 <memchr>
 8004c3c:	b108      	cbz	r0, 8004c42 <_printf_i+0x1f2>
 8004c3e:	1b80      	subs	r0, r0, r6
 8004c40:	6060      	str	r0, [r4, #4]
 8004c42:	6863      	ldr	r3, [r4, #4]
 8004c44:	6123      	str	r3, [r4, #16]
 8004c46:	2300      	movs	r3, #0
 8004c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c4c:	e7a8      	b.n	8004ba0 <_printf_i+0x150>
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	4632      	mov	r2, r6
 8004c52:	4649      	mov	r1, r9
 8004c54:	4640      	mov	r0, r8
 8004c56:	47d0      	blx	sl
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d0ab      	beq.n	8004bb4 <_printf_i+0x164>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	079b      	lsls	r3, r3, #30
 8004c60:	d413      	bmi.n	8004c8a <_printf_i+0x23a>
 8004c62:	68e0      	ldr	r0, [r4, #12]
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	4298      	cmp	r0, r3
 8004c68:	bfb8      	it	lt
 8004c6a:	4618      	movlt	r0, r3
 8004c6c:	e7a4      	b.n	8004bb8 <_printf_i+0x168>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4632      	mov	r2, r6
 8004c72:	4649      	mov	r1, r9
 8004c74:	4640      	mov	r0, r8
 8004c76:	47d0      	blx	sl
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d09b      	beq.n	8004bb4 <_printf_i+0x164>
 8004c7c:	3501      	adds	r5, #1
 8004c7e:	68e3      	ldr	r3, [r4, #12]
 8004c80:	9903      	ldr	r1, [sp, #12]
 8004c82:	1a5b      	subs	r3, r3, r1
 8004c84:	42ab      	cmp	r3, r5
 8004c86:	dcf2      	bgt.n	8004c6e <_printf_i+0x21e>
 8004c88:	e7eb      	b.n	8004c62 <_printf_i+0x212>
 8004c8a:	2500      	movs	r5, #0
 8004c8c:	f104 0619 	add.w	r6, r4, #25
 8004c90:	e7f5      	b.n	8004c7e <_printf_i+0x22e>
 8004c92:	bf00      	nop
 8004c94:	08008122 	.word	0x08008122
 8004c98:	08008133 	.word	0x08008133

08004c9c <siprintf>:
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	b500      	push	{lr}
 8004ca0:	b09c      	sub	sp, #112	; 0x70
 8004ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ca4:	9002      	str	r0, [sp, #8]
 8004ca6:	9006      	str	r0, [sp, #24]
 8004ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cac:	4809      	ldr	r0, [pc, #36]	; (8004cd4 <siprintf+0x38>)
 8004cae:	9107      	str	r1, [sp, #28]
 8004cb0:	9104      	str	r1, [sp, #16]
 8004cb2:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <siprintf+0x3c>)
 8004cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb8:	9105      	str	r1, [sp, #20]
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	a902      	add	r1, sp, #8
 8004cc0:	f001 fb34 	bl	800632c <_svfiprintf_r>
 8004cc4:	9b02      	ldr	r3, [sp, #8]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	b01c      	add	sp, #112	; 0x70
 8004ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd0:	b003      	add	sp, #12
 8004cd2:	4770      	bx	lr
 8004cd4:	2000000c 	.word	0x2000000c
 8004cd8:	ffff0208 	.word	0xffff0208

08004cdc <quorem>:
 8004cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	6903      	ldr	r3, [r0, #16]
 8004ce2:	690c      	ldr	r4, [r1, #16]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	f2c0 8081 	blt.w	8004dee <quorem+0x112>
 8004cec:	3c01      	subs	r4, #1
 8004cee:	f101 0814 	add.w	r8, r1, #20
 8004cf2:	f100 0514 	add.w	r5, r0, #20
 8004cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d04:	3301      	adds	r3, #1
 8004d06:	429a      	cmp	r2, r3
 8004d08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d14:	d331      	bcc.n	8004d7a <quorem+0x9e>
 8004d16:	f04f 0e00 	mov.w	lr, #0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	46ac      	mov	ip, r5
 8004d1e:	46f2      	mov	sl, lr
 8004d20:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d24:	b293      	uxth	r3, r2
 8004d26:	fb06 e303 	mla	r3, r6, r3, lr
 8004d2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	ebaa 0303 	sub.w	r3, sl, r3
 8004d34:	0c12      	lsrs	r2, r2, #16
 8004d36:	f8dc a000 	ldr.w	sl, [ip]
 8004d3a:	fb06 e202 	mla	r2, r6, r2, lr
 8004d3e:	fa13 f38a 	uxtah	r3, r3, sl
 8004d42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d46:	fa1f fa82 	uxth.w	sl, r2
 8004d4a:	f8dc 2000 	ldr.w	r2, [ip]
 8004d4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004d52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d5c:	4581      	cmp	r9, r0
 8004d5e:	f84c 3b04 	str.w	r3, [ip], #4
 8004d62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d66:	d2db      	bcs.n	8004d20 <quorem+0x44>
 8004d68:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d6c:	b92b      	cbnz	r3, 8004d7a <quorem+0x9e>
 8004d6e:	9b01      	ldr	r3, [sp, #4]
 8004d70:	3b04      	subs	r3, #4
 8004d72:	429d      	cmp	r5, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	d32e      	bcc.n	8004dd6 <quorem+0xfa>
 8004d78:	613c      	str	r4, [r7, #16]
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	f001 f8c0 	bl	8005f00 <__mcmp>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	db24      	blt.n	8004dce <quorem+0xf2>
 8004d84:	3601      	adds	r6, #1
 8004d86:	4628      	mov	r0, r5
 8004d88:	f04f 0c00 	mov.w	ip, #0
 8004d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d90:	f8d0 e000 	ldr.w	lr, [r0]
 8004d94:	b293      	uxth	r3, r2
 8004d96:	ebac 0303 	sub.w	r3, ip, r3
 8004d9a:	0c12      	lsrs	r2, r2, #16
 8004d9c:	fa13 f38e 	uxtah	r3, r3, lr
 8004da0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dae:	45c1      	cmp	r9, r8
 8004db0:	f840 3b04 	str.w	r3, [r0], #4
 8004db4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004db8:	d2e8      	bcs.n	8004d8c <quorem+0xb0>
 8004dba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dc2:	b922      	cbnz	r2, 8004dce <quorem+0xf2>
 8004dc4:	3b04      	subs	r3, #4
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	d30a      	bcc.n	8004de2 <quorem+0x106>
 8004dcc:	613c      	str	r4, [r7, #16]
 8004dce:	4630      	mov	r0, r6
 8004dd0:	b003      	add	sp, #12
 8004dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	d1cc      	bne.n	8004d78 <quorem+0x9c>
 8004dde:	3c01      	subs	r4, #1
 8004de0:	e7c7      	b.n	8004d72 <quorem+0x96>
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	3b04      	subs	r3, #4
 8004de6:	2a00      	cmp	r2, #0
 8004de8:	d1f0      	bne.n	8004dcc <quorem+0xf0>
 8004dea:	3c01      	subs	r4, #1
 8004dec:	e7eb      	b.n	8004dc6 <quorem+0xea>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e7ee      	b.n	8004dd0 <quorem+0xf4>
 8004df2:	0000      	movs	r0, r0
 8004df4:	0000      	movs	r0, r0
	...

08004df8 <_dtoa_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	ed2d 8b02 	vpush	{d8}
 8004e00:	ec57 6b10 	vmov	r6, r7, d0
 8004e04:	b095      	sub	sp, #84	; 0x54
 8004e06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e0c:	9105      	str	r1, [sp, #20]
 8004e0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004e12:	4604      	mov	r4, r0
 8004e14:	9209      	str	r2, [sp, #36]	; 0x24
 8004e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e18:	b975      	cbnz	r5, 8004e38 <_dtoa_r+0x40>
 8004e1a:	2010      	movs	r0, #16
 8004e1c:	f000 fddc 	bl	80059d8 <malloc>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6260      	str	r0, [r4, #36]	; 0x24
 8004e24:	b920      	cbnz	r0, 8004e30 <_dtoa_r+0x38>
 8004e26:	4bb2      	ldr	r3, [pc, #712]	; (80050f0 <_dtoa_r+0x2f8>)
 8004e28:	21ea      	movs	r1, #234	; 0xea
 8004e2a:	48b2      	ldr	r0, [pc, #712]	; (80050f4 <_dtoa_r+0x2fc>)
 8004e2c:	f001 fb8e 	bl	800654c <__assert_func>
 8004e30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e34:	6005      	str	r5, [r0, #0]
 8004e36:	60c5      	str	r5, [r0, #12]
 8004e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	b151      	cbz	r1, 8004e54 <_dtoa_r+0x5c>
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	604a      	str	r2, [r1, #4]
 8004e42:	2301      	movs	r3, #1
 8004e44:	4093      	lsls	r3, r2
 8004e46:	608b      	str	r3, [r1, #8]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f000 fe1b 	bl	8005a84 <_Bfree>
 8004e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	1e3b      	subs	r3, r7, #0
 8004e56:	bfb9      	ittee	lt
 8004e58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e5c:	9303      	strlt	r3, [sp, #12]
 8004e5e:	2300      	movge	r3, #0
 8004e60:	f8c8 3000 	strge.w	r3, [r8]
 8004e64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004e68:	4ba3      	ldr	r3, [pc, #652]	; (80050f8 <_dtoa_r+0x300>)
 8004e6a:	bfbc      	itt	lt
 8004e6c:	2201      	movlt	r2, #1
 8004e6e:	f8c8 2000 	strlt.w	r2, [r8]
 8004e72:	ea33 0309 	bics.w	r3, r3, r9
 8004e76:	d11b      	bne.n	8004eb0 <_dtoa_r+0xb8>
 8004e78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e84:	4333      	orrs	r3, r6
 8004e86:	f000 857a 	beq.w	800597e <_dtoa_r+0xb86>
 8004e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e8c:	b963      	cbnz	r3, 8004ea8 <_dtoa_r+0xb0>
 8004e8e:	4b9b      	ldr	r3, [pc, #620]	; (80050fc <_dtoa_r+0x304>)
 8004e90:	e024      	b.n	8004edc <_dtoa_r+0xe4>
 8004e92:	4b9b      	ldr	r3, [pc, #620]	; (8005100 <_dtoa_r+0x308>)
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	9800      	ldr	r0, [sp, #0]
 8004e9e:	b015      	add	sp, #84	; 0x54
 8004ea0:	ecbd 8b02 	vpop	{d8}
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	4b94      	ldr	r3, [pc, #592]	; (80050fc <_dtoa_r+0x304>)
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	3303      	adds	r3, #3
 8004eae:	e7f3      	b.n	8004e98 <_dtoa_r+0xa0>
 8004eb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	ec51 0b17 	vmov	r0, r1, d7
 8004eba:	2300      	movs	r3, #0
 8004ebc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004ec0:	f7fb fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ec4:	4680      	mov	r8, r0
 8004ec6:	b158      	cbz	r0, 8004ee0 <_dtoa_r+0xe8>
 8004ec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004eca:	2301      	movs	r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8551 	beq.w	8005978 <_dtoa_r+0xb80>
 8004ed6:	488b      	ldr	r0, [pc, #556]	; (8005104 <_dtoa_r+0x30c>)
 8004ed8:	6018      	str	r0, [r3, #0]
 8004eda:	1e43      	subs	r3, r0, #1
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	e7dd      	b.n	8004e9c <_dtoa_r+0xa4>
 8004ee0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004ee4:	aa12      	add	r2, sp, #72	; 0x48
 8004ee6:	a913      	add	r1, sp, #76	; 0x4c
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f001 f8ad 	bl	8006048 <__d2b>
 8004eee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004ef2:	4683      	mov	fp, r0
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	d07c      	beq.n	8004ff2 <_dtoa_r+0x1fa>
 8004ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004efa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004f06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f12:	4b7d      	ldr	r3, [pc, #500]	; (8005108 <_dtoa_r+0x310>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	4630      	mov	r0, r6
 8004f18:	4639      	mov	r1, r7
 8004f1a:	f7fb f9b5 	bl	8000288 <__aeabi_dsub>
 8004f1e:	a36e      	add	r3, pc, #440	; (adr r3, 80050d8 <_dtoa_r+0x2e0>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb fb68 	bl	80005f8 <__aeabi_dmul>
 8004f28:	a36d      	add	r3, pc, #436	; (adr r3, 80050e0 <_dtoa_r+0x2e8>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb f9ad 	bl	800028c <__adddf3>
 8004f32:	4606      	mov	r6, r0
 8004f34:	4628      	mov	r0, r5
 8004f36:	460f      	mov	r7, r1
 8004f38:	f7fb faf4 	bl	8000524 <__aeabi_i2d>
 8004f3c:	a36a      	add	r3, pc, #424	; (adr r3, 80050e8 <_dtoa_r+0x2f0>)
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f7fb fb59 	bl	80005f8 <__aeabi_dmul>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	f7fb f99d 	bl	800028c <__adddf3>
 8004f52:	4606      	mov	r6, r0
 8004f54:	460f      	mov	r7, r1
 8004f56:	f7fb fdff 	bl	8000b58 <__aeabi_d2iz>
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4630      	mov	r0, r6
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7fb fdba 	bl	8000adc <__aeabi_dcmplt>
 8004f68:	b148      	cbz	r0, 8004f7e <_dtoa_r+0x186>
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	f7fb fada 	bl	8000524 <__aeabi_i2d>
 8004f70:	4632      	mov	r2, r6
 8004f72:	463b      	mov	r3, r7
 8004f74:	f7fb fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f78:	b908      	cbnz	r0, 8004f7e <_dtoa_r+0x186>
 8004f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f7e:	f1ba 0f16 	cmp.w	sl, #22
 8004f82:	d854      	bhi.n	800502e <_dtoa_r+0x236>
 8004f84:	4b61      	ldr	r3, [pc, #388]	; (800510c <_dtoa_r+0x314>)
 8004f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f92:	f7fb fda3 	bl	8000adc <__aeabi_dcmplt>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d04b      	beq.n	8005032 <_dtoa_r+0x23a>
 8004f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8004fa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fa4:	1b5d      	subs	r5, r3, r5
 8004fa6:	1e6b      	subs	r3, r5, #1
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	bf43      	ittte	mi
 8004fac:	2300      	movmi	r3, #0
 8004fae:	f1c5 0801 	rsbmi	r8, r5, #1
 8004fb2:	9304      	strmi	r3, [sp, #16]
 8004fb4:	f04f 0800 	movpl.w	r8, #0
 8004fb8:	f1ba 0f00 	cmp.w	sl, #0
 8004fbc:	db3b      	blt.n	8005036 <_dtoa_r+0x23e>
 8004fbe:	9b04      	ldr	r3, [sp, #16]
 8004fc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004fc4:	4453      	add	r3, sl
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9306      	str	r3, [sp, #24]
 8004fcc:	9b05      	ldr	r3, [sp, #20]
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	d869      	bhi.n	80050a6 <_dtoa_r+0x2ae>
 8004fd2:	2b05      	cmp	r3, #5
 8004fd4:	bfc4      	itt	gt
 8004fd6:	3b04      	subgt	r3, #4
 8004fd8:	9305      	strgt	r3, [sp, #20]
 8004fda:	9b05      	ldr	r3, [sp, #20]
 8004fdc:	f1a3 0302 	sub.w	r3, r3, #2
 8004fe0:	bfcc      	ite	gt
 8004fe2:	2500      	movgt	r5, #0
 8004fe4:	2501      	movle	r5, #1
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d869      	bhi.n	80050be <_dtoa_r+0x2c6>
 8004fea:	e8df f003 	tbb	[pc, r3]
 8004fee:	4e2c      	.short	0x4e2c
 8004ff0:	5a4c      	.short	0x5a4c
 8004ff2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004ff6:	441d      	add	r5, r3
 8004ff8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	bfc1      	itttt	gt
 8005000:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005004:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005008:	fa09 f303 	lslgt.w	r3, r9, r3
 800500c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005010:	bfda      	itte	le
 8005012:	f1c3 0320 	rsble	r3, r3, #32
 8005016:	fa06 f003 	lslle.w	r0, r6, r3
 800501a:	4318      	orrgt	r0, r3
 800501c:	f7fb fa72 	bl	8000504 <__aeabi_ui2d>
 8005020:	2301      	movs	r3, #1
 8005022:	4606      	mov	r6, r0
 8005024:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005028:	3d01      	subs	r5, #1
 800502a:	9310      	str	r3, [sp, #64]	; 0x40
 800502c:	e771      	b.n	8004f12 <_dtoa_r+0x11a>
 800502e:	2301      	movs	r3, #1
 8005030:	e7b6      	b.n	8004fa0 <_dtoa_r+0x1a8>
 8005032:	900e      	str	r0, [sp, #56]	; 0x38
 8005034:	e7b5      	b.n	8004fa2 <_dtoa_r+0x1aa>
 8005036:	f1ca 0300 	rsb	r3, sl, #0
 800503a:	9306      	str	r3, [sp, #24]
 800503c:	2300      	movs	r3, #0
 800503e:	eba8 080a 	sub.w	r8, r8, sl
 8005042:	930d      	str	r3, [sp, #52]	; 0x34
 8005044:	e7c2      	b.n	8004fcc <_dtoa_r+0x1d4>
 8005046:	2300      	movs	r3, #0
 8005048:	9308      	str	r3, [sp, #32]
 800504a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	dc39      	bgt.n	80050c4 <_dtoa_r+0x2cc>
 8005050:	f04f 0901 	mov.w	r9, #1
 8005054:	f8cd 9004 	str.w	r9, [sp, #4]
 8005058:	464b      	mov	r3, r9
 800505a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800505e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005060:	2200      	movs	r2, #0
 8005062:	6042      	str	r2, [r0, #4]
 8005064:	2204      	movs	r2, #4
 8005066:	f102 0614 	add.w	r6, r2, #20
 800506a:	429e      	cmp	r6, r3
 800506c:	6841      	ldr	r1, [r0, #4]
 800506e:	d92f      	bls.n	80050d0 <_dtoa_r+0x2d8>
 8005070:	4620      	mov	r0, r4
 8005072:	f000 fcc7 	bl	8005a04 <_Balloc>
 8005076:	9000      	str	r0, [sp, #0]
 8005078:	2800      	cmp	r0, #0
 800507a:	d14b      	bne.n	8005114 <_dtoa_r+0x31c>
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <_dtoa_r+0x318>)
 800507e:	4602      	mov	r2, r0
 8005080:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005084:	e6d1      	b.n	8004e2a <_dtoa_r+0x32>
 8005086:	2301      	movs	r3, #1
 8005088:	e7de      	b.n	8005048 <_dtoa_r+0x250>
 800508a:	2300      	movs	r3, #0
 800508c:	9308      	str	r3, [sp, #32]
 800508e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005090:	eb0a 0903 	add.w	r9, sl, r3
 8005094:	f109 0301 	add.w	r3, r9, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	bfb8      	it	lt
 800509e:	2301      	movlt	r3, #1
 80050a0:	e7dd      	b.n	800505e <_dtoa_r+0x266>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e7f2      	b.n	800508c <_dtoa_r+0x294>
 80050a6:	2501      	movs	r5, #1
 80050a8:	2300      	movs	r3, #0
 80050aa:	9305      	str	r3, [sp, #20]
 80050ac:	9508      	str	r5, [sp, #32]
 80050ae:	f04f 39ff 	mov.w	r9, #4294967295
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80050b8:	2312      	movs	r3, #18
 80050ba:	9209      	str	r2, [sp, #36]	; 0x24
 80050bc:	e7cf      	b.n	800505e <_dtoa_r+0x266>
 80050be:	2301      	movs	r3, #1
 80050c0:	9308      	str	r3, [sp, #32]
 80050c2:	e7f4      	b.n	80050ae <_dtoa_r+0x2b6>
 80050c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80050c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80050cc:	464b      	mov	r3, r9
 80050ce:	e7c6      	b.n	800505e <_dtoa_r+0x266>
 80050d0:	3101      	adds	r1, #1
 80050d2:	6041      	str	r1, [r0, #4]
 80050d4:	0052      	lsls	r2, r2, #1
 80050d6:	e7c6      	b.n	8005066 <_dtoa_r+0x26e>
 80050d8:	636f4361 	.word	0x636f4361
 80050dc:	3fd287a7 	.word	0x3fd287a7
 80050e0:	8b60c8b3 	.word	0x8b60c8b3
 80050e4:	3fc68a28 	.word	0x3fc68a28
 80050e8:	509f79fb 	.word	0x509f79fb
 80050ec:	3fd34413 	.word	0x3fd34413
 80050f0:	08008151 	.word	0x08008151
 80050f4:	08008168 	.word	0x08008168
 80050f8:	7ff00000 	.word	0x7ff00000
 80050fc:	0800814d 	.word	0x0800814d
 8005100:	08008144 	.word	0x08008144
 8005104:	08008121 	.word	0x08008121
 8005108:	3ff80000 	.word	0x3ff80000
 800510c:	08008260 	.word	0x08008260
 8005110:	080081c7 	.word	0x080081c7
 8005114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005116:	9a00      	ldr	r2, [sp, #0]
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	2b0e      	cmp	r3, #14
 800511e:	f200 80ad 	bhi.w	800527c <_dtoa_r+0x484>
 8005122:	2d00      	cmp	r5, #0
 8005124:	f000 80aa 	beq.w	800527c <_dtoa_r+0x484>
 8005128:	f1ba 0f00 	cmp.w	sl, #0
 800512c:	dd36      	ble.n	800519c <_dtoa_r+0x3a4>
 800512e:	4ac3      	ldr	r2, [pc, #780]	; (800543c <_dtoa_r+0x644>)
 8005130:	f00a 030f 	and.w	r3, sl, #15
 8005134:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005138:	ed93 7b00 	vldr	d7, [r3]
 800513c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005140:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005144:	eeb0 8a47 	vmov.f32	s16, s14
 8005148:	eef0 8a67 	vmov.f32	s17, s15
 800514c:	d016      	beq.n	800517c <_dtoa_r+0x384>
 800514e:	4bbc      	ldr	r3, [pc, #752]	; (8005440 <_dtoa_r+0x648>)
 8005150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005158:	f7fb fb78 	bl	800084c <__aeabi_ddiv>
 800515c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005160:	f007 070f 	and.w	r7, r7, #15
 8005164:	2503      	movs	r5, #3
 8005166:	4eb6      	ldr	r6, [pc, #728]	; (8005440 <_dtoa_r+0x648>)
 8005168:	b957      	cbnz	r7, 8005180 <_dtoa_r+0x388>
 800516a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800516e:	ec53 2b18 	vmov	r2, r3, d8
 8005172:	f7fb fb6b 	bl	800084c <__aeabi_ddiv>
 8005176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800517a:	e029      	b.n	80051d0 <_dtoa_r+0x3d8>
 800517c:	2502      	movs	r5, #2
 800517e:	e7f2      	b.n	8005166 <_dtoa_r+0x36e>
 8005180:	07f9      	lsls	r1, r7, #31
 8005182:	d508      	bpl.n	8005196 <_dtoa_r+0x39e>
 8005184:	ec51 0b18 	vmov	r0, r1, d8
 8005188:	e9d6 2300 	ldrd	r2, r3, [r6]
 800518c:	f7fb fa34 	bl	80005f8 <__aeabi_dmul>
 8005190:	ec41 0b18 	vmov	d8, r0, r1
 8005194:	3501      	adds	r5, #1
 8005196:	107f      	asrs	r7, r7, #1
 8005198:	3608      	adds	r6, #8
 800519a:	e7e5      	b.n	8005168 <_dtoa_r+0x370>
 800519c:	f000 80a6 	beq.w	80052ec <_dtoa_r+0x4f4>
 80051a0:	f1ca 0600 	rsb	r6, sl, #0
 80051a4:	4ba5      	ldr	r3, [pc, #660]	; (800543c <_dtoa_r+0x644>)
 80051a6:	4fa6      	ldr	r7, [pc, #664]	; (8005440 <_dtoa_r+0x648>)
 80051a8:	f006 020f 	and.w	r2, r6, #15
 80051ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051b8:	f7fb fa1e 	bl	80005f8 <__aeabi_dmul>
 80051bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c0:	1136      	asrs	r6, r6, #4
 80051c2:	2300      	movs	r3, #0
 80051c4:	2502      	movs	r5, #2
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	f040 8085 	bne.w	80052d6 <_dtoa_r+0x4de>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1d2      	bne.n	8005176 <_dtoa_r+0x37e>
 80051d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 808c 	beq.w	80052f0 <_dtoa_r+0x4f8>
 80051d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051dc:	4b99      	ldr	r3, [pc, #612]	; (8005444 <_dtoa_r+0x64c>)
 80051de:	2200      	movs	r2, #0
 80051e0:	4630      	mov	r0, r6
 80051e2:	4639      	mov	r1, r7
 80051e4:	f7fb fc7a 	bl	8000adc <__aeabi_dcmplt>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	f000 8081 	beq.w	80052f0 <_dtoa_r+0x4f8>
 80051ee:	9b01      	ldr	r3, [sp, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d07d      	beq.n	80052f0 <_dtoa_r+0x4f8>
 80051f4:	f1b9 0f00 	cmp.w	r9, #0
 80051f8:	dd3c      	ble.n	8005274 <_dtoa_r+0x47c>
 80051fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80051fe:	9307      	str	r3, [sp, #28]
 8005200:	2200      	movs	r2, #0
 8005202:	4b91      	ldr	r3, [pc, #580]	; (8005448 <_dtoa_r+0x650>)
 8005204:	4630      	mov	r0, r6
 8005206:	4639      	mov	r1, r7
 8005208:	f7fb f9f6 	bl	80005f8 <__aeabi_dmul>
 800520c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005210:	3501      	adds	r5, #1
 8005212:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005216:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800521a:	4628      	mov	r0, r5
 800521c:	f7fb f982 	bl	8000524 <__aeabi_i2d>
 8005220:	4632      	mov	r2, r6
 8005222:	463b      	mov	r3, r7
 8005224:	f7fb f9e8 	bl	80005f8 <__aeabi_dmul>
 8005228:	4b88      	ldr	r3, [pc, #544]	; (800544c <_dtoa_r+0x654>)
 800522a:	2200      	movs	r2, #0
 800522c:	f7fb f82e 	bl	800028c <__adddf3>
 8005230:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005238:	9303      	str	r3, [sp, #12]
 800523a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d15c      	bne.n	80052fa <_dtoa_r+0x502>
 8005240:	4b83      	ldr	r3, [pc, #524]	; (8005450 <_dtoa_r+0x658>)
 8005242:	2200      	movs	r2, #0
 8005244:	4630      	mov	r0, r6
 8005246:	4639      	mov	r1, r7
 8005248:	f7fb f81e 	bl	8000288 <__aeabi_dsub>
 800524c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005250:	4606      	mov	r6, r0
 8005252:	460f      	mov	r7, r1
 8005254:	f7fb fc60 	bl	8000b18 <__aeabi_dcmpgt>
 8005258:	2800      	cmp	r0, #0
 800525a:	f040 8296 	bne.w	800578a <_dtoa_r+0x992>
 800525e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005262:	4630      	mov	r0, r6
 8005264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005268:	4639      	mov	r1, r7
 800526a:	f7fb fc37 	bl	8000adc <__aeabi_dcmplt>
 800526e:	2800      	cmp	r0, #0
 8005270:	f040 8288 	bne.w	8005784 <_dtoa_r+0x98c>
 8005274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005278:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800527c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800527e:	2b00      	cmp	r3, #0
 8005280:	f2c0 8158 	blt.w	8005534 <_dtoa_r+0x73c>
 8005284:	f1ba 0f0e 	cmp.w	sl, #14
 8005288:	f300 8154 	bgt.w	8005534 <_dtoa_r+0x73c>
 800528c:	4b6b      	ldr	r3, [pc, #428]	; (800543c <_dtoa_r+0x644>)
 800528e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005292:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	f280 80e3 	bge.w	8005464 <_dtoa_r+0x66c>
 800529e:	9b01      	ldr	r3, [sp, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f300 80df 	bgt.w	8005464 <_dtoa_r+0x66c>
 80052a6:	f040 826d 	bne.w	8005784 <_dtoa_r+0x98c>
 80052aa:	4b69      	ldr	r3, [pc, #420]	; (8005450 <_dtoa_r+0x658>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fb f9a1 	bl	80005f8 <__aeabi_dmul>
 80052b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ba:	f7fb fc23 	bl	8000b04 <__aeabi_dcmpge>
 80052be:	9e01      	ldr	r6, [sp, #4]
 80052c0:	4637      	mov	r7, r6
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f040 8243 	bne.w	800574e <_dtoa_r+0x956>
 80052c8:	9d00      	ldr	r5, [sp, #0]
 80052ca:	2331      	movs	r3, #49	; 0x31
 80052cc:	f805 3b01 	strb.w	r3, [r5], #1
 80052d0:	f10a 0a01 	add.w	sl, sl, #1
 80052d4:	e23f      	b.n	8005756 <_dtoa_r+0x95e>
 80052d6:	07f2      	lsls	r2, r6, #31
 80052d8:	d505      	bpl.n	80052e6 <_dtoa_r+0x4ee>
 80052da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052de:	f7fb f98b 	bl	80005f8 <__aeabi_dmul>
 80052e2:	3501      	adds	r5, #1
 80052e4:	2301      	movs	r3, #1
 80052e6:	1076      	asrs	r6, r6, #1
 80052e8:	3708      	adds	r7, #8
 80052ea:	e76c      	b.n	80051c6 <_dtoa_r+0x3ce>
 80052ec:	2502      	movs	r5, #2
 80052ee:	e76f      	b.n	80051d0 <_dtoa_r+0x3d8>
 80052f0:	9b01      	ldr	r3, [sp, #4]
 80052f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80052f6:	930c      	str	r3, [sp, #48]	; 0x30
 80052f8:	e78d      	b.n	8005216 <_dtoa_r+0x41e>
 80052fa:	9900      	ldr	r1, [sp, #0]
 80052fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80052fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005300:	4b4e      	ldr	r3, [pc, #312]	; (800543c <_dtoa_r+0x644>)
 8005302:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005306:	4401      	add	r1, r0
 8005308:	9102      	str	r1, [sp, #8]
 800530a:	9908      	ldr	r1, [sp, #32]
 800530c:	eeb0 8a47 	vmov.f32	s16, s14
 8005310:	eef0 8a67 	vmov.f32	s17, s15
 8005314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800531c:	2900      	cmp	r1, #0
 800531e:	d045      	beq.n	80053ac <_dtoa_r+0x5b4>
 8005320:	494c      	ldr	r1, [pc, #304]	; (8005454 <_dtoa_r+0x65c>)
 8005322:	2000      	movs	r0, #0
 8005324:	f7fb fa92 	bl	800084c <__aeabi_ddiv>
 8005328:	ec53 2b18 	vmov	r2, r3, d8
 800532c:	f7fa ffac 	bl	8000288 <__aeabi_dsub>
 8005330:	9d00      	ldr	r5, [sp, #0]
 8005332:	ec41 0b18 	vmov	d8, r0, r1
 8005336:	4639      	mov	r1, r7
 8005338:	4630      	mov	r0, r6
 800533a:	f7fb fc0d 	bl	8000b58 <__aeabi_d2iz>
 800533e:	900c      	str	r0, [sp, #48]	; 0x30
 8005340:	f7fb f8f0 	bl	8000524 <__aeabi_i2d>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fa ff9c 	bl	8000288 <__aeabi_dsub>
 8005350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005352:	3330      	adds	r3, #48	; 0x30
 8005354:	f805 3b01 	strb.w	r3, [r5], #1
 8005358:	ec53 2b18 	vmov	r2, r3, d8
 800535c:	4606      	mov	r6, r0
 800535e:	460f      	mov	r7, r1
 8005360:	f7fb fbbc 	bl	8000adc <__aeabi_dcmplt>
 8005364:	2800      	cmp	r0, #0
 8005366:	d165      	bne.n	8005434 <_dtoa_r+0x63c>
 8005368:	4632      	mov	r2, r6
 800536a:	463b      	mov	r3, r7
 800536c:	4935      	ldr	r1, [pc, #212]	; (8005444 <_dtoa_r+0x64c>)
 800536e:	2000      	movs	r0, #0
 8005370:	f7fa ff8a 	bl	8000288 <__aeabi_dsub>
 8005374:	ec53 2b18 	vmov	r2, r3, d8
 8005378:	f7fb fbb0 	bl	8000adc <__aeabi_dcmplt>
 800537c:	2800      	cmp	r0, #0
 800537e:	f040 80b9 	bne.w	80054f4 <_dtoa_r+0x6fc>
 8005382:	9b02      	ldr	r3, [sp, #8]
 8005384:	429d      	cmp	r5, r3
 8005386:	f43f af75 	beq.w	8005274 <_dtoa_r+0x47c>
 800538a:	4b2f      	ldr	r3, [pc, #188]	; (8005448 <_dtoa_r+0x650>)
 800538c:	ec51 0b18 	vmov	r0, r1, d8
 8005390:	2200      	movs	r2, #0
 8005392:	f7fb f931 	bl	80005f8 <__aeabi_dmul>
 8005396:	4b2c      	ldr	r3, [pc, #176]	; (8005448 <_dtoa_r+0x650>)
 8005398:	ec41 0b18 	vmov	d8, r0, r1
 800539c:	2200      	movs	r2, #0
 800539e:	4630      	mov	r0, r6
 80053a0:	4639      	mov	r1, r7
 80053a2:	f7fb f929 	bl	80005f8 <__aeabi_dmul>
 80053a6:	4606      	mov	r6, r0
 80053a8:	460f      	mov	r7, r1
 80053aa:	e7c4      	b.n	8005336 <_dtoa_r+0x53e>
 80053ac:	ec51 0b17 	vmov	r0, r1, d7
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	9b02      	ldr	r3, [sp, #8]
 80053b6:	9d00      	ldr	r5, [sp, #0]
 80053b8:	930c      	str	r3, [sp, #48]	; 0x30
 80053ba:	ec41 0b18 	vmov	d8, r0, r1
 80053be:	4639      	mov	r1, r7
 80053c0:	4630      	mov	r0, r6
 80053c2:	f7fb fbc9 	bl	8000b58 <__aeabi_d2iz>
 80053c6:	9011      	str	r0, [sp, #68]	; 0x44
 80053c8:	f7fb f8ac 	bl	8000524 <__aeabi_i2d>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4630      	mov	r0, r6
 80053d2:	4639      	mov	r1, r7
 80053d4:	f7fa ff58 	bl	8000288 <__aeabi_dsub>
 80053d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053da:	3330      	adds	r3, #48	; 0x30
 80053dc:	f805 3b01 	strb.w	r3, [r5], #1
 80053e0:	9b02      	ldr	r3, [sp, #8]
 80053e2:	429d      	cmp	r5, r3
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	d134      	bne.n	8005458 <_dtoa_r+0x660>
 80053ee:	4b19      	ldr	r3, [pc, #100]	; (8005454 <_dtoa_r+0x65c>)
 80053f0:	ec51 0b18 	vmov	r0, r1, d8
 80053f4:	f7fa ff4a 	bl	800028c <__adddf3>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fb fb8a 	bl	8000b18 <__aeabi_dcmpgt>
 8005404:	2800      	cmp	r0, #0
 8005406:	d175      	bne.n	80054f4 <_dtoa_r+0x6fc>
 8005408:	ec53 2b18 	vmov	r2, r3, d8
 800540c:	4911      	ldr	r1, [pc, #68]	; (8005454 <_dtoa_r+0x65c>)
 800540e:	2000      	movs	r0, #0
 8005410:	f7fa ff3a 	bl	8000288 <__aeabi_dsub>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fb fb5e 	bl	8000adc <__aeabi_dcmplt>
 8005420:	2800      	cmp	r0, #0
 8005422:	f43f af27 	beq.w	8005274 <_dtoa_r+0x47c>
 8005426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005428:	1e6b      	subs	r3, r5, #1
 800542a:	930c      	str	r3, [sp, #48]	; 0x30
 800542c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005430:	2b30      	cmp	r3, #48	; 0x30
 8005432:	d0f8      	beq.n	8005426 <_dtoa_r+0x62e>
 8005434:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005438:	e04a      	b.n	80054d0 <_dtoa_r+0x6d8>
 800543a:	bf00      	nop
 800543c:	08008260 	.word	0x08008260
 8005440:	08008238 	.word	0x08008238
 8005444:	3ff00000 	.word	0x3ff00000
 8005448:	40240000 	.word	0x40240000
 800544c:	401c0000 	.word	0x401c0000
 8005450:	40140000 	.word	0x40140000
 8005454:	3fe00000 	.word	0x3fe00000
 8005458:	4baf      	ldr	r3, [pc, #700]	; (8005718 <_dtoa_r+0x920>)
 800545a:	f7fb f8cd 	bl	80005f8 <__aeabi_dmul>
 800545e:	4606      	mov	r6, r0
 8005460:	460f      	mov	r7, r1
 8005462:	e7ac      	b.n	80053be <_dtoa_r+0x5c6>
 8005464:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005468:	9d00      	ldr	r5, [sp, #0]
 800546a:	4642      	mov	r2, r8
 800546c:	464b      	mov	r3, r9
 800546e:	4630      	mov	r0, r6
 8005470:	4639      	mov	r1, r7
 8005472:	f7fb f9eb 	bl	800084c <__aeabi_ddiv>
 8005476:	f7fb fb6f 	bl	8000b58 <__aeabi_d2iz>
 800547a:	9002      	str	r0, [sp, #8]
 800547c:	f7fb f852 	bl	8000524 <__aeabi_i2d>
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	f7fb f8b8 	bl	80005f8 <__aeabi_dmul>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fa fefa 	bl	8000288 <__aeabi_dsub>
 8005494:	9e02      	ldr	r6, [sp, #8]
 8005496:	9f01      	ldr	r7, [sp, #4]
 8005498:	3630      	adds	r6, #48	; 0x30
 800549a:	f805 6b01 	strb.w	r6, [r5], #1
 800549e:	9e00      	ldr	r6, [sp, #0]
 80054a0:	1bae      	subs	r6, r5, r6
 80054a2:	42b7      	cmp	r7, r6
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	d137      	bne.n	800551a <_dtoa_r+0x722>
 80054aa:	f7fa feef 	bl	800028c <__adddf3>
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	4606      	mov	r6, r0
 80054b4:	460f      	mov	r7, r1
 80054b6:	f7fb fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 80054ba:	b9c8      	cbnz	r0, 80054f0 <_dtoa_r+0x6f8>
 80054bc:	4642      	mov	r2, r8
 80054be:	464b      	mov	r3, r9
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fb fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c8:	b110      	cbz	r0, 80054d0 <_dtoa_r+0x6d8>
 80054ca:	9b02      	ldr	r3, [sp, #8]
 80054cc:	07d9      	lsls	r1, r3, #31
 80054ce:	d40f      	bmi.n	80054f0 <_dtoa_r+0x6f8>
 80054d0:	4620      	mov	r0, r4
 80054d2:	4659      	mov	r1, fp
 80054d4:	f000 fad6 	bl	8005a84 <_Bfree>
 80054d8:	2300      	movs	r3, #0
 80054da:	702b      	strb	r3, [r5, #0]
 80054dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054de:	f10a 0001 	add.w	r0, sl, #1
 80054e2:	6018      	str	r0, [r3, #0]
 80054e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f43f acd8 	beq.w	8004e9c <_dtoa_r+0xa4>
 80054ec:	601d      	str	r5, [r3, #0]
 80054ee:	e4d5      	b.n	8004e9c <_dtoa_r+0xa4>
 80054f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80054f4:	462b      	mov	r3, r5
 80054f6:	461d      	mov	r5, r3
 80054f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054fc:	2a39      	cmp	r2, #57	; 0x39
 80054fe:	d108      	bne.n	8005512 <_dtoa_r+0x71a>
 8005500:	9a00      	ldr	r2, [sp, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d1f7      	bne.n	80054f6 <_dtoa_r+0x6fe>
 8005506:	9a07      	ldr	r2, [sp, #28]
 8005508:	9900      	ldr	r1, [sp, #0]
 800550a:	3201      	adds	r2, #1
 800550c:	9207      	str	r2, [sp, #28]
 800550e:	2230      	movs	r2, #48	; 0x30
 8005510:	700a      	strb	r2, [r1, #0]
 8005512:	781a      	ldrb	r2, [r3, #0]
 8005514:	3201      	adds	r2, #1
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	e78c      	b.n	8005434 <_dtoa_r+0x63c>
 800551a:	4b7f      	ldr	r3, [pc, #508]	; (8005718 <_dtoa_r+0x920>)
 800551c:	2200      	movs	r2, #0
 800551e:	f7fb f86b 	bl	80005f8 <__aeabi_dmul>
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	4606      	mov	r6, r0
 8005528:	460f      	mov	r7, r1
 800552a:	f7fb facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800552e:	2800      	cmp	r0, #0
 8005530:	d09b      	beq.n	800546a <_dtoa_r+0x672>
 8005532:	e7cd      	b.n	80054d0 <_dtoa_r+0x6d8>
 8005534:	9a08      	ldr	r2, [sp, #32]
 8005536:	2a00      	cmp	r2, #0
 8005538:	f000 80c4 	beq.w	80056c4 <_dtoa_r+0x8cc>
 800553c:	9a05      	ldr	r2, [sp, #20]
 800553e:	2a01      	cmp	r2, #1
 8005540:	f300 80a8 	bgt.w	8005694 <_dtoa_r+0x89c>
 8005544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005546:	2a00      	cmp	r2, #0
 8005548:	f000 80a0 	beq.w	800568c <_dtoa_r+0x894>
 800554c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005550:	9e06      	ldr	r6, [sp, #24]
 8005552:	4645      	mov	r5, r8
 8005554:	9a04      	ldr	r2, [sp, #16]
 8005556:	2101      	movs	r1, #1
 8005558:	441a      	add	r2, r3
 800555a:	4620      	mov	r0, r4
 800555c:	4498      	add	r8, r3
 800555e:	9204      	str	r2, [sp, #16]
 8005560:	f000 fb4c 	bl	8005bfc <__i2b>
 8005564:	4607      	mov	r7, r0
 8005566:	2d00      	cmp	r5, #0
 8005568:	dd0b      	ble.n	8005582 <_dtoa_r+0x78a>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	dd08      	ble.n	8005582 <_dtoa_r+0x78a>
 8005570:	42ab      	cmp	r3, r5
 8005572:	9a04      	ldr	r2, [sp, #16]
 8005574:	bfa8      	it	ge
 8005576:	462b      	movge	r3, r5
 8005578:	eba8 0803 	sub.w	r8, r8, r3
 800557c:	1aed      	subs	r5, r5, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	9b06      	ldr	r3, [sp, #24]
 8005584:	b1fb      	cbz	r3, 80055c6 <_dtoa_r+0x7ce>
 8005586:	9b08      	ldr	r3, [sp, #32]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 809f 	beq.w	80056cc <_dtoa_r+0x8d4>
 800558e:	2e00      	cmp	r6, #0
 8005590:	dd11      	ble.n	80055b6 <_dtoa_r+0x7be>
 8005592:	4639      	mov	r1, r7
 8005594:	4632      	mov	r2, r6
 8005596:	4620      	mov	r0, r4
 8005598:	f000 fbec 	bl	8005d74 <__pow5mult>
 800559c:	465a      	mov	r2, fp
 800559e:	4601      	mov	r1, r0
 80055a0:	4607      	mov	r7, r0
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 fb40 	bl	8005c28 <__multiply>
 80055a8:	4659      	mov	r1, fp
 80055aa:	9007      	str	r0, [sp, #28]
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 fa69 	bl	8005a84 <_Bfree>
 80055b2:	9b07      	ldr	r3, [sp, #28]
 80055b4:	469b      	mov	fp, r3
 80055b6:	9b06      	ldr	r3, [sp, #24]
 80055b8:	1b9a      	subs	r2, r3, r6
 80055ba:	d004      	beq.n	80055c6 <_dtoa_r+0x7ce>
 80055bc:	4659      	mov	r1, fp
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 fbd8 	bl	8005d74 <__pow5mult>
 80055c4:	4683      	mov	fp, r0
 80055c6:	2101      	movs	r1, #1
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fb17 	bl	8005bfc <__i2b>
 80055ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	4606      	mov	r6, r0
 80055d4:	dd7c      	ble.n	80056d0 <_dtoa_r+0x8d8>
 80055d6:	461a      	mov	r2, r3
 80055d8:	4601      	mov	r1, r0
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 fbca 	bl	8005d74 <__pow5mult>
 80055e0:	9b05      	ldr	r3, [sp, #20]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	4606      	mov	r6, r0
 80055e6:	dd76      	ble.n	80056d6 <_dtoa_r+0x8de>
 80055e8:	2300      	movs	r3, #0
 80055ea:	9306      	str	r3, [sp, #24]
 80055ec:	6933      	ldr	r3, [r6, #16]
 80055ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055f2:	6918      	ldr	r0, [r3, #16]
 80055f4:	f000 fab2 	bl	8005b5c <__hi0bits>
 80055f8:	f1c0 0020 	rsb	r0, r0, #32
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	4418      	add	r0, r3
 8005600:	f010 001f 	ands.w	r0, r0, #31
 8005604:	f000 8086 	beq.w	8005714 <_dtoa_r+0x91c>
 8005608:	f1c0 0320 	rsb	r3, r0, #32
 800560c:	2b04      	cmp	r3, #4
 800560e:	dd7f      	ble.n	8005710 <_dtoa_r+0x918>
 8005610:	f1c0 001c 	rsb	r0, r0, #28
 8005614:	9b04      	ldr	r3, [sp, #16]
 8005616:	4403      	add	r3, r0
 8005618:	4480      	add	r8, r0
 800561a:	4405      	add	r5, r0
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	f1b8 0f00 	cmp.w	r8, #0
 8005622:	dd05      	ble.n	8005630 <_dtoa_r+0x838>
 8005624:	4659      	mov	r1, fp
 8005626:	4642      	mov	r2, r8
 8005628:	4620      	mov	r0, r4
 800562a:	f000 fbfd 	bl	8005e28 <__lshift>
 800562e:	4683      	mov	fp, r0
 8005630:	9b04      	ldr	r3, [sp, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	dd05      	ble.n	8005642 <_dtoa_r+0x84a>
 8005636:	4631      	mov	r1, r6
 8005638:	461a      	mov	r2, r3
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fbf4 	bl	8005e28 <__lshift>
 8005640:	4606      	mov	r6, r0
 8005642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d069      	beq.n	800571c <_dtoa_r+0x924>
 8005648:	4631      	mov	r1, r6
 800564a:	4658      	mov	r0, fp
 800564c:	f000 fc58 	bl	8005f00 <__mcmp>
 8005650:	2800      	cmp	r0, #0
 8005652:	da63      	bge.n	800571c <_dtoa_r+0x924>
 8005654:	2300      	movs	r3, #0
 8005656:	4659      	mov	r1, fp
 8005658:	220a      	movs	r2, #10
 800565a:	4620      	mov	r0, r4
 800565c:	f000 fa34 	bl	8005ac8 <__multadd>
 8005660:	9b08      	ldr	r3, [sp, #32]
 8005662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005666:	4683      	mov	fp, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 818f 	beq.w	800598c <_dtoa_r+0xb94>
 800566e:	4639      	mov	r1, r7
 8005670:	2300      	movs	r3, #0
 8005672:	220a      	movs	r2, #10
 8005674:	4620      	mov	r0, r4
 8005676:	f000 fa27 	bl	8005ac8 <__multadd>
 800567a:	f1b9 0f00 	cmp.w	r9, #0
 800567e:	4607      	mov	r7, r0
 8005680:	f300 808e 	bgt.w	80057a0 <_dtoa_r+0x9a8>
 8005684:	9b05      	ldr	r3, [sp, #20]
 8005686:	2b02      	cmp	r3, #2
 8005688:	dc50      	bgt.n	800572c <_dtoa_r+0x934>
 800568a:	e089      	b.n	80057a0 <_dtoa_r+0x9a8>
 800568c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800568e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005692:	e75d      	b.n	8005550 <_dtoa_r+0x758>
 8005694:	9b01      	ldr	r3, [sp, #4]
 8005696:	1e5e      	subs	r6, r3, #1
 8005698:	9b06      	ldr	r3, [sp, #24]
 800569a:	42b3      	cmp	r3, r6
 800569c:	bfbf      	itttt	lt
 800569e:	9b06      	ldrlt	r3, [sp, #24]
 80056a0:	9606      	strlt	r6, [sp, #24]
 80056a2:	1af2      	sublt	r2, r6, r3
 80056a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80056a6:	bfb6      	itet	lt
 80056a8:	189b      	addlt	r3, r3, r2
 80056aa:	1b9e      	subge	r6, r3, r6
 80056ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	bfb8      	it	lt
 80056b2:	2600      	movlt	r6, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfb5      	itete	lt
 80056b8:	eba8 0503 	sublt.w	r5, r8, r3
 80056bc:	9b01      	ldrge	r3, [sp, #4]
 80056be:	2300      	movlt	r3, #0
 80056c0:	4645      	movge	r5, r8
 80056c2:	e747      	b.n	8005554 <_dtoa_r+0x75c>
 80056c4:	9e06      	ldr	r6, [sp, #24]
 80056c6:	9f08      	ldr	r7, [sp, #32]
 80056c8:	4645      	mov	r5, r8
 80056ca:	e74c      	b.n	8005566 <_dtoa_r+0x76e>
 80056cc:	9a06      	ldr	r2, [sp, #24]
 80056ce:	e775      	b.n	80055bc <_dtoa_r+0x7c4>
 80056d0:	9b05      	ldr	r3, [sp, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	dc18      	bgt.n	8005708 <_dtoa_r+0x910>
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	b9b3      	cbnz	r3, 8005708 <_dtoa_r+0x910>
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e0:	b9a3      	cbnz	r3, 800570c <_dtoa_r+0x914>
 80056e2:	9b03      	ldr	r3, [sp, #12]
 80056e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	0d1b      	lsrs	r3, r3, #20
 80056ea:	051b      	lsls	r3, r3, #20
 80056ec:	b12b      	cbz	r3, 80056fa <_dtoa_r+0x902>
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	3301      	adds	r3, #1
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	f108 0801 	add.w	r8, r8, #1
 80056f8:	2301      	movs	r3, #1
 80056fa:	9306      	str	r3, [sp, #24]
 80056fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f47f af74 	bne.w	80055ec <_dtoa_r+0x7f4>
 8005704:	2001      	movs	r0, #1
 8005706:	e779      	b.n	80055fc <_dtoa_r+0x804>
 8005708:	2300      	movs	r3, #0
 800570a:	e7f6      	b.n	80056fa <_dtoa_r+0x902>
 800570c:	9b02      	ldr	r3, [sp, #8]
 800570e:	e7f4      	b.n	80056fa <_dtoa_r+0x902>
 8005710:	d085      	beq.n	800561e <_dtoa_r+0x826>
 8005712:	4618      	mov	r0, r3
 8005714:	301c      	adds	r0, #28
 8005716:	e77d      	b.n	8005614 <_dtoa_r+0x81c>
 8005718:	40240000 	.word	0x40240000
 800571c:	9b01      	ldr	r3, [sp, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	dc38      	bgt.n	8005794 <_dtoa_r+0x99c>
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	2b02      	cmp	r3, #2
 8005726:	dd35      	ble.n	8005794 <_dtoa_r+0x99c>
 8005728:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800572c:	f1b9 0f00 	cmp.w	r9, #0
 8005730:	d10d      	bne.n	800574e <_dtoa_r+0x956>
 8005732:	4631      	mov	r1, r6
 8005734:	464b      	mov	r3, r9
 8005736:	2205      	movs	r2, #5
 8005738:	4620      	mov	r0, r4
 800573a:	f000 f9c5 	bl	8005ac8 <__multadd>
 800573e:	4601      	mov	r1, r0
 8005740:	4606      	mov	r6, r0
 8005742:	4658      	mov	r0, fp
 8005744:	f000 fbdc 	bl	8005f00 <__mcmp>
 8005748:	2800      	cmp	r0, #0
 800574a:	f73f adbd 	bgt.w	80052c8 <_dtoa_r+0x4d0>
 800574e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005750:	9d00      	ldr	r5, [sp, #0]
 8005752:	ea6f 0a03 	mvn.w	sl, r3
 8005756:	f04f 0800 	mov.w	r8, #0
 800575a:	4631      	mov	r1, r6
 800575c:	4620      	mov	r0, r4
 800575e:	f000 f991 	bl	8005a84 <_Bfree>
 8005762:	2f00      	cmp	r7, #0
 8005764:	f43f aeb4 	beq.w	80054d0 <_dtoa_r+0x6d8>
 8005768:	f1b8 0f00 	cmp.w	r8, #0
 800576c:	d005      	beq.n	800577a <_dtoa_r+0x982>
 800576e:	45b8      	cmp	r8, r7
 8005770:	d003      	beq.n	800577a <_dtoa_r+0x982>
 8005772:	4641      	mov	r1, r8
 8005774:	4620      	mov	r0, r4
 8005776:	f000 f985 	bl	8005a84 <_Bfree>
 800577a:	4639      	mov	r1, r7
 800577c:	4620      	mov	r0, r4
 800577e:	f000 f981 	bl	8005a84 <_Bfree>
 8005782:	e6a5      	b.n	80054d0 <_dtoa_r+0x6d8>
 8005784:	2600      	movs	r6, #0
 8005786:	4637      	mov	r7, r6
 8005788:	e7e1      	b.n	800574e <_dtoa_r+0x956>
 800578a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800578c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005790:	4637      	mov	r7, r6
 8005792:	e599      	b.n	80052c8 <_dtoa_r+0x4d0>
 8005794:	9b08      	ldr	r3, [sp, #32]
 8005796:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80fd 	beq.w	800599a <_dtoa_r+0xba2>
 80057a0:	2d00      	cmp	r5, #0
 80057a2:	dd05      	ble.n	80057b0 <_dtoa_r+0x9b8>
 80057a4:	4639      	mov	r1, r7
 80057a6:	462a      	mov	r2, r5
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fb3d 	bl	8005e28 <__lshift>
 80057ae:	4607      	mov	r7, r0
 80057b0:	9b06      	ldr	r3, [sp, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d05c      	beq.n	8005870 <_dtoa_r+0xa78>
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 f923 	bl	8005a04 <_Balloc>
 80057be:	4605      	mov	r5, r0
 80057c0:	b928      	cbnz	r0, 80057ce <_dtoa_r+0x9d6>
 80057c2:	4b80      	ldr	r3, [pc, #512]	; (80059c4 <_dtoa_r+0xbcc>)
 80057c4:	4602      	mov	r2, r0
 80057c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80057ca:	f7ff bb2e 	b.w	8004e2a <_dtoa_r+0x32>
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	3202      	adds	r2, #2
 80057d2:	0092      	lsls	r2, r2, #2
 80057d4:	f107 010c 	add.w	r1, r7, #12
 80057d8:	300c      	adds	r0, #12
 80057da:	f000 f905 	bl	80059e8 <memcpy>
 80057de:	2201      	movs	r2, #1
 80057e0:	4629      	mov	r1, r5
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 fb20 	bl	8005e28 <__lshift>
 80057e8:	9b00      	ldr	r3, [sp, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	9b00      	ldr	r3, [sp, #0]
 80057f0:	444b      	add	r3, r9
 80057f2:	9307      	str	r3, [sp, #28]
 80057f4:	9b02      	ldr	r3, [sp, #8]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	46b8      	mov	r8, r7
 80057fc:	9306      	str	r3, [sp, #24]
 80057fe:	4607      	mov	r7, r0
 8005800:	9b01      	ldr	r3, [sp, #4]
 8005802:	4631      	mov	r1, r6
 8005804:	3b01      	subs	r3, #1
 8005806:	4658      	mov	r0, fp
 8005808:	9302      	str	r3, [sp, #8]
 800580a:	f7ff fa67 	bl	8004cdc <quorem>
 800580e:	4603      	mov	r3, r0
 8005810:	3330      	adds	r3, #48	; 0x30
 8005812:	9004      	str	r0, [sp, #16]
 8005814:	4641      	mov	r1, r8
 8005816:	4658      	mov	r0, fp
 8005818:	9308      	str	r3, [sp, #32]
 800581a:	f000 fb71 	bl	8005f00 <__mcmp>
 800581e:	463a      	mov	r2, r7
 8005820:	4681      	mov	r9, r0
 8005822:	4631      	mov	r1, r6
 8005824:	4620      	mov	r0, r4
 8005826:	f000 fb87 	bl	8005f38 <__mdiff>
 800582a:	68c2      	ldr	r2, [r0, #12]
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	4605      	mov	r5, r0
 8005830:	bb02      	cbnz	r2, 8005874 <_dtoa_r+0xa7c>
 8005832:	4601      	mov	r1, r0
 8005834:	4658      	mov	r0, fp
 8005836:	f000 fb63 	bl	8005f00 <__mcmp>
 800583a:	9b08      	ldr	r3, [sp, #32]
 800583c:	4602      	mov	r2, r0
 800583e:	4629      	mov	r1, r5
 8005840:	4620      	mov	r0, r4
 8005842:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005846:	f000 f91d 	bl	8005a84 <_Bfree>
 800584a:	9b05      	ldr	r3, [sp, #20]
 800584c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584e:	9d01      	ldr	r5, [sp, #4]
 8005850:	ea43 0102 	orr.w	r1, r3, r2
 8005854:	9b06      	ldr	r3, [sp, #24]
 8005856:	430b      	orrs	r3, r1
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	d10d      	bne.n	8005878 <_dtoa_r+0xa80>
 800585c:	2b39      	cmp	r3, #57	; 0x39
 800585e:	d029      	beq.n	80058b4 <_dtoa_r+0xabc>
 8005860:	f1b9 0f00 	cmp.w	r9, #0
 8005864:	dd01      	ble.n	800586a <_dtoa_r+0xa72>
 8005866:	9b04      	ldr	r3, [sp, #16]
 8005868:	3331      	adds	r3, #49	; 0x31
 800586a:	9a02      	ldr	r2, [sp, #8]
 800586c:	7013      	strb	r3, [r2, #0]
 800586e:	e774      	b.n	800575a <_dtoa_r+0x962>
 8005870:	4638      	mov	r0, r7
 8005872:	e7b9      	b.n	80057e8 <_dtoa_r+0x9f0>
 8005874:	2201      	movs	r2, #1
 8005876:	e7e2      	b.n	800583e <_dtoa_r+0xa46>
 8005878:	f1b9 0f00 	cmp.w	r9, #0
 800587c:	db06      	blt.n	800588c <_dtoa_r+0xa94>
 800587e:	9905      	ldr	r1, [sp, #20]
 8005880:	ea41 0909 	orr.w	r9, r1, r9
 8005884:	9906      	ldr	r1, [sp, #24]
 8005886:	ea59 0101 	orrs.w	r1, r9, r1
 800588a:	d120      	bne.n	80058ce <_dtoa_r+0xad6>
 800588c:	2a00      	cmp	r2, #0
 800588e:	ddec      	ble.n	800586a <_dtoa_r+0xa72>
 8005890:	4659      	mov	r1, fp
 8005892:	2201      	movs	r2, #1
 8005894:	4620      	mov	r0, r4
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	f000 fac6 	bl	8005e28 <__lshift>
 800589c:	4631      	mov	r1, r6
 800589e:	4683      	mov	fp, r0
 80058a0:	f000 fb2e 	bl	8005f00 <__mcmp>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	dc02      	bgt.n	80058b0 <_dtoa_r+0xab8>
 80058aa:	d1de      	bne.n	800586a <_dtoa_r+0xa72>
 80058ac:	07da      	lsls	r2, r3, #31
 80058ae:	d5dc      	bpl.n	800586a <_dtoa_r+0xa72>
 80058b0:	2b39      	cmp	r3, #57	; 0x39
 80058b2:	d1d8      	bne.n	8005866 <_dtoa_r+0xa6e>
 80058b4:	9a02      	ldr	r2, [sp, #8]
 80058b6:	2339      	movs	r3, #57	; 0x39
 80058b8:	7013      	strb	r3, [r2, #0]
 80058ba:	462b      	mov	r3, r5
 80058bc:	461d      	mov	r5, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058c4:	2a39      	cmp	r2, #57	; 0x39
 80058c6:	d050      	beq.n	800596a <_dtoa_r+0xb72>
 80058c8:	3201      	adds	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e745      	b.n	800575a <_dtoa_r+0x962>
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	dd03      	ble.n	80058da <_dtoa_r+0xae2>
 80058d2:	2b39      	cmp	r3, #57	; 0x39
 80058d4:	d0ee      	beq.n	80058b4 <_dtoa_r+0xabc>
 80058d6:	3301      	adds	r3, #1
 80058d8:	e7c7      	b.n	800586a <_dtoa_r+0xa72>
 80058da:	9a01      	ldr	r2, [sp, #4]
 80058dc:	9907      	ldr	r1, [sp, #28]
 80058de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80058e2:	428a      	cmp	r2, r1
 80058e4:	d02a      	beq.n	800593c <_dtoa_r+0xb44>
 80058e6:	4659      	mov	r1, fp
 80058e8:	2300      	movs	r3, #0
 80058ea:	220a      	movs	r2, #10
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 f8eb 	bl	8005ac8 <__multadd>
 80058f2:	45b8      	cmp	r8, r7
 80058f4:	4683      	mov	fp, r0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	f04f 020a 	mov.w	r2, #10
 80058fe:	4641      	mov	r1, r8
 8005900:	4620      	mov	r0, r4
 8005902:	d107      	bne.n	8005914 <_dtoa_r+0xb1c>
 8005904:	f000 f8e0 	bl	8005ac8 <__multadd>
 8005908:	4680      	mov	r8, r0
 800590a:	4607      	mov	r7, r0
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	3301      	adds	r3, #1
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	e775      	b.n	8005800 <_dtoa_r+0xa08>
 8005914:	f000 f8d8 	bl	8005ac8 <__multadd>
 8005918:	4639      	mov	r1, r7
 800591a:	4680      	mov	r8, r0
 800591c:	2300      	movs	r3, #0
 800591e:	220a      	movs	r2, #10
 8005920:	4620      	mov	r0, r4
 8005922:	f000 f8d1 	bl	8005ac8 <__multadd>
 8005926:	4607      	mov	r7, r0
 8005928:	e7f0      	b.n	800590c <_dtoa_r+0xb14>
 800592a:	f1b9 0f00 	cmp.w	r9, #0
 800592e:	9a00      	ldr	r2, [sp, #0]
 8005930:	bfcc      	ite	gt
 8005932:	464d      	movgt	r5, r9
 8005934:	2501      	movle	r5, #1
 8005936:	4415      	add	r5, r2
 8005938:	f04f 0800 	mov.w	r8, #0
 800593c:	4659      	mov	r1, fp
 800593e:	2201      	movs	r2, #1
 8005940:	4620      	mov	r0, r4
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	f000 fa70 	bl	8005e28 <__lshift>
 8005948:	4631      	mov	r1, r6
 800594a:	4683      	mov	fp, r0
 800594c:	f000 fad8 	bl	8005f00 <__mcmp>
 8005950:	2800      	cmp	r0, #0
 8005952:	dcb2      	bgt.n	80058ba <_dtoa_r+0xac2>
 8005954:	d102      	bne.n	800595c <_dtoa_r+0xb64>
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	07db      	lsls	r3, r3, #31
 800595a:	d4ae      	bmi.n	80058ba <_dtoa_r+0xac2>
 800595c:	462b      	mov	r3, r5
 800595e:	461d      	mov	r5, r3
 8005960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005964:	2a30      	cmp	r2, #48	; 0x30
 8005966:	d0fa      	beq.n	800595e <_dtoa_r+0xb66>
 8005968:	e6f7      	b.n	800575a <_dtoa_r+0x962>
 800596a:	9a00      	ldr	r2, [sp, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d1a5      	bne.n	80058bc <_dtoa_r+0xac4>
 8005970:	f10a 0a01 	add.w	sl, sl, #1
 8005974:	2331      	movs	r3, #49	; 0x31
 8005976:	e779      	b.n	800586c <_dtoa_r+0xa74>
 8005978:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <_dtoa_r+0xbd0>)
 800597a:	f7ff baaf 	b.w	8004edc <_dtoa_r+0xe4>
 800597e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f aa86 	bne.w	8004e92 <_dtoa_r+0x9a>
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <_dtoa_r+0xbd4>)
 8005988:	f7ff baa8 	b.w	8004edc <_dtoa_r+0xe4>
 800598c:	f1b9 0f00 	cmp.w	r9, #0
 8005990:	dc03      	bgt.n	800599a <_dtoa_r+0xba2>
 8005992:	9b05      	ldr	r3, [sp, #20]
 8005994:	2b02      	cmp	r3, #2
 8005996:	f73f aec9 	bgt.w	800572c <_dtoa_r+0x934>
 800599a:	9d00      	ldr	r5, [sp, #0]
 800599c:	4631      	mov	r1, r6
 800599e:	4658      	mov	r0, fp
 80059a0:	f7ff f99c 	bl	8004cdc <quorem>
 80059a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80059a8:	f805 3b01 	strb.w	r3, [r5], #1
 80059ac:	9a00      	ldr	r2, [sp, #0]
 80059ae:	1aaa      	subs	r2, r5, r2
 80059b0:	4591      	cmp	r9, r2
 80059b2:	ddba      	ble.n	800592a <_dtoa_r+0xb32>
 80059b4:	4659      	mov	r1, fp
 80059b6:	2300      	movs	r3, #0
 80059b8:	220a      	movs	r2, #10
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 f884 	bl	8005ac8 <__multadd>
 80059c0:	4683      	mov	fp, r0
 80059c2:	e7eb      	b.n	800599c <_dtoa_r+0xba4>
 80059c4:	080081c7 	.word	0x080081c7
 80059c8:	08008120 	.word	0x08008120
 80059cc:	08008144 	.word	0x08008144

080059d0 <_localeconv_r>:
 80059d0:	4800      	ldr	r0, [pc, #0]	; (80059d4 <_localeconv_r+0x4>)
 80059d2:	4770      	bx	lr
 80059d4:	20000160 	.word	0x20000160

080059d8 <malloc>:
 80059d8:	4b02      	ldr	r3, [pc, #8]	; (80059e4 <malloc+0xc>)
 80059da:	4601      	mov	r1, r0
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	f000 bbef 	b.w	80061c0 <_malloc_r>
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c

080059e8 <memcpy>:
 80059e8:	440a      	add	r2, r1
 80059ea:	4291      	cmp	r1, r2
 80059ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f0:	d100      	bne.n	80059f4 <memcpy+0xc>
 80059f2:	4770      	bx	lr
 80059f4:	b510      	push	{r4, lr}
 80059f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059fe:	4291      	cmp	r1, r2
 8005a00:	d1f9      	bne.n	80059f6 <memcpy+0xe>
 8005a02:	bd10      	pop	{r4, pc}

08005a04 <_Balloc>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a08:	4604      	mov	r4, r0
 8005a0a:	460d      	mov	r5, r1
 8005a0c:	b976      	cbnz	r6, 8005a2c <_Balloc+0x28>
 8005a0e:	2010      	movs	r0, #16
 8005a10:	f7ff ffe2 	bl	80059d8 <malloc>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6260      	str	r0, [r4, #36]	; 0x24
 8005a18:	b920      	cbnz	r0, 8005a24 <_Balloc+0x20>
 8005a1a:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <_Balloc+0x78>)
 8005a1c:	4818      	ldr	r0, [pc, #96]	; (8005a80 <_Balloc+0x7c>)
 8005a1e:	2166      	movs	r1, #102	; 0x66
 8005a20:	f000 fd94 	bl	800654c <__assert_func>
 8005a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a28:	6006      	str	r6, [r0, #0]
 8005a2a:	60c6      	str	r6, [r0, #12]
 8005a2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a2e:	68f3      	ldr	r3, [r6, #12]
 8005a30:	b183      	cbz	r3, 8005a54 <_Balloc+0x50>
 8005a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a3a:	b9b8      	cbnz	r0, 8005a6c <_Balloc+0x68>
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a42:	1d72      	adds	r2, r6, #5
 8005a44:	0092      	lsls	r2, r2, #2
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 fb5a 	bl	8006100 <_calloc_r>
 8005a4c:	b160      	cbz	r0, 8005a68 <_Balloc+0x64>
 8005a4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a52:	e00e      	b.n	8005a72 <_Balloc+0x6e>
 8005a54:	2221      	movs	r2, #33	; 0x21
 8005a56:	2104      	movs	r1, #4
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 fb51 	bl	8006100 <_calloc_r>
 8005a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a60:	60f0      	str	r0, [r6, #12]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e4      	bne.n	8005a32 <_Balloc+0x2e>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	6802      	ldr	r2, [r0, #0]
 8005a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a72:	2300      	movs	r3, #0
 8005a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a78:	e7f7      	b.n	8005a6a <_Balloc+0x66>
 8005a7a:	bf00      	nop
 8005a7c:	08008151 	.word	0x08008151
 8005a80:	080081d8 	.word	0x080081d8

08005a84 <_Bfree>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a88:	4605      	mov	r5, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	b976      	cbnz	r6, 8005aac <_Bfree+0x28>
 8005a8e:	2010      	movs	r0, #16
 8005a90:	f7ff ffa2 	bl	80059d8 <malloc>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6268      	str	r0, [r5, #36]	; 0x24
 8005a98:	b920      	cbnz	r0, 8005aa4 <_Bfree+0x20>
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <_Bfree+0x3c>)
 8005a9c:	4809      	ldr	r0, [pc, #36]	; (8005ac4 <_Bfree+0x40>)
 8005a9e:	218a      	movs	r1, #138	; 0x8a
 8005aa0:	f000 fd54 	bl	800654c <__assert_func>
 8005aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aa8:	6006      	str	r6, [r0, #0]
 8005aaa:	60c6      	str	r6, [r0, #12]
 8005aac:	b13c      	cbz	r4, 8005abe <_Bfree+0x3a>
 8005aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ab0:	6862      	ldr	r2, [r4, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ab8:	6021      	str	r1, [r4, #0]
 8005aba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	08008151 	.word	0x08008151
 8005ac4:	080081d8 	.word	0x080081d8

08005ac8 <__multadd>:
 8005ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	690e      	ldr	r6, [r1, #16]
 8005ace:	4607      	mov	r7, r0
 8005ad0:	4698      	mov	r8, r3
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	f101 0014 	add.w	r0, r1, #20
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6805      	ldr	r5, [r0, #0]
 8005adc:	b2a9      	uxth	r1, r5
 8005ade:	fb02 8101 	mla	r1, r2, r1, r8
 8005ae2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005ae6:	0c2d      	lsrs	r5, r5, #16
 8005ae8:	fb02 c505 	mla	r5, r2, r5, ip
 8005aec:	b289      	uxth	r1, r1
 8005aee:	3301      	adds	r3, #1
 8005af0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005af4:	429e      	cmp	r6, r3
 8005af6:	f840 1b04 	str.w	r1, [r0], #4
 8005afa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005afe:	dcec      	bgt.n	8005ada <__multadd+0x12>
 8005b00:	f1b8 0f00 	cmp.w	r8, #0
 8005b04:	d022      	beq.n	8005b4c <__multadd+0x84>
 8005b06:	68a3      	ldr	r3, [r4, #8]
 8005b08:	42b3      	cmp	r3, r6
 8005b0a:	dc19      	bgt.n	8005b40 <__multadd+0x78>
 8005b0c:	6861      	ldr	r1, [r4, #4]
 8005b0e:	4638      	mov	r0, r7
 8005b10:	3101      	adds	r1, #1
 8005b12:	f7ff ff77 	bl	8005a04 <_Balloc>
 8005b16:	4605      	mov	r5, r0
 8005b18:	b928      	cbnz	r0, 8005b26 <__multadd+0x5e>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <__multadd+0x8c>)
 8005b1e:	480e      	ldr	r0, [pc, #56]	; (8005b58 <__multadd+0x90>)
 8005b20:	21b5      	movs	r1, #181	; 0xb5
 8005b22:	f000 fd13 	bl	800654c <__assert_func>
 8005b26:	6922      	ldr	r2, [r4, #16]
 8005b28:	3202      	adds	r2, #2
 8005b2a:	f104 010c 	add.w	r1, r4, #12
 8005b2e:	0092      	lsls	r2, r2, #2
 8005b30:	300c      	adds	r0, #12
 8005b32:	f7ff ff59 	bl	80059e8 <memcpy>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f7ff ffa3 	bl	8005a84 <_Bfree>
 8005b3e:	462c      	mov	r4, r5
 8005b40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005b44:	3601      	adds	r6, #1
 8005b46:	f8c3 8014 	str.w	r8, [r3, #20]
 8005b4a:	6126      	str	r6, [r4, #16]
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b52:	bf00      	nop
 8005b54:	080081c7 	.word	0x080081c7
 8005b58:	080081d8 	.word	0x080081d8

08005b5c <__hi0bits>:
 8005b5c:	0c03      	lsrs	r3, r0, #16
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	b9d3      	cbnz	r3, 8005b98 <__hi0bits+0x3c>
 8005b62:	0400      	lsls	r0, r0, #16
 8005b64:	2310      	movs	r3, #16
 8005b66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b6a:	bf04      	itt	eq
 8005b6c:	0200      	lsleq	r0, r0, #8
 8005b6e:	3308      	addeq	r3, #8
 8005b70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b74:	bf04      	itt	eq
 8005b76:	0100      	lsleq	r0, r0, #4
 8005b78:	3304      	addeq	r3, #4
 8005b7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b7e:	bf04      	itt	eq
 8005b80:	0080      	lsleq	r0, r0, #2
 8005b82:	3302      	addeq	r3, #2
 8005b84:	2800      	cmp	r0, #0
 8005b86:	db05      	blt.n	8005b94 <__hi0bits+0x38>
 8005b88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b8c:	f103 0301 	add.w	r3, r3, #1
 8005b90:	bf08      	it	eq
 8005b92:	2320      	moveq	r3, #32
 8005b94:	4618      	mov	r0, r3
 8005b96:	4770      	bx	lr
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e7e4      	b.n	8005b66 <__hi0bits+0xa>

08005b9c <__lo0bits>:
 8005b9c:	6803      	ldr	r3, [r0, #0]
 8005b9e:	f013 0207 	ands.w	r2, r3, #7
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	d00b      	beq.n	8005bbe <__lo0bits+0x22>
 8005ba6:	07da      	lsls	r2, r3, #31
 8005ba8:	d424      	bmi.n	8005bf4 <__lo0bits+0x58>
 8005baa:	0798      	lsls	r0, r3, #30
 8005bac:	bf49      	itett	mi
 8005bae:	085b      	lsrmi	r3, r3, #1
 8005bb0:	089b      	lsrpl	r3, r3, #2
 8005bb2:	2001      	movmi	r0, #1
 8005bb4:	600b      	strmi	r3, [r1, #0]
 8005bb6:	bf5c      	itt	pl
 8005bb8:	600b      	strpl	r3, [r1, #0]
 8005bba:	2002      	movpl	r0, #2
 8005bbc:	4770      	bx	lr
 8005bbe:	b298      	uxth	r0, r3
 8005bc0:	b9b0      	cbnz	r0, 8005bf0 <__lo0bits+0x54>
 8005bc2:	0c1b      	lsrs	r3, r3, #16
 8005bc4:	2010      	movs	r0, #16
 8005bc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bca:	bf04      	itt	eq
 8005bcc:	0a1b      	lsreq	r3, r3, #8
 8005bce:	3008      	addeq	r0, #8
 8005bd0:	071a      	lsls	r2, r3, #28
 8005bd2:	bf04      	itt	eq
 8005bd4:	091b      	lsreq	r3, r3, #4
 8005bd6:	3004      	addeq	r0, #4
 8005bd8:	079a      	lsls	r2, r3, #30
 8005bda:	bf04      	itt	eq
 8005bdc:	089b      	lsreq	r3, r3, #2
 8005bde:	3002      	addeq	r0, #2
 8005be0:	07da      	lsls	r2, r3, #31
 8005be2:	d403      	bmi.n	8005bec <__lo0bits+0x50>
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	f100 0001 	add.w	r0, r0, #1
 8005bea:	d005      	beq.n	8005bf8 <__lo0bits+0x5c>
 8005bec:	600b      	str	r3, [r1, #0]
 8005bee:	4770      	bx	lr
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	e7e8      	b.n	8005bc6 <__lo0bits+0x2a>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	4770      	bx	lr
 8005bf8:	2020      	movs	r0, #32
 8005bfa:	4770      	bx	lr

08005bfc <__i2b>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	460c      	mov	r4, r1
 8005c00:	2101      	movs	r1, #1
 8005c02:	f7ff feff 	bl	8005a04 <_Balloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	b928      	cbnz	r0, 8005c16 <__i2b+0x1a>
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <__i2b+0x24>)
 8005c0c:	4805      	ldr	r0, [pc, #20]	; (8005c24 <__i2b+0x28>)
 8005c0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c12:	f000 fc9b 	bl	800654c <__assert_func>
 8005c16:	2301      	movs	r3, #1
 8005c18:	6144      	str	r4, [r0, #20]
 8005c1a:	6103      	str	r3, [r0, #16]
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	bf00      	nop
 8005c20:	080081c7 	.word	0x080081c7
 8005c24:	080081d8 	.word	0x080081d8

08005c28 <__multiply>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	690a      	ldr	r2, [r1, #16]
 8005c30:	6923      	ldr	r3, [r4, #16]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	bfb8      	it	lt
 8005c36:	460b      	movlt	r3, r1
 8005c38:	460d      	mov	r5, r1
 8005c3a:	bfbc      	itt	lt
 8005c3c:	4625      	movlt	r5, r4
 8005c3e:	461c      	movlt	r4, r3
 8005c40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005c44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c48:	68ab      	ldr	r3, [r5, #8]
 8005c4a:	6869      	ldr	r1, [r5, #4]
 8005c4c:	eb0a 0709 	add.w	r7, sl, r9
 8005c50:	42bb      	cmp	r3, r7
 8005c52:	b085      	sub	sp, #20
 8005c54:	bfb8      	it	lt
 8005c56:	3101      	addlt	r1, #1
 8005c58:	f7ff fed4 	bl	8005a04 <_Balloc>
 8005c5c:	b930      	cbnz	r0, 8005c6c <__multiply+0x44>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	4b42      	ldr	r3, [pc, #264]	; (8005d6c <__multiply+0x144>)
 8005c62:	4843      	ldr	r0, [pc, #268]	; (8005d70 <__multiply+0x148>)
 8005c64:	f240 115d 	movw	r1, #349	; 0x15d
 8005c68:	f000 fc70 	bl	800654c <__assert_func>
 8005c6c:	f100 0614 	add.w	r6, r0, #20
 8005c70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c74:	4633      	mov	r3, r6
 8005c76:	2200      	movs	r2, #0
 8005c78:	4543      	cmp	r3, r8
 8005c7a:	d31e      	bcc.n	8005cba <__multiply+0x92>
 8005c7c:	f105 0c14 	add.w	ip, r5, #20
 8005c80:	f104 0314 	add.w	r3, r4, #20
 8005c84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005c8c:	9202      	str	r2, [sp, #8]
 8005c8e:	ebac 0205 	sub.w	r2, ip, r5
 8005c92:	3a15      	subs	r2, #21
 8005c94:	f022 0203 	bic.w	r2, r2, #3
 8005c98:	3204      	adds	r2, #4
 8005c9a:	f105 0115 	add.w	r1, r5, #21
 8005c9e:	458c      	cmp	ip, r1
 8005ca0:	bf38      	it	cc
 8005ca2:	2204      	movcc	r2, #4
 8005ca4:	9201      	str	r2, [sp, #4]
 8005ca6:	9a02      	ldr	r2, [sp, #8]
 8005ca8:	9303      	str	r3, [sp, #12]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d808      	bhi.n	8005cc0 <__multiply+0x98>
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	dc55      	bgt.n	8005d5e <__multiply+0x136>
 8005cb2:	6107      	str	r7, [r0, #16]
 8005cb4:	b005      	add	sp, #20
 8005cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cba:	f843 2b04 	str.w	r2, [r3], #4
 8005cbe:	e7db      	b.n	8005c78 <__multiply+0x50>
 8005cc0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cc4:	f1ba 0f00 	cmp.w	sl, #0
 8005cc8:	d020      	beq.n	8005d0c <__multiply+0xe4>
 8005cca:	f105 0e14 	add.w	lr, r5, #20
 8005cce:	46b1      	mov	r9, r6
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005cd6:	f8d9 b000 	ldr.w	fp, [r9]
 8005cda:	b2a1      	uxth	r1, r4
 8005cdc:	fa1f fb8b 	uxth.w	fp, fp
 8005ce0:	fb0a b101 	mla	r1, sl, r1, fp
 8005ce4:	4411      	add	r1, r2
 8005ce6:	f8d9 2000 	ldr.w	r2, [r9]
 8005cea:	0c24      	lsrs	r4, r4, #16
 8005cec:	0c12      	lsrs	r2, r2, #16
 8005cee:	fb0a 2404 	mla	r4, sl, r4, r2
 8005cf2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005cf6:	b289      	uxth	r1, r1
 8005cf8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005cfc:	45f4      	cmp	ip, lr
 8005cfe:	f849 1b04 	str.w	r1, [r9], #4
 8005d02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d06:	d8e4      	bhi.n	8005cd2 <__multiply+0xaa>
 8005d08:	9901      	ldr	r1, [sp, #4]
 8005d0a:	5072      	str	r2, [r6, r1]
 8005d0c:	9a03      	ldr	r2, [sp, #12]
 8005d0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d12:	3304      	adds	r3, #4
 8005d14:	f1b9 0f00 	cmp.w	r9, #0
 8005d18:	d01f      	beq.n	8005d5a <__multiply+0x132>
 8005d1a:	6834      	ldr	r4, [r6, #0]
 8005d1c:	f105 0114 	add.w	r1, r5, #20
 8005d20:	46b6      	mov	lr, r6
 8005d22:	f04f 0a00 	mov.w	sl, #0
 8005d26:	880a      	ldrh	r2, [r1, #0]
 8005d28:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d2c:	fb09 b202 	mla	r2, r9, r2, fp
 8005d30:	4492      	add	sl, r2
 8005d32:	b2a4      	uxth	r4, r4
 8005d34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d38:	f84e 4b04 	str.w	r4, [lr], #4
 8005d3c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d40:	f8be 2000 	ldrh.w	r2, [lr]
 8005d44:	0c24      	lsrs	r4, r4, #16
 8005d46:	fb09 2404 	mla	r4, r9, r4, r2
 8005d4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005d4e:	458c      	cmp	ip, r1
 8005d50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d54:	d8e7      	bhi.n	8005d26 <__multiply+0xfe>
 8005d56:	9a01      	ldr	r2, [sp, #4]
 8005d58:	50b4      	str	r4, [r6, r2]
 8005d5a:	3604      	adds	r6, #4
 8005d5c:	e7a3      	b.n	8005ca6 <__multiply+0x7e>
 8005d5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1a5      	bne.n	8005cb2 <__multiply+0x8a>
 8005d66:	3f01      	subs	r7, #1
 8005d68:	e7a1      	b.n	8005cae <__multiply+0x86>
 8005d6a:	bf00      	nop
 8005d6c:	080081c7 	.word	0x080081c7
 8005d70:	080081d8 	.word	0x080081d8

08005d74 <__pow5mult>:
 8005d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d78:	4615      	mov	r5, r2
 8005d7a:	f012 0203 	ands.w	r2, r2, #3
 8005d7e:	4606      	mov	r6, r0
 8005d80:	460f      	mov	r7, r1
 8005d82:	d007      	beq.n	8005d94 <__pow5mult+0x20>
 8005d84:	4c25      	ldr	r4, [pc, #148]	; (8005e1c <__pow5mult+0xa8>)
 8005d86:	3a01      	subs	r2, #1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d8e:	f7ff fe9b 	bl	8005ac8 <__multadd>
 8005d92:	4607      	mov	r7, r0
 8005d94:	10ad      	asrs	r5, r5, #2
 8005d96:	d03d      	beq.n	8005e14 <__pow5mult+0xa0>
 8005d98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d9a:	b97c      	cbnz	r4, 8005dbc <__pow5mult+0x48>
 8005d9c:	2010      	movs	r0, #16
 8005d9e:	f7ff fe1b 	bl	80059d8 <malloc>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6270      	str	r0, [r6, #36]	; 0x24
 8005da6:	b928      	cbnz	r0, 8005db4 <__pow5mult+0x40>
 8005da8:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <__pow5mult+0xac>)
 8005daa:	481e      	ldr	r0, [pc, #120]	; (8005e24 <__pow5mult+0xb0>)
 8005dac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005db0:	f000 fbcc 	bl	800654c <__assert_func>
 8005db4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005db8:	6004      	str	r4, [r0, #0]
 8005dba:	60c4      	str	r4, [r0, #12]
 8005dbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005dc4:	b94c      	cbnz	r4, 8005dda <__pow5mult+0x66>
 8005dc6:	f240 2171 	movw	r1, #625	; 0x271
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7ff ff16 	bl	8005bfc <__i2b>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	6003      	str	r3, [r0, #0]
 8005dda:	f04f 0900 	mov.w	r9, #0
 8005dde:	07eb      	lsls	r3, r5, #31
 8005de0:	d50a      	bpl.n	8005df8 <__pow5mult+0x84>
 8005de2:	4639      	mov	r1, r7
 8005de4:	4622      	mov	r2, r4
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7ff ff1e 	bl	8005c28 <__multiply>
 8005dec:	4639      	mov	r1, r7
 8005dee:	4680      	mov	r8, r0
 8005df0:	4630      	mov	r0, r6
 8005df2:	f7ff fe47 	bl	8005a84 <_Bfree>
 8005df6:	4647      	mov	r7, r8
 8005df8:	106d      	asrs	r5, r5, #1
 8005dfa:	d00b      	beq.n	8005e14 <__pow5mult+0xa0>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	b938      	cbnz	r0, 8005e10 <__pow5mult+0x9c>
 8005e00:	4622      	mov	r2, r4
 8005e02:	4621      	mov	r1, r4
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff ff0f 	bl	8005c28 <__multiply>
 8005e0a:	6020      	str	r0, [r4, #0]
 8005e0c:	f8c0 9000 	str.w	r9, [r0]
 8005e10:	4604      	mov	r4, r0
 8005e12:	e7e4      	b.n	8005dde <__pow5mult+0x6a>
 8005e14:	4638      	mov	r0, r7
 8005e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1a:	bf00      	nop
 8005e1c:	08008328 	.word	0x08008328
 8005e20:	08008151 	.word	0x08008151
 8005e24:	080081d8 	.word	0x080081d8

08005e28 <__lshift>:
 8005e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	6849      	ldr	r1, [r1, #4]
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e36:	68a3      	ldr	r3, [r4, #8]
 8005e38:	4607      	mov	r7, r0
 8005e3a:	4691      	mov	r9, r2
 8005e3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e40:	f108 0601 	add.w	r6, r8, #1
 8005e44:	42b3      	cmp	r3, r6
 8005e46:	db0b      	blt.n	8005e60 <__lshift+0x38>
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f7ff fddb 	bl	8005a04 <_Balloc>
 8005e4e:	4605      	mov	r5, r0
 8005e50:	b948      	cbnz	r0, 8005e66 <__lshift+0x3e>
 8005e52:	4602      	mov	r2, r0
 8005e54:	4b28      	ldr	r3, [pc, #160]	; (8005ef8 <__lshift+0xd0>)
 8005e56:	4829      	ldr	r0, [pc, #164]	; (8005efc <__lshift+0xd4>)
 8005e58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e5c:	f000 fb76 	bl	800654c <__assert_func>
 8005e60:	3101      	adds	r1, #1
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	e7ee      	b.n	8005e44 <__lshift+0x1c>
 8005e66:	2300      	movs	r3, #0
 8005e68:	f100 0114 	add.w	r1, r0, #20
 8005e6c:	f100 0210 	add.w	r2, r0, #16
 8005e70:	4618      	mov	r0, r3
 8005e72:	4553      	cmp	r3, sl
 8005e74:	db33      	blt.n	8005ede <__lshift+0xb6>
 8005e76:	6920      	ldr	r0, [r4, #16]
 8005e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e7c:	f104 0314 	add.w	r3, r4, #20
 8005e80:	f019 091f 	ands.w	r9, r9, #31
 8005e84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e8c:	d02b      	beq.n	8005ee6 <__lshift+0xbe>
 8005e8e:	f1c9 0e20 	rsb	lr, r9, #32
 8005e92:	468a      	mov	sl, r1
 8005e94:	2200      	movs	r2, #0
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	fa00 f009 	lsl.w	r0, r0, r9
 8005e9c:	4302      	orrs	r2, r0
 8005e9e:	f84a 2b04 	str.w	r2, [sl], #4
 8005ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea6:	459c      	cmp	ip, r3
 8005ea8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005eac:	d8f3      	bhi.n	8005e96 <__lshift+0x6e>
 8005eae:	ebac 0304 	sub.w	r3, ip, r4
 8005eb2:	3b15      	subs	r3, #21
 8005eb4:	f023 0303 	bic.w	r3, r3, #3
 8005eb8:	3304      	adds	r3, #4
 8005eba:	f104 0015 	add.w	r0, r4, #21
 8005ebe:	4584      	cmp	ip, r0
 8005ec0:	bf38      	it	cc
 8005ec2:	2304      	movcc	r3, #4
 8005ec4:	50ca      	str	r2, [r1, r3]
 8005ec6:	b10a      	cbz	r2, 8005ecc <__lshift+0xa4>
 8005ec8:	f108 0602 	add.w	r6, r8, #2
 8005ecc:	3e01      	subs	r6, #1
 8005ece:	4638      	mov	r0, r7
 8005ed0:	612e      	str	r6, [r5, #16]
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	f7ff fdd6 	bl	8005a84 <_Bfree>
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ede:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	e7c5      	b.n	8005e72 <__lshift+0x4a>
 8005ee6:	3904      	subs	r1, #4
 8005ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eec:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ef0:	459c      	cmp	ip, r3
 8005ef2:	d8f9      	bhi.n	8005ee8 <__lshift+0xc0>
 8005ef4:	e7ea      	b.n	8005ecc <__lshift+0xa4>
 8005ef6:	bf00      	nop
 8005ef8:	080081c7 	.word	0x080081c7
 8005efc:	080081d8 	.word	0x080081d8

08005f00 <__mcmp>:
 8005f00:	b530      	push	{r4, r5, lr}
 8005f02:	6902      	ldr	r2, [r0, #16]
 8005f04:	690c      	ldr	r4, [r1, #16]
 8005f06:	1b12      	subs	r2, r2, r4
 8005f08:	d10e      	bne.n	8005f28 <__mcmp+0x28>
 8005f0a:	f100 0314 	add.w	r3, r0, #20
 8005f0e:	3114      	adds	r1, #20
 8005f10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f20:	42a5      	cmp	r5, r4
 8005f22:	d003      	beq.n	8005f2c <__mcmp+0x2c>
 8005f24:	d305      	bcc.n	8005f32 <__mcmp+0x32>
 8005f26:	2201      	movs	r2, #1
 8005f28:	4610      	mov	r0, r2
 8005f2a:	bd30      	pop	{r4, r5, pc}
 8005f2c:	4283      	cmp	r3, r0
 8005f2e:	d3f3      	bcc.n	8005f18 <__mcmp+0x18>
 8005f30:	e7fa      	b.n	8005f28 <__mcmp+0x28>
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	e7f7      	b.n	8005f28 <__mcmp+0x28>

08005f38 <__mdiff>:
 8005f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	4606      	mov	r6, r0
 8005f40:	4611      	mov	r1, r2
 8005f42:	4620      	mov	r0, r4
 8005f44:	4617      	mov	r7, r2
 8005f46:	f7ff ffdb 	bl	8005f00 <__mcmp>
 8005f4a:	1e05      	subs	r5, r0, #0
 8005f4c:	d110      	bne.n	8005f70 <__mdiff+0x38>
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fd57 	bl	8005a04 <_Balloc>
 8005f56:	b930      	cbnz	r0, 8005f66 <__mdiff+0x2e>
 8005f58:	4b39      	ldr	r3, [pc, #228]	; (8006040 <__mdiff+0x108>)
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	f240 2132 	movw	r1, #562	; 0x232
 8005f60:	4838      	ldr	r0, [pc, #224]	; (8006044 <__mdiff+0x10c>)
 8005f62:	f000 faf3 	bl	800654c <__assert_func>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f70:	bfa4      	itt	ge
 8005f72:	463b      	movge	r3, r7
 8005f74:	4627      	movge	r7, r4
 8005f76:	4630      	mov	r0, r6
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	bfa6      	itte	ge
 8005f7c:	461c      	movge	r4, r3
 8005f7e:	2500      	movge	r5, #0
 8005f80:	2501      	movlt	r5, #1
 8005f82:	f7ff fd3f 	bl	8005a04 <_Balloc>
 8005f86:	b920      	cbnz	r0, 8005f92 <__mdiff+0x5a>
 8005f88:	4b2d      	ldr	r3, [pc, #180]	; (8006040 <__mdiff+0x108>)
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f90:	e7e6      	b.n	8005f60 <__mdiff+0x28>
 8005f92:	693e      	ldr	r6, [r7, #16]
 8005f94:	60c5      	str	r5, [r0, #12]
 8005f96:	6925      	ldr	r5, [r4, #16]
 8005f98:	f107 0114 	add.w	r1, r7, #20
 8005f9c:	f104 0914 	add.w	r9, r4, #20
 8005fa0:	f100 0e14 	add.w	lr, r0, #20
 8005fa4:	f107 0210 	add.w	r2, r7, #16
 8005fa8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005fac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005fb0:	46f2      	mov	sl, lr
 8005fb2:	2700      	movs	r7, #0
 8005fb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005fbc:	fa1f f883 	uxth.w	r8, r3
 8005fc0:	fa17 f78b 	uxtah	r7, r7, fp
 8005fc4:	0c1b      	lsrs	r3, r3, #16
 8005fc6:	eba7 0808 	sub.w	r8, r7, r8
 8005fca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005fce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005fd2:	fa1f f888 	uxth.w	r8, r8
 8005fd6:	141f      	asrs	r7, r3, #16
 8005fd8:	454d      	cmp	r5, r9
 8005fda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005fde:	f84a 3b04 	str.w	r3, [sl], #4
 8005fe2:	d8e7      	bhi.n	8005fb4 <__mdiff+0x7c>
 8005fe4:	1b2b      	subs	r3, r5, r4
 8005fe6:	3b15      	subs	r3, #21
 8005fe8:	f023 0303 	bic.w	r3, r3, #3
 8005fec:	3304      	adds	r3, #4
 8005fee:	3415      	adds	r4, #21
 8005ff0:	42a5      	cmp	r5, r4
 8005ff2:	bf38      	it	cc
 8005ff4:	2304      	movcc	r3, #4
 8005ff6:	4419      	add	r1, r3
 8005ff8:	4473      	add	r3, lr
 8005ffa:	469e      	mov	lr, r3
 8005ffc:	460d      	mov	r5, r1
 8005ffe:	4565      	cmp	r5, ip
 8006000:	d30e      	bcc.n	8006020 <__mdiff+0xe8>
 8006002:	f10c 0203 	add.w	r2, ip, #3
 8006006:	1a52      	subs	r2, r2, r1
 8006008:	f022 0203 	bic.w	r2, r2, #3
 800600c:	3903      	subs	r1, #3
 800600e:	458c      	cmp	ip, r1
 8006010:	bf38      	it	cc
 8006012:	2200      	movcc	r2, #0
 8006014:	441a      	add	r2, r3
 8006016:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800601a:	b17b      	cbz	r3, 800603c <__mdiff+0x104>
 800601c:	6106      	str	r6, [r0, #16]
 800601e:	e7a5      	b.n	8005f6c <__mdiff+0x34>
 8006020:	f855 8b04 	ldr.w	r8, [r5], #4
 8006024:	fa17 f488 	uxtah	r4, r7, r8
 8006028:	1422      	asrs	r2, r4, #16
 800602a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800602e:	b2a4      	uxth	r4, r4
 8006030:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006034:	f84e 4b04 	str.w	r4, [lr], #4
 8006038:	1417      	asrs	r7, r2, #16
 800603a:	e7e0      	b.n	8005ffe <__mdiff+0xc6>
 800603c:	3e01      	subs	r6, #1
 800603e:	e7ea      	b.n	8006016 <__mdiff+0xde>
 8006040:	080081c7 	.word	0x080081c7
 8006044:	080081d8 	.word	0x080081d8

08006048 <__d2b>:
 8006048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800604c:	4689      	mov	r9, r1
 800604e:	2101      	movs	r1, #1
 8006050:	ec57 6b10 	vmov	r6, r7, d0
 8006054:	4690      	mov	r8, r2
 8006056:	f7ff fcd5 	bl	8005a04 <_Balloc>
 800605a:	4604      	mov	r4, r0
 800605c:	b930      	cbnz	r0, 800606c <__d2b+0x24>
 800605e:	4602      	mov	r2, r0
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <__d2b+0xb0>)
 8006062:	4826      	ldr	r0, [pc, #152]	; (80060fc <__d2b+0xb4>)
 8006064:	f240 310a 	movw	r1, #778	; 0x30a
 8006068:	f000 fa70 	bl	800654c <__assert_func>
 800606c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006074:	bb35      	cbnz	r5, 80060c4 <__d2b+0x7c>
 8006076:	2e00      	cmp	r6, #0
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	d028      	beq.n	80060ce <__d2b+0x86>
 800607c:	4668      	mov	r0, sp
 800607e:	9600      	str	r6, [sp, #0]
 8006080:	f7ff fd8c 	bl	8005b9c <__lo0bits>
 8006084:	9900      	ldr	r1, [sp, #0]
 8006086:	b300      	cbz	r0, 80060ca <__d2b+0x82>
 8006088:	9a01      	ldr	r2, [sp, #4]
 800608a:	f1c0 0320 	rsb	r3, r0, #32
 800608e:	fa02 f303 	lsl.w	r3, r2, r3
 8006092:	430b      	orrs	r3, r1
 8006094:	40c2      	lsrs	r2, r0
 8006096:	6163      	str	r3, [r4, #20]
 8006098:	9201      	str	r2, [sp, #4]
 800609a:	9b01      	ldr	r3, [sp, #4]
 800609c:	61a3      	str	r3, [r4, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf14      	ite	ne
 80060a2:	2202      	movne	r2, #2
 80060a4:	2201      	moveq	r2, #1
 80060a6:	6122      	str	r2, [r4, #16]
 80060a8:	b1d5      	cbz	r5, 80060e0 <__d2b+0x98>
 80060aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80060ae:	4405      	add	r5, r0
 80060b0:	f8c9 5000 	str.w	r5, [r9]
 80060b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060b8:	f8c8 0000 	str.w	r0, [r8]
 80060bc:	4620      	mov	r0, r4
 80060be:	b003      	add	sp, #12
 80060c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060c8:	e7d5      	b.n	8006076 <__d2b+0x2e>
 80060ca:	6161      	str	r1, [r4, #20]
 80060cc:	e7e5      	b.n	800609a <__d2b+0x52>
 80060ce:	a801      	add	r0, sp, #4
 80060d0:	f7ff fd64 	bl	8005b9c <__lo0bits>
 80060d4:	9b01      	ldr	r3, [sp, #4]
 80060d6:	6163      	str	r3, [r4, #20]
 80060d8:	2201      	movs	r2, #1
 80060da:	6122      	str	r2, [r4, #16]
 80060dc:	3020      	adds	r0, #32
 80060de:	e7e3      	b.n	80060a8 <__d2b+0x60>
 80060e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060e8:	f8c9 0000 	str.w	r0, [r9]
 80060ec:	6918      	ldr	r0, [r3, #16]
 80060ee:	f7ff fd35 	bl	8005b5c <__hi0bits>
 80060f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80060f6:	e7df      	b.n	80060b8 <__d2b+0x70>
 80060f8:	080081c7 	.word	0x080081c7
 80060fc:	080081d8 	.word	0x080081d8

08006100 <_calloc_r>:
 8006100:	b513      	push	{r0, r1, r4, lr}
 8006102:	434a      	muls	r2, r1
 8006104:	4611      	mov	r1, r2
 8006106:	9201      	str	r2, [sp, #4]
 8006108:	f000 f85a 	bl	80061c0 <_malloc_r>
 800610c:	4604      	mov	r4, r0
 800610e:	b118      	cbz	r0, 8006118 <_calloc_r+0x18>
 8006110:	9a01      	ldr	r2, [sp, #4]
 8006112:	2100      	movs	r1, #0
 8006114:	f7fe f950 	bl	80043b8 <memset>
 8006118:	4620      	mov	r0, r4
 800611a:	b002      	add	sp, #8
 800611c:	bd10      	pop	{r4, pc}
	...

08006120 <_free_r>:
 8006120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006122:	2900      	cmp	r1, #0
 8006124:	d048      	beq.n	80061b8 <_free_r+0x98>
 8006126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612a:	9001      	str	r0, [sp, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f1a1 0404 	sub.w	r4, r1, #4
 8006132:	bfb8      	it	lt
 8006134:	18e4      	addlt	r4, r4, r3
 8006136:	f000 fa65 	bl	8006604 <__malloc_lock>
 800613a:	4a20      	ldr	r2, [pc, #128]	; (80061bc <_free_r+0x9c>)
 800613c:	9801      	ldr	r0, [sp, #4]
 800613e:	6813      	ldr	r3, [r2, #0]
 8006140:	4615      	mov	r5, r2
 8006142:	b933      	cbnz	r3, 8006152 <_free_r+0x32>
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	6014      	str	r4, [r2, #0]
 8006148:	b003      	add	sp, #12
 800614a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800614e:	f000 ba5f 	b.w	8006610 <__malloc_unlock>
 8006152:	42a3      	cmp	r3, r4
 8006154:	d90b      	bls.n	800616e <_free_r+0x4e>
 8006156:	6821      	ldr	r1, [r4, #0]
 8006158:	1862      	adds	r2, r4, r1
 800615a:	4293      	cmp	r3, r2
 800615c:	bf04      	itt	eq
 800615e:	681a      	ldreq	r2, [r3, #0]
 8006160:	685b      	ldreq	r3, [r3, #4]
 8006162:	6063      	str	r3, [r4, #4]
 8006164:	bf04      	itt	eq
 8006166:	1852      	addeq	r2, r2, r1
 8006168:	6022      	streq	r2, [r4, #0]
 800616a:	602c      	str	r4, [r5, #0]
 800616c:	e7ec      	b.n	8006148 <_free_r+0x28>
 800616e:	461a      	mov	r2, r3
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	b10b      	cbz	r3, 8006178 <_free_r+0x58>
 8006174:	42a3      	cmp	r3, r4
 8006176:	d9fa      	bls.n	800616e <_free_r+0x4e>
 8006178:	6811      	ldr	r1, [r2, #0]
 800617a:	1855      	adds	r5, r2, r1
 800617c:	42a5      	cmp	r5, r4
 800617e:	d10b      	bne.n	8006198 <_free_r+0x78>
 8006180:	6824      	ldr	r4, [r4, #0]
 8006182:	4421      	add	r1, r4
 8006184:	1854      	adds	r4, r2, r1
 8006186:	42a3      	cmp	r3, r4
 8006188:	6011      	str	r1, [r2, #0]
 800618a:	d1dd      	bne.n	8006148 <_free_r+0x28>
 800618c:	681c      	ldr	r4, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	6053      	str	r3, [r2, #4]
 8006192:	4421      	add	r1, r4
 8006194:	6011      	str	r1, [r2, #0]
 8006196:	e7d7      	b.n	8006148 <_free_r+0x28>
 8006198:	d902      	bls.n	80061a0 <_free_r+0x80>
 800619a:	230c      	movs	r3, #12
 800619c:	6003      	str	r3, [r0, #0]
 800619e:	e7d3      	b.n	8006148 <_free_r+0x28>
 80061a0:	6825      	ldr	r5, [r4, #0]
 80061a2:	1961      	adds	r1, r4, r5
 80061a4:	428b      	cmp	r3, r1
 80061a6:	bf04      	itt	eq
 80061a8:	6819      	ldreq	r1, [r3, #0]
 80061aa:	685b      	ldreq	r3, [r3, #4]
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	bf04      	itt	eq
 80061b0:	1949      	addeq	r1, r1, r5
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	6054      	str	r4, [r2, #4]
 80061b6:	e7c7      	b.n	8006148 <_free_r+0x28>
 80061b8:	b003      	add	sp, #12
 80061ba:	bd30      	pop	{r4, r5, pc}
 80061bc:	20000224 	.word	0x20000224

080061c0 <_malloc_r>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	1ccd      	adds	r5, r1, #3
 80061c4:	f025 0503 	bic.w	r5, r5, #3
 80061c8:	3508      	adds	r5, #8
 80061ca:	2d0c      	cmp	r5, #12
 80061cc:	bf38      	it	cc
 80061ce:	250c      	movcc	r5, #12
 80061d0:	2d00      	cmp	r5, #0
 80061d2:	4606      	mov	r6, r0
 80061d4:	db01      	blt.n	80061da <_malloc_r+0x1a>
 80061d6:	42a9      	cmp	r1, r5
 80061d8:	d903      	bls.n	80061e2 <_malloc_r+0x22>
 80061da:	230c      	movs	r3, #12
 80061dc:	6033      	str	r3, [r6, #0]
 80061de:	2000      	movs	r0, #0
 80061e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e2:	f000 fa0f 	bl	8006604 <__malloc_lock>
 80061e6:	4921      	ldr	r1, [pc, #132]	; (800626c <_malloc_r+0xac>)
 80061e8:	680a      	ldr	r2, [r1, #0]
 80061ea:	4614      	mov	r4, r2
 80061ec:	b99c      	cbnz	r4, 8006216 <_malloc_r+0x56>
 80061ee:	4f20      	ldr	r7, [pc, #128]	; (8006270 <_malloc_r+0xb0>)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	b923      	cbnz	r3, 80061fe <_malloc_r+0x3e>
 80061f4:	4621      	mov	r1, r4
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 f998 	bl	800652c <_sbrk_r>
 80061fc:	6038      	str	r0, [r7, #0]
 80061fe:	4629      	mov	r1, r5
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f993 	bl	800652c <_sbrk_r>
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	d123      	bne.n	8006252 <_malloc_r+0x92>
 800620a:	230c      	movs	r3, #12
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	4630      	mov	r0, r6
 8006210:	f000 f9fe 	bl	8006610 <__malloc_unlock>
 8006214:	e7e3      	b.n	80061de <_malloc_r+0x1e>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	1b5b      	subs	r3, r3, r5
 800621a:	d417      	bmi.n	800624c <_malloc_r+0x8c>
 800621c:	2b0b      	cmp	r3, #11
 800621e:	d903      	bls.n	8006228 <_malloc_r+0x68>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	441c      	add	r4, r3
 8006224:	6025      	str	r5, [r4, #0]
 8006226:	e004      	b.n	8006232 <_malloc_r+0x72>
 8006228:	6863      	ldr	r3, [r4, #4]
 800622a:	42a2      	cmp	r2, r4
 800622c:	bf0c      	ite	eq
 800622e:	600b      	streq	r3, [r1, #0]
 8006230:	6053      	strne	r3, [r2, #4]
 8006232:	4630      	mov	r0, r6
 8006234:	f000 f9ec 	bl	8006610 <__malloc_unlock>
 8006238:	f104 000b 	add.w	r0, r4, #11
 800623c:	1d23      	adds	r3, r4, #4
 800623e:	f020 0007 	bic.w	r0, r0, #7
 8006242:	1ac2      	subs	r2, r0, r3
 8006244:	d0cc      	beq.n	80061e0 <_malloc_r+0x20>
 8006246:	1a1b      	subs	r3, r3, r0
 8006248:	50a3      	str	r3, [r4, r2]
 800624a:	e7c9      	b.n	80061e0 <_malloc_r+0x20>
 800624c:	4622      	mov	r2, r4
 800624e:	6864      	ldr	r4, [r4, #4]
 8006250:	e7cc      	b.n	80061ec <_malloc_r+0x2c>
 8006252:	1cc4      	adds	r4, r0, #3
 8006254:	f024 0403 	bic.w	r4, r4, #3
 8006258:	42a0      	cmp	r0, r4
 800625a:	d0e3      	beq.n	8006224 <_malloc_r+0x64>
 800625c:	1a21      	subs	r1, r4, r0
 800625e:	4630      	mov	r0, r6
 8006260:	f000 f964 	bl	800652c <_sbrk_r>
 8006264:	3001      	adds	r0, #1
 8006266:	d1dd      	bne.n	8006224 <_malloc_r+0x64>
 8006268:	e7cf      	b.n	800620a <_malloc_r+0x4a>
 800626a:	bf00      	nop
 800626c:	20000224 	.word	0x20000224
 8006270:	20000228 	.word	0x20000228

08006274 <__ssputs_r>:
 8006274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	688e      	ldr	r6, [r1, #8]
 800627a:	429e      	cmp	r6, r3
 800627c:	4682      	mov	sl, r0
 800627e:	460c      	mov	r4, r1
 8006280:	4690      	mov	r8, r2
 8006282:	461f      	mov	r7, r3
 8006284:	d838      	bhi.n	80062f8 <__ssputs_r+0x84>
 8006286:	898a      	ldrh	r2, [r1, #12]
 8006288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800628c:	d032      	beq.n	80062f4 <__ssputs_r+0x80>
 800628e:	6825      	ldr	r5, [r4, #0]
 8006290:	6909      	ldr	r1, [r1, #16]
 8006292:	eba5 0901 	sub.w	r9, r5, r1
 8006296:	6965      	ldr	r5, [r4, #20]
 8006298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800629c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a0:	3301      	adds	r3, #1
 80062a2:	444b      	add	r3, r9
 80062a4:	106d      	asrs	r5, r5, #1
 80062a6:	429d      	cmp	r5, r3
 80062a8:	bf38      	it	cc
 80062aa:	461d      	movcc	r5, r3
 80062ac:	0553      	lsls	r3, r2, #21
 80062ae:	d531      	bpl.n	8006314 <__ssputs_r+0xa0>
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7ff ff85 	bl	80061c0 <_malloc_r>
 80062b6:	4606      	mov	r6, r0
 80062b8:	b950      	cbnz	r0, 80062d0 <__ssputs_r+0x5c>
 80062ba:	230c      	movs	r3, #12
 80062bc:	f8ca 3000 	str.w	r3, [sl]
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d0:	6921      	ldr	r1, [r4, #16]
 80062d2:	464a      	mov	r2, r9
 80062d4:	f7ff fb88 	bl	80059e8 <memcpy>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	6126      	str	r6, [r4, #16]
 80062e6:	6165      	str	r5, [r4, #20]
 80062e8:	444e      	add	r6, r9
 80062ea:	eba5 0509 	sub.w	r5, r5, r9
 80062ee:	6026      	str	r6, [r4, #0]
 80062f0:	60a5      	str	r5, [r4, #8]
 80062f2:	463e      	mov	r6, r7
 80062f4:	42be      	cmp	r6, r7
 80062f6:	d900      	bls.n	80062fa <__ssputs_r+0x86>
 80062f8:	463e      	mov	r6, r7
 80062fa:	4632      	mov	r2, r6
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	4641      	mov	r1, r8
 8006300:	f000 f966 	bl	80065d0 <memmove>
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	1b9b      	subs	r3, r3, r6
 800630a:	4432      	add	r2, r6
 800630c:	60a3      	str	r3, [r4, #8]
 800630e:	6022      	str	r2, [r4, #0]
 8006310:	2000      	movs	r0, #0
 8006312:	e7db      	b.n	80062cc <__ssputs_r+0x58>
 8006314:	462a      	mov	r2, r5
 8006316:	f000 f981 	bl	800661c <_realloc_r>
 800631a:	4606      	mov	r6, r0
 800631c:	2800      	cmp	r0, #0
 800631e:	d1e1      	bne.n	80062e4 <__ssputs_r+0x70>
 8006320:	6921      	ldr	r1, [r4, #16]
 8006322:	4650      	mov	r0, sl
 8006324:	f7ff fefc 	bl	8006120 <_free_r>
 8006328:	e7c7      	b.n	80062ba <__ssputs_r+0x46>
	...

0800632c <_svfiprintf_r>:
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	4698      	mov	r8, r3
 8006332:	898b      	ldrh	r3, [r1, #12]
 8006334:	061b      	lsls	r3, r3, #24
 8006336:	b09d      	sub	sp, #116	; 0x74
 8006338:	4607      	mov	r7, r0
 800633a:	460d      	mov	r5, r1
 800633c:	4614      	mov	r4, r2
 800633e:	d50e      	bpl.n	800635e <_svfiprintf_r+0x32>
 8006340:	690b      	ldr	r3, [r1, #16]
 8006342:	b963      	cbnz	r3, 800635e <_svfiprintf_r+0x32>
 8006344:	2140      	movs	r1, #64	; 0x40
 8006346:	f7ff ff3b 	bl	80061c0 <_malloc_r>
 800634a:	6028      	str	r0, [r5, #0]
 800634c:	6128      	str	r0, [r5, #16]
 800634e:	b920      	cbnz	r0, 800635a <_svfiprintf_r+0x2e>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	e0d1      	b.n	80064fe <_svfiprintf_r+0x1d2>
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	616b      	str	r3, [r5, #20]
 800635e:	2300      	movs	r3, #0
 8006360:	9309      	str	r3, [sp, #36]	; 0x24
 8006362:	2320      	movs	r3, #32
 8006364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006368:	f8cd 800c 	str.w	r8, [sp, #12]
 800636c:	2330      	movs	r3, #48	; 0x30
 800636e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006518 <_svfiprintf_r+0x1ec>
 8006372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006376:	f04f 0901 	mov.w	r9, #1
 800637a:	4623      	mov	r3, r4
 800637c:	469a      	mov	sl, r3
 800637e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006382:	b10a      	cbz	r2, 8006388 <_svfiprintf_r+0x5c>
 8006384:	2a25      	cmp	r2, #37	; 0x25
 8006386:	d1f9      	bne.n	800637c <_svfiprintf_r+0x50>
 8006388:	ebba 0b04 	subs.w	fp, sl, r4
 800638c:	d00b      	beq.n	80063a6 <_svfiprintf_r+0x7a>
 800638e:	465b      	mov	r3, fp
 8006390:	4622      	mov	r2, r4
 8006392:	4629      	mov	r1, r5
 8006394:	4638      	mov	r0, r7
 8006396:	f7ff ff6d 	bl	8006274 <__ssputs_r>
 800639a:	3001      	adds	r0, #1
 800639c:	f000 80aa 	beq.w	80064f4 <_svfiprintf_r+0x1c8>
 80063a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a2:	445a      	add	r2, fp
 80063a4:	9209      	str	r2, [sp, #36]	; 0x24
 80063a6:	f89a 3000 	ldrb.w	r3, [sl]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80a2 	beq.w	80064f4 <_svfiprintf_r+0x1c8>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ba:	f10a 0a01 	add.w	sl, sl, #1
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	9307      	str	r3, [sp, #28]
 80063c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c6:	931a      	str	r3, [sp, #104]	; 0x68
 80063c8:	4654      	mov	r4, sl
 80063ca:	2205      	movs	r2, #5
 80063cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d0:	4851      	ldr	r0, [pc, #324]	; (8006518 <_svfiprintf_r+0x1ec>)
 80063d2:	f7f9 ff05 	bl	80001e0 <memchr>
 80063d6:	9a04      	ldr	r2, [sp, #16]
 80063d8:	b9d8      	cbnz	r0, 8006412 <_svfiprintf_r+0xe6>
 80063da:	06d0      	lsls	r0, r2, #27
 80063dc:	bf44      	itt	mi
 80063de:	2320      	movmi	r3, #32
 80063e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e4:	0711      	lsls	r1, r2, #28
 80063e6:	bf44      	itt	mi
 80063e8:	232b      	movmi	r3, #43	; 0x2b
 80063ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ee:	f89a 3000 	ldrb.w	r3, [sl]
 80063f2:	2b2a      	cmp	r3, #42	; 0x2a
 80063f4:	d015      	beq.n	8006422 <_svfiprintf_r+0xf6>
 80063f6:	9a07      	ldr	r2, [sp, #28]
 80063f8:	4654      	mov	r4, sl
 80063fa:	2000      	movs	r0, #0
 80063fc:	f04f 0c0a 	mov.w	ip, #10
 8006400:	4621      	mov	r1, r4
 8006402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006406:	3b30      	subs	r3, #48	; 0x30
 8006408:	2b09      	cmp	r3, #9
 800640a:	d94e      	bls.n	80064aa <_svfiprintf_r+0x17e>
 800640c:	b1b0      	cbz	r0, 800643c <_svfiprintf_r+0x110>
 800640e:	9207      	str	r2, [sp, #28]
 8006410:	e014      	b.n	800643c <_svfiprintf_r+0x110>
 8006412:	eba0 0308 	sub.w	r3, r0, r8
 8006416:	fa09 f303 	lsl.w	r3, r9, r3
 800641a:	4313      	orrs	r3, r2
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	46a2      	mov	sl, r4
 8006420:	e7d2      	b.n	80063c8 <_svfiprintf_r+0x9c>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9103      	str	r1, [sp, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfbb      	ittet	lt
 800642e:	425b      	neglt	r3, r3
 8006430:	f042 0202 	orrlt.w	r2, r2, #2
 8006434:	9307      	strge	r3, [sp, #28]
 8006436:	9307      	strlt	r3, [sp, #28]
 8006438:	bfb8      	it	lt
 800643a:	9204      	strlt	r2, [sp, #16]
 800643c:	7823      	ldrb	r3, [r4, #0]
 800643e:	2b2e      	cmp	r3, #46	; 0x2e
 8006440:	d10c      	bne.n	800645c <_svfiprintf_r+0x130>
 8006442:	7863      	ldrb	r3, [r4, #1]
 8006444:	2b2a      	cmp	r3, #42	; 0x2a
 8006446:	d135      	bne.n	80064b4 <_svfiprintf_r+0x188>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	9203      	str	r2, [sp, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	bfb8      	it	lt
 8006454:	f04f 33ff 	movlt.w	r3, #4294967295
 8006458:	3402      	adds	r4, #2
 800645a:	9305      	str	r3, [sp, #20]
 800645c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006528 <_svfiprintf_r+0x1fc>
 8006460:	7821      	ldrb	r1, [r4, #0]
 8006462:	2203      	movs	r2, #3
 8006464:	4650      	mov	r0, sl
 8006466:	f7f9 febb 	bl	80001e0 <memchr>
 800646a:	b140      	cbz	r0, 800647e <_svfiprintf_r+0x152>
 800646c:	2340      	movs	r3, #64	; 0x40
 800646e:	eba0 000a 	sub.w	r0, r0, sl
 8006472:	fa03 f000 	lsl.w	r0, r3, r0
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	4303      	orrs	r3, r0
 800647a:	3401      	adds	r4, #1
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006482:	4826      	ldr	r0, [pc, #152]	; (800651c <_svfiprintf_r+0x1f0>)
 8006484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006488:	2206      	movs	r2, #6
 800648a:	f7f9 fea9 	bl	80001e0 <memchr>
 800648e:	2800      	cmp	r0, #0
 8006490:	d038      	beq.n	8006504 <_svfiprintf_r+0x1d8>
 8006492:	4b23      	ldr	r3, [pc, #140]	; (8006520 <_svfiprintf_r+0x1f4>)
 8006494:	bb1b      	cbnz	r3, 80064de <_svfiprintf_r+0x1b2>
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	3307      	adds	r3, #7
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	3308      	adds	r3, #8
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a4:	4433      	add	r3, r6
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	e767      	b.n	800637a <_svfiprintf_r+0x4e>
 80064aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ae:	460c      	mov	r4, r1
 80064b0:	2001      	movs	r0, #1
 80064b2:	e7a5      	b.n	8006400 <_svfiprintf_r+0xd4>
 80064b4:	2300      	movs	r3, #0
 80064b6:	3401      	adds	r4, #1
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	4619      	mov	r1, r3
 80064bc:	f04f 0c0a 	mov.w	ip, #10
 80064c0:	4620      	mov	r0, r4
 80064c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c6:	3a30      	subs	r2, #48	; 0x30
 80064c8:	2a09      	cmp	r2, #9
 80064ca:	d903      	bls.n	80064d4 <_svfiprintf_r+0x1a8>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0c5      	beq.n	800645c <_svfiprintf_r+0x130>
 80064d0:	9105      	str	r1, [sp, #20]
 80064d2:	e7c3      	b.n	800645c <_svfiprintf_r+0x130>
 80064d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d8:	4604      	mov	r4, r0
 80064da:	2301      	movs	r3, #1
 80064dc:	e7f0      	b.n	80064c0 <_svfiprintf_r+0x194>
 80064de:	ab03      	add	r3, sp, #12
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	462a      	mov	r2, r5
 80064e4:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <_svfiprintf_r+0x1f8>)
 80064e6:	a904      	add	r1, sp, #16
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7fe f80d 	bl	8004508 <_printf_float>
 80064ee:	1c42      	adds	r2, r0, #1
 80064f0:	4606      	mov	r6, r0
 80064f2:	d1d6      	bne.n	80064a2 <_svfiprintf_r+0x176>
 80064f4:	89ab      	ldrh	r3, [r5, #12]
 80064f6:	065b      	lsls	r3, r3, #25
 80064f8:	f53f af2c 	bmi.w	8006354 <_svfiprintf_r+0x28>
 80064fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fe:	b01d      	add	sp, #116	; 0x74
 8006500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006504:	ab03      	add	r3, sp, #12
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	462a      	mov	r2, r5
 800650a:	4b06      	ldr	r3, [pc, #24]	; (8006524 <_svfiprintf_r+0x1f8>)
 800650c:	a904      	add	r1, sp, #16
 800650e:	4638      	mov	r0, r7
 8006510:	f7fe fa9e 	bl	8004a50 <_printf_i>
 8006514:	e7eb      	b.n	80064ee <_svfiprintf_r+0x1c2>
 8006516:	bf00      	nop
 8006518:	08008334 	.word	0x08008334
 800651c:	0800833e 	.word	0x0800833e
 8006520:	08004509 	.word	0x08004509
 8006524:	08006275 	.word	0x08006275
 8006528:	0800833a 	.word	0x0800833a

0800652c <_sbrk_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4d06      	ldr	r5, [pc, #24]	; (8006548 <_sbrk_r+0x1c>)
 8006530:	2300      	movs	r3, #0
 8006532:	4604      	mov	r4, r0
 8006534:	4608      	mov	r0, r1
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	f7fc f9b8 	bl	80028ac <_sbrk>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_sbrk_r+0x1a>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_sbrk_r+0x1a>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	20000278 	.word	0x20000278

0800654c <__assert_func>:
 800654c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800654e:	4614      	mov	r4, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <__assert_func+0x2c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4605      	mov	r5, r0
 8006558:	68d8      	ldr	r0, [r3, #12]
 800655a:	b14c      	cbz	r4, 8006570 <__assert_func+0x24>
 800655c:	4b07      	ldr	r3, [pc, #28]	; (800657c <__assert_func+0x30>)
 800655e:	9100      	str	r1, [sp, #0]
 8006560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006564:	4906      	ldr	r1, [pc, #24]	; (8006580 <__assert_func+0x34>)
 8006566:	462b      	mov	r3, r5
 8006568:	f000 f80e 	bl	8006588 <fiprintf>
 800656c:	f000 faa4 	bl	8006ab8 <abort>
 8006570:	4b04      	ldr	r3, [pc, #16]	; (8006584 <__assert_func+0x38>)
 8006572:	461c      	mov	r4, r3
 8006574:	e7f3      	b.n	800655e <__assert_func+0x12>
 8006576:	bf00      	nop
 8006578:	2000000c 	.word	0x2000000c
 800657c:	08008345 	.word	0x08008345
 8006580:	08008352 	.word	0x08008352
 8006584:	08008380 	.word	0x08008380

08006588 <fiprintf>:
 8006588:	b40e      	push	{r1, r2, r3}
 800658a:	b503      	push	{r0, r1, lr}
 800658c:	4601      	mov	r1, r0
 800658e:	ab03      	add	r3, sp, #12
 8006590:	4805      	ldr	r0, [pc, #20]	; (80065a8 <fiprintf+0x20>)
 8006592:	f853 2b04 	ldr.w	r2, [r3], #4
 8006596:	6800      	ldr	r0, [r0, #0]
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	f000 f88f 	bl	80066bc <_vfiprintf_r>
 800659e:	b002      	add	sp, #8
 80065a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a4:	b003      	add	sp, #12
 80065a6:	4770      	bx	lr
 80065a8:	2000000c 	.word	0x2000000c

080065ac <__ascii_mbtowc>:
 80065ac:	b082      	sub	sp, #8
 80065ae:	b901      	cbnz	r1, 80065b2 <__ascii_mbtowc+0x6>
 80065b0:	a901      	add	r1, sp, #4
 80065b2:	b142      	cbz	r2, 80065c6 <__ascii_mbtowc+0x1a>
 80065b4:	b14b      	cbz	r3, 80065ca <__ascii_mbtowc+0x1e>
 80065b6:	7813      	ldrb	r3, [r2, #0]
 80065b8:	600b      	str	r3, [r1, #0]
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	1e10      	subs	r0, r2, #0
 80065be:	bf18      	it	ne
 80065c0:	2001      	movne	r0, #1
 80065c2:	b002      	add	sp, #8
 80065c4:	4770      	bx	lr
 80065c6:	4610      	mov	r0, r2
 80065c8:	e7fb      	b.n	80065c2 <__ascii_mbtowc+0x16>
 80065ca:	f06f 0001 	mvn.w	r0, #1
 80065ce:	e7f8      	b.n	80065c2 <__ascii_mbtowc+0x16>

080065d0 <memmove>:
 80065d0:	4288      	cmp	r0, r1
 80065d2:	b510      	push	{r4, lr}
 80065d4:	eb01 0402 	add.w	r4, r1, r2
 80065d8:	d902      	bls.n	80065e0 <memmove+0x10>
 80065da:	4284      	cmp	r4, r0
 80065dc:	4623      	mov	r3, r4
 80065de:	d807      	bhi.n	80065f0 <memmove+0x20>
 80065e0:	1e43      	subs	r3, r0, #1
 80065e2:	42a1      	cmp	r1, r4
 80065e4:	d008      	beq.n	80065f8 <memmove+0x28>
 80065e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ee:	e7f8      	b.n	80065e2 <memmove+0x12>
 80065f0:	4402      	add	r2, r0
 80065f2:	4601      	mov	r1, r0
 80065f4:	428a      	cmp	r2, r1
 80065f6:	d100      	bne.n	80065fa <memmove+0x2a>
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006602:	e7f7      	b.n	80065f4 <memmove+0x24>

08006604 <__malloc_lock>:
 8006604:	4801      	ldr	r0, [pc, #4]	; (800660c <__malloc_lock+0x8>)
 8006606:	f000 bc17 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 800660a:	bf00      	nop
 800660c:	20000280 	.word	0x20000280

08006610 <__malloc_unlock>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__malloc_unlock+0x8>)
 8006612:	f000 bc12 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006616:	bf00      	nop
 8006618:	20000280 	.word	0x20000280

0800661c <_realloc_r>:
 800661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661e:	4607      	mov	r7, r0
 8006620:	4614      	mov	r4, r2
 8006622:	460e      	mov	r6, r1
 8006624:	b921      	cbnz	r1, 8006630 <_realloc_r+0x14>
 8006626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800662a:	4611      	mov	r1, r2
 800662c:	f7ff bdc8 	b.w	80061c0 <_malloc_r>
 8006630:	b922      	cbnz	r2, 800663c <_realloc_r+0x20>
 8006632:	f7ff fd75 	bl	8006120 <_free_r>
 8006636:	4625      	mov	r5, r4
 8006638:	4628      	mov	r0, r5
 800663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663c:	f000 fc62 	bl	8006f04 <_malloc_usable_size_r>
 8006640:	42a0      	cmp	r0, r4
 8006642:	d20f      	bcs.n	8006664 <_realloc_r+0x48>
 8006644:	4621      	mov	r1, r4
 8006646:	4638      	mov	r0, r7
 8006648:	f7ff fdba 	bl	80061c0 <_malloc_r>
 800664c:	4605      	mov	r5, r0
 800664e:	2800      	cmp	r0, #0
 8006650:	d0f2      	beq.n	8006638 <_realloc_r+0x1c>
 8006652:	4631      	mov	r1, r6
 8006654:	4622      	mov	r2, r4
 8006656:	f7ff f9c7 	bl	80059e8 <memcpy>
 800665a:	4631      	mov	r1, r6
 800665c:	4638      	mov	r0, r7
 800665e:	f7ff fd5f 	bl	8006120 <_free_r>
 8006662:	e7e9      	b.n	8006638 <_realloc_r+0x1c>
 8006664:	4635      	mov	r5, r6
 8006666:	e7e7      	b.n	8006638 <_realloc_r+0x1c>

08006668 <__sfputc_r>:
 8006668:	6893      	ldr	r3, [r2, #8]
 800666a:	3b01      	subs	r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	b410      	push	{r4}
 8006670:	6093      	str	r3, [r2, #8]
 8006672:	da08      	bge.n	8006686 <__sfputc_r+0x1e>
 8006674:	6994      	ldr	r4, [r2, #24]
 8006676:	42a3      	cmp	r3, r4
 8006678:	db01      	blt.n	800667e <__sfputc_r+0x16>
 800667a:	290a      	cmp	r1, #10
 800667c:	d103      	bne.n	8006686 <__sfputc_r+0x1e>
 800667e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006682:	f000 b94b 	b.w	800691c <__swbuf_r>
 8006686:	6813      	ldr	r3, [r2, #0]
 8006688:	1c58      	adds	r0, r3, #1
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	7019      	strb	r1, [r3, #0]
 800668e:	4608      	mov	r0, r1
 8006690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006694:	4770      	bx	lr

08006696 <__sfputs_r>:
 8006696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006698:	4606      	mov	r6, r0
 800669a:	460f      	mov	r7, r1
 800669c:	4614      	mov	r4, r2
 800669e:	18d5      	adds	r5, r2, r3
 80066a0:	42ac      	cmp	r4, r5
 80066a2:	d101      	bne.n	80066a8 <__sfputs_r+0x12>
 80066a4:	2000      	movs	r0, #0
 80066a6:	e007      	b.n	80066b8 <__sfputs_r+0x22>
 80066a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ac:	463a      	mov	r2, r7
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ffda 	bl	8006668 <__sfputc_r>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d1f3      	bne.n	80066a0 <__sfputs_r+0xa>
 80066b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066bc <_vfiprintf_r>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	460d      	mov	r5, r1
 80066c2:	b09d      	sub	sp, #116	; 0x74
 80066c4:	4614      	mov	r4, r2
 80066c6:	4698      	mov	r8, r3
 80066c8:	4606      	mov	r6, r0
 80066ca:	b118      	cbz	r0, 80066d4 <_vfiprintf_r+0x18>
 80066cc:	6983      	ldr	r3, [r0, #24]
 80066ce:	b90b      	cbnz	r3, 80066d4 <_vfiprintf_r+0x18>
 80066d0:	f000 fb14 	bl	8006cfc <__sinit>
 80066d4:	4b89      	ldr	r3, [pc, #548]	; (80068fc <_vfiprintf_r+0x240>)
 80066d6:	429d      	cmp	r5, r3
 80066d8:	d11b      	bne.n	8006712 <_vfiprintf_r+0x56>
 80066da:	6875      	ldr	r5, [r6, #4]
 80066dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066de:	07d9      	lsls	r1, r3, #31
 80066e0:	d405      	bmi.n	80066ee <_vfiprintf_r+0x32>
 80066e2:	89ab      	ldrh	r3, [r5, #12]
 80066e4:	059a      	lsls	r2, r3, #22
 80066e6:	d402      	bmi.n	80066ee <_vfiprintf_r+0x32>
 80066e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ea:	f000 fba5 	bl	8006e38 <__retarget_lock_acquire_recursive>
 80066ee:	89ab      	ldrh	r3, [r5, #12]
 80066f0:	071b      	lsls	r3, r3, #28
 80066f2:	d501      	bpl.n	80066f8 <_vfiprintf_r+0x3c>
 80066f4:	692b      	ldr	r3, [r5, #16]
 80066f6:	b9eb      	cbnz	r3, 8006734 <_vfiprintf_r+0x78>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4630      	mov	r0, r6
 80066fc:	f000 f96e 	bl	80069dc <__swsetup_r>
 8006700:	b1c0      	cbz	r0, 8006734 <_vfiprintf_r+0x78>
 8006702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006704:	07dc      	lsls	r4, r3, #31
 8006706:	d50e      	bpl.n	8006726 <_vfiprintf_r+0x6a>
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	b01d      	add	sp, #116	; 0x74
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	4b7b      	ldr	r3, [pc, #492]	; (8006900 <_vfiprintf_r+0x244>)
 8006714:	429d      	cmp	r5, r3
 8006716:	d101      	bne.n	800671c <_vfiprintf_r+0x60>
 8006718:	68b5      	ldr	r5, [r6, #8]
 800671a:	e7df      	b.n	80066dc <_vfiprintf_r+0x20>
 800671c:	4b79      	ldr	r3, [pc, #484]	; (8006904 <_vfiprintf_r+0x248>)
 800671e:	429d      	cmp	r5, r3
 8006720:	bf08      	it	eq
 8006722:	68f5      	ldreq	r5, [r6, #12]
 8006724:	e7da      	b.n	80066dc <_vfiprintf_r+0x20>
 8006726:	89ab      	ldrh	r3, [r5, #12]
 8006728:	0598      	lsls	r0, r3, #22
 800672a:	d4ed      	bmi.n	8006708 <_vfiprintf_r+0x4c>
 800672c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800672e:	f000 fb84 	bl	8006e3a <__retarget_lock_release_recursive>
 8006732:	e7e9      	b.n	8006708 <_vfiprintf_r+0x4c>
 8006734:	2300      	movs	r3, #0
 8006736:	9309      	str	r3, [sp, #36]	; 0x24
 8006738:	2320      	movs	r3, #32
 800673a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800673e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006742:	2330      	movs	r3, #48	; 0x30
 8006744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006908 <_vfiprintf_r+0x24c>
 8006748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800674c:	f04f 0901 	mov.w	r9, #1
 8006750:	4623      	mov	r3, r4
 8006752:	469a      	mov	sl, r3
 8006754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006758:	b10a      	cbz	r2, 800675e <_vfiprintf_r+0xa2>
 800675a:	2a25      	cmp	r2, #37	; 0x25
 800675c:	d1f9      	bne.n	8006752 <_vfiprintf_r+0x96>
 800675e:	ebba 0b04 	subs.w	fp, sl, r4
 8006762:	d00b      	beq.n	800677c <_vfiprintf_r+0xc0>
 8006764:	465b      	mov	r3, fp
 8006766:	4622      	mov	r2, r4
 8006768:	4629      	mov	r1, r5
 800676a:	4630      	mov	r0, r6
 800676c:	f7ff ff93 	bl	8006696 <__sfputs_r>
 8006770:	3001      	adds	r0, #1
 8006772:	f000 80aa 	beq.w	80068ca <_vfiprintf_r+0x20e>
 8006776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006778:	445a      	add	r2, fp
 800677a:	9209      	str	r2, [sp, #36]	; 0x24
 800677c:	f89a 3000 	ldrb.w	r3, [sl]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80a2 	beq.w	80068ca <_vfiprintf_r+0x20e>
 8006786:	2300      	movs	r3, #0
 8006788:	f04f 32ff 	mov.w	r2, #4294967295
 800678c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006790:	f10a 0a01 	add.w	sl, sl, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	9307      	str	r3, [sp, #28]
 8006798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800679c:	931a      	str	r3, [sp, #104]	; 0x68
 800679e:	4654      	mov	r4, sl
 80067a0:	2205      	movs	r2, #5
 80067a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a6:	4858      	ldr	r0, [pc, #352]	; (8006908 <_vfiprintf_r+0x24c>)
 80067a8:	f7f9 fd1a 	bl	80001e0 <memchr>
 80067ac:	9a04      	ldr	r2, [sp, #16]
 80067ae:	b9d8      	cbnz	r0, 80067e8 <_vfiprintf_r+0x12c>
 80067b0:	06d1      	lsls	r1, r2, #27
 80067b2:	bf44      	itt	mi
 80067b4:	2320      	movmi	r3, #32
 80067b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ba:	0713      	lsls	r3, r2, #28
 80067bc:	bf44      	itt	mi
 80067be:	232b      	movmi	r3, #43	; 0x2b
 80067c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c4:	f89a 3000 	ldrb.w	r3, [sl]
 80067c8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ca:	d015      	beq.n	80067f8 <_vfiprintf_r+0x13c>
 80067cc:	9a07      	ldr	r2, [sp, #28]
 80067ce:	4654      	mov	r4, sl
 80067d0:	2000      	movs	r0, #0
 80067d2:	f04f 0c0a 	mov.w	ip, #10
 80067d6:	4621      	mov	r1, r4
 80067d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067dc:	3b30      	subs	r3, #48	; 0x30
 80067de:	2b09      	cmp	r3, #9
 80067e0:	d94e      	bls.n	8006880 <_vfiprintf_r+0x1c4>
 80067e2:	b1b0      	cbz	r0, 8006812 <_vfiprintf_r+0x156>
 80067e4:	9207      	str	r2, [sp, #28]
 80067e6:	e014      	b.n	8006812 <_vfiprintf_r+0x156>
 80067e8:	eba0 0308 	sub.w	r3, r0, r8
 80067ec:	fa09 f303 	lsl.w	r3, r9, r3
 80067f0:	4313      	orrs	r3, r2
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	46a2      	mov	sl, r4
 80067f6:	e7d2      	b.n	800679e <_vfiprintf_r+0xe2>
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	1d19      	adds	r1, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	9103      	str	r1, [sp, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	bfbb      	ittet	lt
 8006804:	425b      	neglt	r3, r3
 8006806:	f042 0202 	orrlt.w	r2, r2, #2
 800680a:	9307      	strge	r3, [sp, #28]
 800680c:	9307      	strlt	r3, [sp, #28]
 800680e:	bfb8      	it	lt
 8006810:	9204      	strlt	r2, [sp, #16]
 8006812:	7823      	ldrb	r3, [r4, #0]
 8006814:	2b2e      	cmp	r3, #46	; 0x2e
 8006816:	d10c      	bne.n	8006832 <_vfiprintf_r+0x176>
 8006818:	7863      	ldrb	r3, [r4, #1]
 800681a:	2b2a      	cmp	r3, #42	; 0x2a
 800681c:	d135      	bne.n	800688a <_vfiprintf_r+0x1ce>
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	1d1a      	adds	r2, r3, #4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	9203      	str	r2, [sp, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	bfb8      	it	lt
 800682a:	f04f 33ff 	movlt.w	r3, #4294967295
 800682e:	3402      	adds	r4, #2
 8006830:	9305      	str	r3, [sp, #20]
 8006832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006918 <_vfiprintf_r+0x25c>
 8006836:	7821      	ldrb	r1, [r4, #0]
 8006838:	2203      	movs	r2, #3
 800683a:	4650      	mov	r0, sl
 800683c:	f7f9 fcd0 	bl	80001e0 <memchr>
 8006840:	b140      	cbz	r0, 8006854 <_vfiprintf_r+0x198>
 8006842:	2340      	movs	r3, #64	; 0x40
 8006844:	eba0 000a 	sub.w	r0, r0, sl
 8006848:	fa03 f000 	lsl.w	r0, r3, r0
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	4303      	orrs	r3, r0
 8006850:	3401      	adds	r4, #1
 8006852:	9304      	str	r3, [sp, #16]
 8006854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006858:	482c      	ldr	r0, [pc, #176]	; (800690c <_vfiprintf_r+0x250>)
 800685a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800685e:	2206      	movs	r2, #6
 8006860:	f7f9 fcbe 	bl	80001e0 <memchr>
 8006864:	2800      	cmp	r0, #0
 8006866:	d03f      	beq.n	80068e8 <_vfiprintf_r+0x22c>
 8006868:	4b29      	ldr	r3, [pc, #164]	; (8006910 <_vfiprintf_r+0x254>)
 800686a:	bb1b      	cbnz	r3, 80068b4 <_vfiprintf_r+0x1f8>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	3307      	adds	r3, #7
 8006870:	f023 0307 	bic.w	r3, r3, #7
 8006874:	3308      	adds	r3, #8
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687a:	443b      	add	r3, r7
 800687c:	9309      	str	r3, [sp, #36]	; 0x24
 800687e:	e767      	b.n	8006750 <_vfiprintf_r+0x94>
 8006880:	fb0c 3202 	mla	r2, ip, r2, r3
 8006884:	460c      	mov	r4, r1
 8006886:	2001      	movs	r0, #1
 8006888:	e7a5      	b.n	80067d6 <_vfiprintf_r+0x11a>
 800688a:	2300      	movs	r3, #0
 800688c:	3401      	adds	r4, #1
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	4619      	mov	r1, r3
 8006892:	f04f 0c0a 	mov.w	ip, #10
 8006896:	4620      	mov	r0, r4
 8006898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800689c:	3a30      	subs	r2, #48	; 0x30
 800689e:	2a09      	cmp	r2, #9
 80068a0:	d903      	bls.n	80068aa <_vfiprintf_r+0x1ee>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0c5      	beq.n	8006832 <_vfiprintf_r+0x176>
 80068a6:	9105      	str	r1, [sp, #20]
 80068a8:	e7c3      	b.n	8006832 <_vfiprintf_r+0x176>
 80068aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ae:	4604      	mov	r4, r0
 80068b0:	2301      	movs	r3, #1
 80068b2:	e7f0      	b.n	8006896 <_vfiprintf_r+0x1da>
 80068b4:	ab03      	add	r3, sp, #12
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	462a      	mov	r2, r5
 80068ba:	4b16      	ldr	r3, [pc, #88]	; (8006914 <_vfiprintf_r+0x258>)
 80068bc:	a904      	add	r1, sp, #16
 80068be:	4630      	mov	r0, r6
 80068c0:	f7fd fe22 	bl	8004508 <_printf_float>
 80068c4:	4607      	mov	r7, r0
 80068c6:	1c78      	adds	r0, r7, #1
 80068c8:	d1d6      	bne.n	8006878 <_vfiprintf_r+0x1bc>
 80068ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068cc:	07d9      	lsls	r1, r3, #31
 80068ce:	d405      	bmi.n	80068dc <_vfiprintf_r+0x220>
 80068d0:	89ab      	ldrh	r3, [r5, #12]
 80068d2:	059a      	lsls	r2, r3, #22
 80068d4:	d402      	bmi.n	80068dc <_vfiprintf_r+0x220>
 80068d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d8:	f000 faaf 	bl	8006e3a <__retarget_lock_release_recursive>
 80068dc:	89ab      	ldrh	r3, [r5, #12]
 80068de:	065b      	lsls	r3, r3, #25
 80068e0:	f53f af12 	bmi.w	8006708 <_vfiprintf_r+0x4c>
 80068e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e6:	e711      	b.n	800670c <_vfiprintf_r+0x50>
 80068e8:	ab03      	add	r3, sp, #12
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	462a      	mov	r2, r5
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <_vfiprintf_r+0x258>)
 80068f0:	a904      	add	r1, sp, #16
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7fe f8ac 	bl	8004a50 <_printf_i>
 80068f8:	e7e4      	b.n	80068c4 <_vfiprintf_r+0x208>
 80068fa:	bf00      	nop
 80068fc:	080084ac 	.word	0x080084ac
 8006900:	080084cc 	.word	0x080084cc
 8006904:	0800848c 	.word	0x0800848c
 8006908:	08008334 	.word	0x08008334
 800690c:	0800833e 	.word	0x0800833e
 8006910:	08004509 	.word	0x08004509
 8006914:	08006697 	.word	0x08006697
 8006918:	0800833a 	.word	0x0800833a

0800691c <__swbuf_r>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	460e      	mov	r6, r1
 8006920:	4614      	mov	r4, r2
 8006922:	4605      	mov	r5, r0
 8006924:	b118      	cbz	r0, 800692e <__swbuf_r+0x12>
 8006926:	6983      	ldr	r3, [r0, #24]
 8006928:	b90b      	cbnz	r3, 800692e <__swbuf_r+0x12>
 800692a:	f000 f9e7 	bl	8006cfc <__sinit>
 800692e:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <__swbuf_r+0x98>)
 8006930:	429c      	cmp	r4, r3
 8006932:	d12b      	bne.n	800698c <__swbuf_r+0x70>
 8006934:	686c      	ldr	r4, [r5, #4]
 8006936:	69a3      	ldr	r3, [r4, #24]
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	071a      	lsls	r2, r3, #28
 800693e:	d52f      	bpl.n	80069a0 <__swbuf_r+0x84>
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	b36b      	cbz	r3, 80069a0 <__swbuf_r+0x84>
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	6820      	ldr	r0, [r4, #0]
 8006948:	1ac0      	subs	r0, r0, r3
 800694a:	6963      	ldr	r3, [r4, #20]
 800694c:	b2f6      	uxtb	r6, r6
 800694e:	4283      	cmp	r3, r0
 8006950:	4637      	mov	r7, r6
 8006952:	dc04      	bgt.n	800695e <__swbuf_r+0x42>
 8006954:	4621      	mov	r1, r4
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f93c 	bl	8006bd4 <_fflush_r>
 800695c:	bb30      	cbnz	r0, 80069ac <__swbuf_r+0x90>
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	3b01      	subs	r3, #1
 8006962:	60a3      	str	r3, [r4, #8]
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	6022      	str	r2, [r4, #0]
 800696a:	701e      	strb	r6, [r3, #0]
 800696c:	6963      	ldr	r3, [r4, #20]
 800696e:	3001      	adds	r0, #1
 8006970:	4283      	cmp	r3, r0
 8006972:	d004      	beq.n	800697e <__swbuf_r+0x62>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	07db      	lsls	r3, r3, #31
 8006978:	d506      	bpl.n	8006988 <__swbuf_r+0x6c>
 800697a:	2e0a      	cmp	r6, #10
 800697c:	d104      	bne.n	8006988 <__swbuf_r+0x6c>
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f000 f927 	bl	8006bd4 <_fflush_r>
 8006986:	b988      	cbnz	r0, 80069ac <__swbuf_r+0x90>
 8006988:	4638      	mov	r0, r7
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <__swbuf_r+0x9c>)
 800698e:	429c      	cmp	r4, r3
 8006990:	d101      	bne.n	8006996 <__swbuf_r+0x7a>
 8006992:	68ac      	ldr	r4, [r5, #8]
 8006994:	e7cf      	b.n	8006936 <__swbuf_r+0x1a>
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <__swbuf_r+0xa0>)
 8006998:	429c      	cmp	r4, r3
 800699a:	bf08      	it	eq
 800699c:	68ec      	ldreq	r4, [r5, #12]
 800699e:	e7ca      	b.n	8006936 <__swbuf_r+0x1a>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f81a 	bl	80069dc <__swsetup_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0cb      	beq.n	8006944 <__swbuf_r+0x28>
 80069ac:	f04f 37ff 	mov.w	r7, #4294967295
 80069b0:	e7ea      	b.n	8006988 <__swbuf_r+0x6c>
 80069b2:	bf00      	nop
 80069b4:	080084ac 	.word	0x080084ac
 80069b8:	080084cc 	.word	0x080084cc
 80069bc:	0800848c 	.word	0x0800848c

080069c0 <__ascii_wctomb>:
 80069c0:	b149      	cbz	r1, 80069d6 <__ascii_wctomb+0x16>
 80069c2:	2aff      	cmp	r2, #255	; 0xff
 80069c4:	bf85      	ittet	hi
 80069c6:	238a      	movhi	r3, #138	; 0x8a
 80069c8:	6003      	strhi	r3, [r0, #0]
 80069ca:	700a      	strbls	r2, [r1, #0]
 80069cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80069d0:	bf98      	it	ls
 80069d2:	2001      	movls	r0, #1
 80069d4:	4770      	bx	lr
 80069d6:	4608      	mov	r0, r1
 80069d8:	4770      	bx	lr
	...

080069dc <__swsetup_r>:
 80069dc:	4b32      	ldr	r3, [pc, #200]	; (8006aa8 <__swsetup_r+0xcc>)
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	681d      	ldr	r5, [r3, #0]
 80069e2:	4606      	mov	r6, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	b125      	cbz	r5, 80069f2 <__swsetup_r+0x16>
 80069e8:	69ab      	ldr	r3, [r5, #24]
 80069ea:	b913      	cbnz	r3, 80069f2 <__swsetup_r+0x16>
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 f985 	bl	8006cfc <__sinit>
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <__swsetup_r+0xd0>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	d10f      	bne.n	8006a18 <__swsetup_r+0x3c>
 80069f8:	686c      	ldr	r4, [r5, #4]
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a00:	0719      	lsls	r1, r3, #28
 8006a02:	d42c      	bmi.n	8006a5e <__swsetup_r+0x82>
 8006a04:	06dd      	lsls	r5, r3, #27
 8006a06:	d411      	bmi.n	8006a2c <__swsetup_r+0x50>
 8006a08:	2309      	movs	r3, #9
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295
 8006a16:	e03e      	b.n	8006a96 <__swsetup_r+0xba>
 8006a18:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <__swsetup_r+0xd4>)
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	d101      	bne.n	8006a22 <__swsetup_r+0x46>
 8006a1e:	68ac      	ldr	r4, [r5, #8]
 8006a20:	e7eb      	b.n	80069fa <__swsetup_r+0x1e>
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <__swsetup_r+0xd8>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	bf08      	it	eq
 8006a28:	68ec      	ldreq	r4, [r5, #12]
 8006a2a:	e7e6      	b.n	80069fa <__swsetup_r+0x1e>
 8006a2c:	0758      	lsls	r0, r3, #29
 8006a2e:	d512      	bpl.n	8006a56 <__swsetup_r+0x7a>
 8006a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a32:	b141      	cbz	r1, 8006a46 <__swsetup_r+0x6a>
 8006a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	d002      	beq.n	8006a42 <__swsetup_r+0x66>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7ff fb6f 	bl	8006120 <_free_r>
 8006a42:	2300      	movs	r3, #0
 8006a44:	6363      	str	r3, [r4, #52]	; 0x34
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	b94b      	cbnz	r3, 8006a76 <__swsetup_r+0x9a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6c:	d003      	beq.n	8006a76 <__swsetup_r+0x9a>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4630      	mov	r0, r6
 8006a72:	f000 fa07 	bl	8006e84 <__smakebuf_r>
 8006a76:	89a0      	ldrh	r0, [r4, #12]
 8006a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a7c:	f010 0301 	ands.w	r3, r0, #1
 8006a80:	d00a      	beq.n	8006a98 <__swsetup_r+0xbc>
 8006a82:	2300      	movs	r3, #0
 8006a84:	60a3      	str	r3, [r4, #8]
 8006a86:	6963      	ldr	r3, [r4, #20]
 8006a88:	425b      	negs	r3, r3
 8006a8a:	61a3      	str	r3, [r4, #24]
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	b943      	cbnz	r3, 8006aa2 <__swsetup_r+0xc6>
 8006a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a94:	d1ba      	bne.n	8006a0c <__swsetup_r+0x30>
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
 8006a98:	0781      	lsls	r1, r0, #30
 8006a9a:	bf58      	it	pl
 8006a9c:	6963      	ldrpl	r3, [r4, #20]
 8006a9e:	60a3      	str	r3, [r4, #8]
 8006aa0:	e7f4      	b.n	8006a8c <__swsetup_r+0xb0>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e7f7      	b.n	8006a96 <__swsetup_r+0xba>
 8006aa6:	bf00      	nop
 8006aa8:	2000000c 	.word	0x2000000c
 8006aac:	080084ac 	.word	0x080084ac
 8006ab0:	080084cc 	.word	0x080084cc
 8006ab4:	0800848c 	.word	0x0800848c

08006ab8 <abort>:
 8006ab8:	b508      	push	{r3, lr}
 8006aba:	2006      	movs	r0, #6
 8006abc:	f000 fa52 	bl	8006f64 <raise>
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	f7fb fe7b 	bl	80027bc <_exit>
	...

08006ac8 <__sflush_r>:
 8006ac8:	898a      	ldrh	r2, [r1, #12]
 8006aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	4605      	mov	r5, r0
 8006ad0:	0710      	lsls	r0, r2, #28
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	d458      	bmi.n	8006b88 <__sflush_r+0xc0>
 8006ad6:	684b      	ldr	r3, [r1, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc05      	bgt.n	8006ae8 <__sflush_r+0x20>
 8006adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	dc02      	bgt.n	8006ae8 <__sflush_r+0x20>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	d0f9      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006aee:	2300      	movs	r3, #0
 8006af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006af4:	682f      	ldr	r7, [r5, #0]
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	d032      	beq.n	8006b60 <__sflush_r+0x98>
 8006afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	075a      	lsls	r2, r3, #29
 8006b00:	d505      	bpl.n	8006b0e <__sflush_r+0x46>
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	1ac0      	subs	r0, r0, r3
 8006b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b08:	b10b      	cbz	r3, 8006b0e <__sflush_r+0x46>
 8006b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b0c:	1ac0      	subs	r0, r0, r3
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4602      	mov	r2, r0
 8006b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b14:	6a21      	ldr	r1, [r4, #32]
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b0      	blx	r6
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	d106      	bne.n	8006b2e <__sflush_r+0x66>
 8006b20:	6829      	ldr	r1, [r5, #0]
 8006b22:	291d      	cmp	r1, #29
 8006b24:	d82c      	bhi.n	8006b80 <__sflush_r+0xb8>
 8006b26:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <__sflush_r+0x108>)
 8006b28:	40ca      	lsrs	r2, r1
 8006b2a:	07d6      	lsls	r6, r2, #31
 8006b2c:	d528      	bpl.n	8006b80 <__sflush_r+0xb8>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	6062      	str	r2, [r4, #4]
 8006b32:	04d9      	lsls	r1, r3, #19
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	6022      	str	r2, [r4, #0]
 8006b38:	d504      	bpl.n	8006b44 <__sflush_r+0x7c>
 8006b3a:	1c42      	adds	r2, r0, #1
 8006b3c:	d101      	bne.n	8006b42 <__sflush_r+0x7a>
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	b903      	cbnz	r3, 8006b44 <__sflush_r+0x7c>
 8006b42:	6560      	str	r0, [r4, #84]	; 0x54
 8006b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b46:	602f      	str	r7, [r5, #0]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d0ca      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b50:	4299      	cmp	r1, r3
 8006b52:	d002      	beq.n	8006b5a <__sflush_r+0x92>
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff fae3 	bl	8006120 <_free_r>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b5e:	e7c1      	b.n	8006ae4 <__sflush_r+0x1c>
 8006b60:	6a21      	ldr	r1, [r4, #32]
 8006b62:	2301      	movs	r3, #1
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b0      	blx	r6
 8006b68:	1c41      	adds	r1, r0, #1
 8006b6a:	d1c7      	bne.n	8006afc <__sflush_r+0x34>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0c4      	beq.n	8006afc <__sflush_r+0x34>
 8006b72:	2b1d      	cmp	r3, #29
 8006b74:	d001      	beq.n	8006b7a <__sflush_r+0xb2>
 8006b76:	2b16      	cmp	r3, #22
 8006b78:	d101      	bne.n	8006b7e <__sflush_r+0xb6>
 8006b7a:	602f      	str	r7, [r5, #0]
 8006b7c:	e7b1      	b.n	8006ae2 <__sflush_r+0x1a>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	e7ad      	b.n	8006ae4 <__sflush_r+0x1c>
 8006b88:	690f      	ldr	r7, [r1, #16]
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	d0a9      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006b8e:	0793      	lsls	r3, r2, #30
 8006b90:	680e      	ldr	r6, [r1, #0]
 8006b92:	bf08      	it	eq
 8006b94:	694b      	ldreq	r3, [r1, #20]
 8006b96:	600f      	str	r7, [r1, #0]
 8006b98:	bf18      	it	ne
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	eba6 0807 	sub.w	r8, r6, r7
 8006ba0:	608b      	str	r3, [r1, #8]
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	dd9c      	ble.n	8006ae2 <__sflush_r+0x1a>
 8006ba8:	6a21      	ldr	r1, [r4, #32]
 8006baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bac:	4643      	mov	r3, r8
 8006bae:	463a      	mov	r2, r7
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b0      	blx	r6
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	dc06      	bgt.n	8006bc6 <__sflush_r+0xfe>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e78e      	b.n	8006ae4 <__sflush_r+0x1c>
 8006bc6:	4407      	add	r7, r0
 8006bc8:	eba8 0800 	sub.w	r8, r8, r0
 8006bcc:	e7e9      	b.n	8006ba2 <__sflush_r+0xda>
 8006bce:	bf00      	nop
 8006bd0:	20400001 	.word	0x20400001

08006bd4 <_fflush_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	690b      	ldr	r3, [r1, #16]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b913      	cbnz	r3, 8006be4 <_fflush_r+0x10>
 8006bde:	2500      	movs	r5, #0
 8006be0:	4628      	mov	r0, r5
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	b118      	cbz	r0, 8006bee <_fflush_r+0x1a>
 8006be6:	6983      	ldr	r3, [r0, #24]
 8006be8:	b90b      	cbnz	r3, 8006bee <_fflush_r+0x1a>
 8006bea:	f000 f887 	bl	8006cfc <__sinit>
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <_fflush_r+0x6c>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d11b      	bne.n	8006c2c <_fflush_r+0x58>
 8006bf4:	686c      	ldr	r4, [r5, #4]
 8006bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ef      	beq.n	8006bde <_fflush_r+0xa>
 8006bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c00:	07d0      	lsls	r0, r2, #31
 8006c02:	d404      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c04:	0599      	lsls	r1, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0a:	f000 f915 	bl	8006e38 <__retarget_lock_acquire_recursive>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4621      	mov	r1, r4
 8006c12:	f7ff ff59 	bl	8006ac8 <__sflush_r>
 8006c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c18:	07da      	lsls	r2, r3, #31
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	d4e0      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	059b      	lsls	r3, r3, #22
 8006c22:	d4dd      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f000 f908 	bl	8006e3a <__retarget_lock_release_recursive>
 8006c2a:	e7d9      	b.n	8006be0 <_fflush_r+0xc>
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_fflush_r+0x70>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d101      	bne.n	8006c36 <_fflush_r+0x62>
 8006c32:	68ac      	ldr	r4, [r5, #8]
 8006c34:	e7df      	b.n	8006bf6 <_fflush_r+0x22>
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <_fflush_r+0x74>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	bf08      	it	eq
 8006c3c:	68ec      	ldreq	r4, [r5, #12]
 8006c3e:	e7da      	b.n	8006bf6 <_fflush_r+0x22>
 8006c40:	080084ac 	.word	0x080084ac
 8006c44:	080084cc 	.word	0x080084cc
 8006c48:	0800848c 	.word	0x0800848c

08006c4c <std>:
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	e9c0 3300 	strd	r3, r3, [r0]
 8006c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5a:	6083      	str	r3, [r0, #8]
 8006c5c:	8181      	strh	r1, [r0, #12]
 8006c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c60:	81c2      	strh	r2, [r0, #14]
 8006c62:	6183      	str	r3, [r0, #24]
 8006c64:	4619      	mov	r1, r3
 8006c66:	2208      	movs	r2, #8
 8006c68:	305c      	adds	r0, #92	; 0x5c
 8006c6a:	f7fd fba5 	bl	80043b8 <memset>
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x38>)
 8006c70:	6263      	str	r3, [r4, #36]	; 0x24
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <std+0x3c>)
 8006c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x40>)
 8006c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <std+0x44>)
 8006c7c:	6224      	str	r4, [r4, #32]
 8006c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08006f9d 	.word	0x08006f9d
 8006c88:	08006fbf 	.word	0x08006fbf
 8006c8c:	08006ff7 	.word	0x08006ff7
 8006c90:	0800701b 	.word	0x0800701b

08006c94 <_cleanup_r>:
 8006c94:	4901      	ldr	r1, [pc, #4]	; (8006c9c <_cleanup_r+0x8>)
 8006c96:	f000 b8af 	b.w	8006df8 <_fwalk_reent>
 8006c9a:	bf00      	nop
 8006c9c:	08006bd5 	.word	0x08006bd5

08006ca0 <__sfmoreglue>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	1e4a      	subs	r2, r1, #1
 8006ca4:	2568      	movs	r5, #104	; 0x68
 8006ca6:	4355      	muls	r5, r2
 8006ca8:	460e      	mov	r6, r1
 8006caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cae:	f7ff fa87 	bl	80061c0 <_malloc_r>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	b140      	cbz	r0, 8006cc8 <__sfmoreglue+0x28>
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	60a0      	str	r0, [r4, #8]
 8006cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc4:	f7fd fb78 	bl	80043b8 <memset>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	bd70      	pop	{r4, r5, r6, pc}

08006ccc <__sfp_lock_acquire>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__sfp_lock_acquire+0x8>)
 8006cce:	f000 b8b3 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	20000284 	.word	0x20000284

08006cd8 <__sfp_lock_release>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__sfp_lock_release+0x8>)
 8006cda:	f000 b8ae 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20000284 	.word	0x20000284

08006ce4 <__sinit_lock_acquire>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__sinit_lock_acquire+0x8>)
 8006ce6:	f000 b8a7 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	2000027f 	.word	0x2000027f

08006cf0 <__sinit_lock_release>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__sinit_lock_release+0x8>)
 8006cf2:	f000 b8a2 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	2000027f 	.word	0x2000027f

08006cfc <__sinit>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	f7ff fff0 	bl	8006ce4 <__sinit_lock_acquire>
 8006d04:	69a3      	ldr	r3, [r4, #24]
 8006d06:	b11b      	cbz	r3, 8006d10 <__sinit+0x14>
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f7ff bff0 	b.w	8006cf0 <__sinit_lock_release>
 8006d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d14:	6523      	str	r3, [r4, #80]	; 0x50
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <__sinit+0x68>)
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <__sinit+0x6c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	bf04      	itt	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	61a3      	streq	r3, [r4, #24]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f820 	bl	8006d6c <__sfp>
 8006d2c:	6060      	str	r0, [r4, #4]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 f81c 	bl	8006d6c <__sfp>
 8006d34:	60a0      	str	r0, [r4, #8]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 f818 	bl	8006d6c <__sfp>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	60e0      	str	r0, [r4, #12]
 8006d40:	2104      	movs	r1, #4
 8006d42:	6860      	ldr	r0, [r4, #4]
 8006d44:	f7ff ff82 	bl	8006c4c <std>
 8006d48:	68a0      	ldr	r0, [r4, #8]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2109      	movs	r1, #9
 8006d4e:	f7ff ff7d 	bl	8006c4c <std>
 8006d52:	68e0      	ldr	r0, [r4, #12]
 8006d54:	2202      	movs	r2, #2
 8006d56:	2112      	movs	r1, #18
 8006d58:	f7ff ff78 	bl	8006c4c <std>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	61a3      	str	r3, [r4, #24]
 8006d60:	e7d2      	b.n	8006d08 <__sinit+0xc>
 8006d62:	bf00      	nop
 8006d64:	0800810c 	.word	0x0800810c
 8006d68:	08006c95 	.word	0x08006c95

08006d6c <__sfp>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	4607      	mov	r7, r0
 8006d70:	f7ff ffac 	bl	8006ccc <__sfp_lock_acquire>
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <__sfp+0x84>)
 8006d76:	681e      	ldr	r6, [r3, #0]
 8006d78:	69b3      	ldr	r3, [r6, #24]
 8006d7a:	b913      	cbnz	r3, 8006d82 <__sfp+0x16>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ffbd 	bl	8006cfc <__sinit>
 8006d82:	3648      	adds	r6, #72	; 0x48
 8006d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	d503      	bpl.n	8006d94 <__sfp+0x28>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	b30b      	cbz	r3, 8006dd4 <__sfp+0x68>
 8006d90:	6836      	ldr	r6, [r6, #0]
 8006d92:	e7f7      	b.n	8006d84 <__sfp+0x18>
 8006d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d98:	b9d5      	cbnz	r5, 8006dd0 <__sfp+0x64>
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <__sfp+0x88>)
 8006d9c:	60e3      	str	r3, [r4, #12]
 8006d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da2:	6665      	str	r5, [r4, #100]	; 0x64
 8006da4:	f000 f847 	bl	8006e36 <__retarget_lock_init_recursive>
 8006da8:	f7ff ff96 	bl	8006cd8 <__sfp_lock_release>
 8006dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006db4:	6025      	str	r5, [r4, #0]
 8006db6:	61a5      	str	r5, [r4, #24]
 8006db8:	2208      	movs	r2, #8
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc0:	f7fd fafa 	bl	80043b8 <memset>
 8006dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	3468      	adds	r4, #104	; 0x68
 8006dd2:	e7d9      	b.n	8006d88 <__sfp+0x1c>
 8006dd4:	2104      	movs	r1, #4
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff62 	bl	8006ca0 <__sfmoreglue>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1d5      	bne.n	8006d90 <__sfp+0x24>
 8006de4:	f7ff ff78 	bl	8006cd8 <__sfp_lock_release>
 8006de8:	230c      	movs	r3, #12
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	e7ee      	b.n	8006dcc <__sfp+0x60>
 8006dee:	bf00      	nop
 8006df0:	0800810c 	.word	0x0800810c
 8006df4:	ffff0001 	.word	0xffff0001

08006df8 <_fwalk_reent>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	4688      	mov	r8, r1
 8006e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e04:	2700      	movs	r7, #0
 8006e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0e:	d505      	bpl.n	8006e1c <_fwalk_reent+0x24>
 8006e10:	6824      	ldr	r4, [r4, #0]
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d1f7      	bne.n	8006e06 <_fwalk_reent+0xe>
 8006e16:	4638      	mov	r0, r7
 8006e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	89ab      	ldrh	r3, [r5, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d907      	bls.n	8006e32 <_fwalk_reent+0x3a>
 8006e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e26:	3301      	adds	r3, #1
 8006e28:	d003      	beq.n	8006e32 <_fwalk_reent+0x3a>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	47c0      	blx	r8
 8006e30:	4307      	orrs	r7, r0
 8006e32:	3568      	adds	r5, #104	; 0x68
 8006e34:	e7e9      	b.n	8006e0a <_fwalk_reent+0x12>

08006e36 <__retarget_lock_init_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <__retarget_lock_acquire_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_release_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <__swhatbuf_r>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	460e      	mov	r6, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	b096      	sub	sp, #88	; 0x58
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	da07      	bge.n	8006e5e <__swhatbuf_r+0x22>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	89b3      	ldrh	r3, [r6, #12]
 8006e54:	061a      	lsls	r2, r3, #24
 8006e56:	d410      	bmi.n	8006e7a <__swhatbuf_r+0x3e>
 8006e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5c:	e00e      	b.n	8006e7c <__swhatbuf_r+0x40>
 8006e5e:	466a      	mov	r2, sp
 8006e60:	f000 f902 	bl	8007068 <_fstat_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	dbf2      	blt.n	8006e4e <__swhatbuf_r+0x12>
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e72:	425a      	negs	r2, r3
 8006e74:	415a      	adcs	r2, r3
 8006e76:	602a      	str	r2, [r5, #0]
 8006e78:	e7ee      	b.n	8006e58 <__swhatbuf_r+0x1c>
 8006e7a:	2340      	movs	r3, #64	; 0x40
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	b016      	add	sp, #88	; 0x58
 8006e82:	bd70      	pop	{r4, r5, r6, pc}

08006e84 <__smakebuf_r>:
 8006e84:	898b      	ldrh	r3, [r1, #12]
 8006e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e88:	079d      	lsls	r5, r3, #30
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	d507      	bpl.n	8006ea0 <__smakebuf_r+0x1c>
 8006e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	6123      	str	r3, [r4, #16]
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6163      	str	r3, [r4, #20]
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	ab01      	add	r3, sp, #4
 8006ea2:	466a      	mov	r2, sp
 8006ea4:	f7ff ffca 	bl	8006e3c <__swhatbuf_r>
 8006ea8:	9900      	ldr	r1, [sp, #0]
 8006eaa:	4605      	mov	r5, r0
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff f987 	bl	80061c0 <_malloc_r>
 8006eb2:	b948      	cbnz	r0, 8006ec8 <__smakebuf_r+0x44>
 8006eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb8:	059a      	lsls	r2, r3, #22
 8006eba:	d4ef      	bmi.n	8006e9c <__smakebuf_r+0x18>
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	e7e3      	b.n	8006e90 <__smakebuf_r+0xc>
 8006ec8:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <__smakebuf_r+0x7c>)
 8006eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	6020      	str	r0, [r4, #0]
 8006ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	6163      	str	r3, [r4, #20]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	6120      	str	r0, [r4, #16]
 8006ede:	b15b      	cbz	r3, 8006ef8 <__smakebuf_r+0x74>
 8006ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f8d1 	bl	800708c <_isatty_r>
 8006eea:	b128      	cbz	r0, 8006ef8 <__smakebuf_r+0x74>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	89a0      	ldrh	r0, [r4, #12]
 8006efa:	4305      	orrs	r5, r0
 8006efc:	81a5      	strh	r5, [r4, #12]
 8006efe:	e7cd      	b.n	8006e9c <__smakebuf_r+0x18>
 8006f00:	08006c95 	.word	0x08006c95

08006f04 <_malloc_usable_size_r>:
 8006f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f08:	1f18      	subs	r0, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bfbc      	itt	lt
 8006f0e:	580b      	ldrlt	r3, [r1, r0]
 8006f10:	18c0      	addlt	r0, r0, r3
 8006f12:	4770      	bx	lr

08006f14 <_raise_r>:
 8006f14:	291f      	cmp	r1, #31
 8006f16:	b538      	push	{r3, r4, r5, lr}
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	d904      	bls.n	8006f28 <_raise_r+0x14>
 8006f1e:	2316      	movs	r3, #22
 8006f20:	6003      	str	r3, [r0, #0]
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f2a:	b112      	cbz	r2, 8006f32 <_raise_r+0x1e>
 8006f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f30:	b94b      	cbnz	r3, 8006f46 <_raise_r+0x32>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f830 	bl	8006f98 <_getpid_r>
 8006f38:	462a      	mov	r2, r5
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f42:	f000 b817 	b.w	8006f74 <_kill_r>
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d00a      	beq.n	8006f60 <_raise_r+0x4c>
 8006f4a:	1c59      	adds	r1, r3, #1
 8006f4c:	d103      	bne.n	8006f56 <_raise_r+0x42>
 8006f4e:	2316      	movs	r3, #22
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	2001      	movs	r0, #1
 8006f54:	e7e7      	b.n	8006f26 <_raise_r+0x12>
 8006f56:	2400      	movs	r4, #0
 8006f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	4798      	blx	r3
 8006f60:	2000      	movs	r0, #0
 8006f62:	e7e0      	b.n	8006f26 <_raise_r+0x12>

08006f64 <raise>:
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <raise+0xc>)
 8006f66:	4601      	mov	r1, r0
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	f7ff bfd3 	b.w	8006f14 <_raise_r>
 8006f6e:	bf00      	nop
 8006f70:	2000000c 	.word	0x2000000c

08006f74 <_kill_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_kill_r+0x20>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f7fb fc0b 	bl	800279c <_kill>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d102      	bne.n	8006f90 <_kill_r+0x1c>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	b103      	cbz	r3, 8006f90 <_kill_r+0x1c>
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	20000278 	.word	0x20000278

08006f98 <_getpid_r>:
 8006f98:	f7fb bbf8 	b.w	800278c <_getpid>

08006f9c <__sread>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa4:	f000 f894 	bl	80070d0 <_read_r>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	bfab      	itete	ge
 8006fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fae:	89a3      	ldrhlt	r3, [r4, #12]
 8006fb0:	181b      	addge	r3, r3, r0
 8006fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fb6:	bfac      	ite	ge
 8006fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fba:	81a3      	strhlt	r3, [r4, #12]
 8006fbc:	bd10      	pop	{r4, pc}

08006fbe <__swrite>:
 8006fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	898b      	ldrh	r3, [r1, #12]
 8006fc6:	05db      	lsls	r3, r3, #23
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	4616      	mov	r6, r2
 8006fce:	d505      	bpl.n	8006fdc <__swrite+0x1e>
 8006fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f000 f868 	bl	80070ac <_lseek_r>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	4632      	mov	r2, r6
 8006fea:	463b      	mov	r3, r7
 8006fec:	4628      	mov	r0, r5
 8006fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff2:	f000 b817 	b.w	8007024 <_write_r>

08006ff6 <__sseek>:
 8006ff6:	b510      	push	{r4, lr}
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffe:	f000 f855 	bl	80070ac <_lseek_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	bf15      	itete	ne
 8007008:	6560      	strne	r0, [r4, #84]	; 0x54
 800700a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800700e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007012:	81a3      	strheq	r3, [r4, #12]
 8007014:	bf18      	it	ne
 8007016:	81a3      	strhne	r3, [r4, #12]
 8007018:	bd10      	pop	{r4, pc}

0800701a <__sclose>:
 800701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701e:	f000 b813 	b.w	8007048 <_close_r>
	...

08007024 <_write_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	; (8007044 <_write_r+0x20>)
 8007028:	4604      	mov	r4, r0
 800702a:	4608      	mov	r0, r1
 800702c:	4611      	mov	r1, r2
 800702e:	2200      	movs	r2, #0
 8007030:	602a      	str	r2, [r5, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f7fb fbe9 	bl	800280a <_write>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_write_r+0x1e>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_write_r+0x1e>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20000278 	.word	0x20000278

08007048 <_close_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	; (8007064 <_close_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fb fbf5 	bl	8002842 <_close>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_close_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_close_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000278 	.word	0x20000278

08007068 <_fstat_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	; (8007088 <_fstat_r+0x20>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	4611      	mov	r1, r2
 8007074:	602b      	str	r3, [r5, #0]
 8007076:	f7fb fbf0 	bl	800285a <_fstat>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d102      	bne.n	8007084 <_fstat_r+0x1c>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	b103      	cbz	r3, 8007084 <_fstat_r+0x1c>
 8007082:	6023      	str	r3, [r4, #0]
 8007084:	bd38      	pop	{r3, r4, r5, pc}
 8007086:	bf00      	nop
 8007088:	20000278 	.word	0x20000278

0800708c <_isatty_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4d06      	ldr	r5, [pc, #24]	; (80070a8 <_isatty_r+0x1c>)
 8007090:	2300      	movs	r3, #0
 8007092:	4604      	mov	r4, r0
 8007094:	4608      	mov	r0, r1
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	f7fb fbef 	bl	800287a <_isatty>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_isatty_r+0x1a>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_isatty_r+0x1a>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20000278 	.word	0x20000278

080070ac <_lseek_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d07      	ldr	r5, [pc, #28]	; (80070cc <_lseek_r+0x20>)
 80070b0:	4604      	mov	r4, r0
 80070b2:	4608      	mov	r0, r1
 80070b4:	4611      	mov	r1, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f7fb fbe8 	bl	8002890 <_lseek>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_lseek_r+0x1e>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_lseek_r+0x1e>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	20000278 	.word	0x20000278

080070d0 <_read_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d07      	ldr	r5, [pc, #28]	; (80070f0 <_read_r+0x20>)
 80070d4:	4604      	mov	r4, r0
 80070d6:	4608      	mov	r0, r1
 80070d8:	4611      	mov	r1, r2
 80070da:	2200      	movs	r2, #0
 80070dc:	602a      	str	r2, [r5, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	f7fb fb76 	bl	80027d0 <_read>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_read_r+0x1e>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_read_r+0x1e>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	20000278 	.word	0x20000278

080070f4 <pow>:
 80070f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f8:	ec59 8b10 	vmov	r8, r9, d0
 80070fc:	ec57 6b11 	vmov	r6, r7, d1
 8007100:	f000 f8a6 	bl	8007250 <__ieee754_pow>
 8007104:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <pow+0x14c>)
 8007106:	f993 3000 	ldrsb.w	r3, [r3]
 800710a:	3301      	adds	r3, #1
 800710c:	ec55 4b10 	vmov	r4, r5, d0
 8007110:	d015      	beq.n	800713e <pow+0x4a>
 8007112:	4632      	mov	r2, r6
 8007114:	463b      	mov	r3, r7
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	f7f9 fd07 	bl	8000b2c <__aeabi_dcmpun>
 800711e:	b970      	cbnz	r0, 800713e <pow+0x4a>
 8007120:	4642      	mov	r2, r8
 8007122:	464b      	mov	r3, r9
 8007124:	4640      	mov	r0, r8
 8007126:	4649      	mov	r1, r9
 8007128:	f7f9 fd00 	bl	8000b2c <__aeabi_dcmpun>
 800712c:	2200      	movs	r2, #0
 800712e:	2300      	movs	r3, #0
 8007130:	b148      	cbz	r0, 8007146 <pow+0x52>
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	f7f9 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800713a:	2800      	cmp	r0, #0
 800713c:	d17d      	bne.n	800723a <pow+0x146>
 800713e:	ec45 4b10 	vmov	d0, r4, r5
 8007142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007146:	4640      	mov	r0, r8
 8007148:	4649      	mov	r1, r9
 800714a:	f7f9 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800714e:	b1e0      	cbz	r0, 800718a <pow+0x96>
 8007150:	2200      	movs	r2, #0
 8007152:	2300      	movs	r3, #0
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800715c:	2800      	cmp	r0, #0
 800715e:	d16c      	bne.n	800723a <pow+0x146>
 8007160:	ec47 6b10 	vmov	d0, r6, r7
 8007164:	f000 fe53 	bl	8007e0e <finite>
 8007168:	2800      	cmp	r0, #0
 800716a:	d0e8      	beq.n	800713e <pow+0x4a>
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fcb2 	bl	8000adc <__aeabi_dcmplt>
 8007178:	2800      	cmp	r0, #0
 800717a:	d0e0      	beq.n	800713e <pow+0x4a>
 800717c:	f7fd f8f2 	bl	8004364 <__errno>
 8007180:	2321      	movs	r3, #33	; 0x21
 8007182:	6003      	str	r3, [r0, #0]
 8007184:	2400      	movs	r4, #0
 8007186:	4d2f      	ldr	r5, [pc, #188]	; (8007244 <pow+0x150>)
 8007188:	e7d9      	b.n	800713e <pow+0x4a>
 800718a:	ec45 4b10 	vmov	d0, r4, r5
 800718e:	f000 fe3e 	bl	8007e0e <finite>
 8007192:	bbb8      	cbnz	r0, 8007204 <pow+0x110>
 8007194:	ec49 8b10 	vmov	d0, r8, r9
 8007198:	f000 fe39 	bl	8007e0e <finite>
 800719c:	b390      	cbz	r0, 8007204 <pow+0x110>
 800719e:	ec47 6b10 	vmov	d0, r6, r7
 80071a2:	f000 fe34 	bl	8007e0e <finite>
 80071a6:	b368      	cbz	r0, 8007204 <pow+0x110>
 80071a8:	4622      	mov	r2, r4
 80071aa:	462b      	mov	r3, r5
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 fcbc 	bl	8000b2c <__aeabi_dcmpun>
 80071b4:	b160      	cbz	r0, 80071d0 <pow+0xdc>
 80071b6:	f7fd f8d5 	bl	8004364 <__errno>
 80071ba:	2321      	movs	r3, #33	; 0x21
 80071bc:	6003      	str	r3, [r0, #0]
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	4610      	mov	r0, r2
 80071c4:	4619      	mov	r1, r3
 80071c6:	f7f9 fb41 	bl	800084c <__aeabi_ddiv>
 80071ca:	4604      	mov	r4, r0
 80071cc:	460d      	mov	r5, r1
 80071ce:	e7b6      	b.n	800713e <pow+0x4a>
 80071d0:	f7fd f8c8 	bl	8004364 <__errno>
 80071d4:	2322      	movs	r3, #34	; 0x22
 80071d6:	6003      	str	r3, [r0, #0]
 80071d8:	2200      	movs	r2, #0
 80071da:	2300      	movs	r3, #0
 80071dc:	4640      	mov	r0, r8
 80071de:	4649      	mov	r1, r9
 80071e0:	f7f9 fc7c 	bl	8000adc <__aeabi_dcmplt>
 80071e4:	2400      	movs	r4, #0
 80071e6:	b158      	cbz	r0, 8007200 <pow+0x10c>
 80071e8:	ec47 6b10 	vmov	d0, r6, r7
 80071ec:	f000 fe24 	bl	8007e38 <rint>
 80071f0:	4632      	mov	r2, r6
 80071f2:	ec51 0b10 	vmov	r0, r1, d0
 80071f6:	463b      	mov	r3, r7
 80071f8:	f7f9 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d0c2      	beq.n	8007186 <pow+0x92>
 8007200:	4d11      	ldr	r5, [pc, #68]	; (8007248 <pow+0x154>)
 8007202:	e79c      	b.n	800713e <pow+0x4a>
 8007204:	2200      	movs	r2, #0
 8007206:	2300      	movs	r3, #0
 8007208:	4620      	mov	r0, r4
 800720a:	4629      	mov	r1, r5
 800720c:	f7f9 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007210:	2800      	cmp	r0, #0
 8007212:	d094      	beq.n	800713e <pow+0x4a>
 8007214:	ec49 8b10 	vmov	d0, r8, r9
 8007218:	f000 fdf9 	bl	8007e0e <finite>
 800721c:	2800      	cmp	r0, #0
 800721e:	d08e      	beq.n	800713e <pow+0x4a>
 8007220:	ec47 6b10 	vmov	d0, r6, r7
 8007224:	f000 fdf3 	bl	8007e0e <finite>
 8007228:	2800      	cmp	r0, #0
 800722a:	d088      	beq.n	800713e <pow+0x4a>
 800722c:	f7fd f89a 	bl	8004364 <__errno>
 8007230:	2322      	movs	r3, #34	; 0x22
 8007232:	6003      	str	r3, [r0, #0]
 8007234:	2400      	movs	r4, #0
 8007236:	2500      	movs	r5, #0
 8007238:	e781      	b.n	800713e <pow+0x4a>
 800723a:	4d04      	ldr	r5, [pc, #16]	; (800724c <pow+0x158>)
 800723c:	2400      	movs	r4, #0
 800723e:	e77e      	b.n	800713e <pow+0x4a>
 8007240:	200001dc 	.word	0x200001dc
 8007244:	fff00000 	.word	0xfff00000
 8007248:	7ff00000 	.word	0x7ff00000
 800724c:	3ff00000 	.word	0x3ff00000

08007250 <__ieee754_pow>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	ed2d 8b06 	vpush	{d8-d10}
 8007258:	b08d      	sub	sp, #52	; 0x34
 800725a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800725e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8007262:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007266:	ea56 0100 	orrs.w	r1, r6, r0
 800726a:	ec53 2b10 	vmov	r2, r3, d0
 800726e:	f000 84d1 	beq.w	8007c14 <__ieee754_pow+0x9c4>
 8007272:	497f      	ldr	r1, [pc, #508]	; (8007470 <__ieee754_pow+0x220>)
 8007274:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007278:	428c      	cmp	r4, r1
 800727a:	ee10 8a10 	vmov	r8, s0
 800727e:	4699      	mov	r9, r3
 8007280:	dc09      	bgt.n	8007296 <__ieee754_pow+0x46>
 8007282:	d103      	bne.n	800728c <__ieee754_pow+0x3c>
 8007284:	b97a      	cbnz	r2, 80072a6 <__ieee754_pow+0x56>
 8007286:	42a6      	cmp	r6, r4
 8007288:	dd02      	ble.n	8007290 <__ieee754_pow+0x40>
 800728a:	e00c      	b.n	80072a6 <__ieee754_pow+0x56>
 800728c:	428e      	cmp	r6, r1
 800728e:	dc02      	bgt.n	8007296 <__ieee754_pow+0x46>
 8007290:	428e      	cmp	r6, r1
 8007292:	d110      	bne.n	80072b6 <__ieee754_pow+0x66>
 8007294:	b178      	cbz	r0, 80072b6 <__ieee754_pow+0x66>
 8007296:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800729a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800729e:	ea54 0308 	orrs.w	r3, r4, r8
 80072a2:	f000 84b7 	beq.w	8007c14 <__ieee754_pow+0x9c4>
 80072a6:	4873      	ldr	r0, [pc, #460]	; (8007474 <__ieee754_pow+0x224>)
 80072a8:	b00d      	add	sp, #52	; 0x34
 80072aa:	ecbd 8b06 	vpop	{d8-d10}
 80072ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b2:	f000 bdb9 	b.w	8007e28 <nan>
 80072b6:	f1b9 0f00 	cmp.w	r9, #0
 80072ba:	da36      	bge.n	800732a <__ieee754_pow+0xda>
 80072bc:	496e      	ldr	r1, [pc, #440]	; (8007478 <__ieee754_pow+0x228>)
 80072be:	428e      	cmp	r6, r1
 80072c0:	dc51      	bgt.n	8007366 <__ieee754_pow+0x116>
 80072c2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80072c6:	428e      	cmp	r6, r1
 80072c8:	f340 84af 	ble.w	8007c2a <__ieee754_pow+0x9da>
 80072cc:	1531      	asrs	r1, r6, #20
 80072ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80072d2:	2914      	cmp	r1, #20
 80072d4:	dd0f      	ble.n	80072f6 <__ieee754_pow+0xa6>
 80072d6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80072da:	fa20 fc01 	lsr.w	ip, r0, r1
 80072de:	fa0c f101 	lsl.w	r1, ip, r1
 80072e2:	4281      	cmp	r1, r0
 80072e4:	f040 84a1 	bne.w	8007c2a <__ieee754_pow+0x9da>
 80072e8:	f00c 0c01 	and.w	ip, ip, #1
 80072ec:	f1cc 0102 	rsb	r1, ip, #2
 80072f0:	9100      	str	r1, [sp, #0]
 80072f2:	b180      	cbz	r0, 8007316 <__ieee754_pow+0xc6>
 80072f4:	e059      	b.n	80073aa <__ieee754_pow+0x15a>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d155      	bne.n	80073a6 <__ieee754_pow+0x156>
 80072fa:	f1c1 0114 	rsb	r1, r1, #20
 80072fe:	fa46 fc01 	asr.w	ip, r6, r1
 8007302:	fa0c f101 	lsl.w	r1, ip, r1
 8007306:	42b1      	cmp	r1, r6
 8007308:	f040 848c 	bne.w	8007c24 <__ieee754_pow+0x9d4>
 800730c:	f00c 0c01 	and.w	ip, ip, #1
 8007310:	f1cc 0102 	rsb	r1, ip, #2
 8007314:	9100      	str	r1, [sp, #0]
 8007316:	4959      	ldr	r1, [pc, #356]	; (800747c <__ieee754_pow+0x22c>)
 8007318:	428e      	cmp	r6, r1
 800731a:	d12d      	bne.n	8007378 <__ieee754_pow+0x128>
 800731c:	2f00      	cmp	r7, #0
 800731e:	da79      	bge.n	8007414 <__ieee754_pow+0x1c4>
 8007320:	4956      	ldr	r1, [pc, #344]	; (800747c <__ieee754_pow+0x22c>)
 8007322:	2000      	movs	r0, #0
 8007324:	f7f9 fa92 	bl	800084c <__aeabi_ddiv>
 8007328:	e016      	b.n	8007358 <__ieee754_pow+0x108>
 800732a:	2100      	movs	r1, #0
 800732c:	9100      	str	r1, [sp, #0]
 800732e:	2800      	cmp	r0, #0
 8007330:	d13b      	bne.n	80073aa <__ieee754_pow+0x15a>
 8007332:	494f      	ldr	r1, [pc, #316]	; (8007470 <__ieee754_pow+0x220>)
 8007334:	428e      	cmp	r6, r1
 8007336:	d1ee      	bne.n	8007316 <__ieee754_pow+0xc6>
 8007338:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800733c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007340:	ea53 0308 	orrs.w	r3, r3, r8
 8007344:	f000 8466 	beq.w	8007c14 <__ieee754_pow+0x9c4>
 8007348:	4b4d      	ldr	r3, [pc, #308]	; (8007480 <__ieee754_pow+0x230>)
 800734a:	429c      	cmp	r4, r3
 800734c:	dd0d      	ble.n	800736a <__ieee754_pow+0x11a>
 800734e:	2f00      	cmp	r7, #0
 8007350:	f280 8464 	bge.w	8007c1c <__ieee754_pow+0x9cc>
 8007354:	2000      	movs	r0, #0
 8007356:	2100      	movs	r1, #0
 8007358:	ec41 0b10 	vmov	d0, r0, r1
 800735c:	b00d      	add	sp, #52	; 0x34
 800735e:	ecbd 8b06 	vpop	{d8-d10}
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	2102      	movs	r1, #2
 8007368:	e7e0      	b.n	800732c <__ieee754_pow+0xdc>
 800736a:	2f00      	cmp	r7, #0
 800736c:	daf2      	bge.n	8007354 <__ieee754_pow+0x104>
 800736e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8007372:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007376:	e7ef      	b.n	8007358 <__ieee754_pow+0x108>
 8007378:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800737c:	d104      	bne.n	8007388 <__ieee754_pow+0x138>
 800737e:	4610      	mov	r0, r2
 8007380:	4619      	mov	r1, r3
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	e7e7      	b.n	8007358 <__ieee754_pow+0x108>
 8007388:	493e      	ldr	r1, [pc, #248]	; (8007484 <__ieee754_pow+0x234>)
 800738a:	428f      	cmp	r7, r1
 800738c:	d10d      	bne.n	80073aa <__ieee754_pow+0x15a>
 800738e:	f1b9 0f00 	cmp.w	r9, #0
 8007392:	db0a      	blt.n	80073aa <__ieee754_pow+0x15a>
 8007394:	ec43 2b10 	vmov	d0, r2, r3
 8007398:	b00d      	add	sp, #52	; 0x34
 800739a:	ecbd 8b06 	vpop	{d8-d10}
 800739e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a2:	f000 bc77 	b.w	8007c94 <__ieee754_sqrt>
 80073a6:	2100      	movs	r1, #0
 80073a8:	9100      	str	r1, [sp, #0]
 80073aa:	ec43 2b10 	vmov	d0, r2, r3
 80073ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073b2:	f000 fd23 	bl	8007dfc <fabs>
 80073b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ba:	ec51 0b10 	vmov	r0, r1, d0
 80073be:	f1b8 0f00 	cmp.w	r8, #0
 80073c2:	d12a      	bne.n	800741a <__ieee754_pow+0x1ca>
 80073c4:	b12c      	cbz	r4, 80073d2 <__ieee754_pow+0x182>
 80073c6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800747c <__ieee754_pow+0x22c>
 80073ca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80073ce:	45e6      	cmp	lr, ip
 80073d0:	d123      	bne.n	800741a <__ieee754_pow+0x1ca>
 80073d2:	2f00      	cmp	r7, #0
 80073d4:	da05      	bge.n	80073e2 <__ieee754_pow+0x192>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	2000      	movs	r0, #0
 80073dc:	4927      	ldr	r1, [pc, #156]	; (800747c <__ieee754_pow+0x22c>)
 80073de:	f7f9 fa35 	bl	800084c <__aeabi_ddiv>
 80073e2:	f1b9 0f00 	cmp.w	r9, #0
 80073e6:	dab7      	bge.n	8007358 <__ieee754_pow+0x108>
 80073e8:	9b00      	ldr	r3, [sp, #0]
 80073ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80073ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80073f2:	4323      	orrs	r3, r4
 80073f4:	d108      	bne.n	8007408 <__ieee754_pow+0x1b8>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4610      	mov	r0, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	f7f8 ff43 	bl	8000288 <__aeabi_dsub>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	e78d      	b.n	8007324 <__ieee754_pow+0xd4>
 8007408:	9b00      	ldr	r3, [sp, #0]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d1a4      	bne.n	8007358 <__ieee754_pow+0x108>
 800740e:	4602      	mov	r2, r0
 8007410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007414:	4610      	mov	r0, r2
 8007416:	4619      	mov	r1, r3
 8007418:	e79e      	b.n	8007358 <__ieee754_pow+0x108>
 800741a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800741e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007422:	950a      	str	r5, [sp, #40]	; 0x28
 8007424:	9d00      	ldr	r5, [sp, #0]
 8007426:	46ac      	mov	ip, r5
 8007428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800742a:	ea5c 0505 	orrs.w	r5, ip, r5
 800742e:	d0e4      	beq.n	80073fa <__ieee754_pow+0x1aa>
 8007430:	4b15      	ldr	r3, [pc, #84]	; (8007488 <__ieee754_pow+0x238>)
 8007432:	429e      	cmp	r6, r3
 8007434:	f340 80fc 	ble.w	8007630 <__ieee754_pow+0x3e0>
 8007438:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800743c:	429e      	cmp	r6, r3
 800743e:	4b10      	ldr	r3, [pc, #64]	; (8007480 <__ieee754_pow+0x230>)
 8007440:	dd07      	ble.n	8007452 <__ieee754_pow+0x202>
 8007442:	429c      	cmp	r4, r3
 8007444:	dc0a      	bgt.n	800745c <__ieee754_pow+0x20c>
 8007446:	2f00      	cmp	r7, #0
 8007448:	da84      	bge.n	8007354 <__ieee754_pow+0x104>
 800744a:	a307      	add	r3, pc, #28	; (adr r3, 8007468 <__ieee754_pow+0x218>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	e795      	b.n	800737e <__ieee754_pow+0x12e>
 8007452:	429c      	cmp	r4, r3
 8007454:	dbf7      	blt.n	8007446 <__ieee754_pow+0x1f6>
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <__ieee754_pow+0x22c>)
 8007458:	429c      	cmp	r4, r3
 800745a:	dd17      	ble.n	800748c <__ieee754_pow+0x23c>
 800745c:	2f00      	cmp	r7, #0
 800745e:	dcf4      	bgt.n	800744a <__ieee754_pow+0x1fa>
 8007460:	e778      	b.n	8007354 <__ieee754_pow+0x104>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
 8007468:	8800759c 	.word	0x8800759c
 800746c:	7e37e43c 	.word	0x7e37e43c
 8007470:	7ff00000 	.word	0x7ff00000
 8007474:	08008380 	.word	0x08008380
 8007478:	433fffff 	.word	0x433fffff
 800747c:	3ff00000 	.word	0x3ff00000
 8007480:	3fefffff 	.word	0x3fefffff
 8007484:	3fe00000 	.word	0x3fe00000
 8007488:	41e00000 	.word	0x41e00000
 800748c:	4b64      	ldr	r3, [pc, #400]	; (8007620 <__ieee754_pow+0x3d0>)
 800748e:	2200      	movs	r2, #0
 8007490:	f7f8 fefa 	bl	8000288 <__aeabi_dsub>
 8007494:	a356      	add	r3, pc, #344	; (adr r3, 80075f0 <__ieee754_pow+0x3a0>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	4604      	mov	r4, r0
 800749c:	460d      	mov	r5, r1
 800749e:	f7f9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80074a2:	a355      	add	r3, pc, #340	; (adr r3, 80075f8 <__ieee754_pow+0x3a8>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	4606      	mov	r6, r0
 80074aa:	460f      	mov	r7, r1
 80074ac:	4620      	mov	r0, r4
 80074ae:	4629      	mov	r1, r5
 80074b0:	f7f9 f8a2 	bl	80005f8 <__aeabi_dmul>
 80074b4:	4b5b      	ldr	r3, [pc, #364]	; (8007624 <__ieee754_pow+0x3d4>)
 80074b6:	4682      	mov	sl, r0
 80074b8:	468b      	mov	fp, r1
 80074ba:	2200      	movs	r2, #0
 80074bc:	4620      	mov	r0, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	f7f9 f89a 	bl	80005f8 <__aeabi_dmul>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	a14d      	add	r1, pc, #308	; (adr r1, 8007600 <__ieee754_pow+0x3b0>)
 80074ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ce:	f7f8 fedb 	bl	8000288 <__aeabi_dsub>
 80074d2:	4622      	mov	r2, r4
 80074d4:	462b      	mov	r3, r5
 80074d6:	f7f9 f88f 	bl	80005f8 <__aeabi_dmul>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	2000      	movs	r0, #0
 80074e0:	4951      	ldr	r1, [pc, #324]	; (8007628 <__ieee754_pow+0x3d8>)
 80074e2:	f7f8 fed1 	bl	8000288 <__aeabi_dsub>
 80074e6:	4622      	mov	r2, r4
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	462b      	mov	r3, r5
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f9 f881 	bl	80005f8 <__aeabi_dmul>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4640      	mov	r0, r8
 80074fc:	4649      	mov	r1, r9
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	a341      	add	r3, pc, #260	; (adr r3, 8007608 <__ieee754_pow+0x3b8>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f7f9 f876 	bl	80005f8 <__aeabi_dmul>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	f7f8 feb8 	bl	8000288 <__aeabi_dsub>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4680      	mov	r8, r0
 800751e:	4689      	mov	r9, r1
 8007520:	4630      	mov	r0, r6
 8007522:	4639      	mov	r1, r7
 8007524:	f7f8 feb2 	bl	800028c <__adddf3>
 8007528:	2400      	movs	r4, #0
 800752a:	4632      	mov	r2, r6
 800752c:	463b      	mov	r3, r7
 800752e:	4620      	mov	r0, r4
 8007530:	460d      	mov	r5, r1
 8007532:	f7f8 fea9 	bl	8000288 <__aeabi_dsub>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4640      	mov	r0, r8
 800753c:	4649      	mov	r1, r9
 800753e:	f7f8 fea3 	bl	8000288 <__aeabi_dsub>
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007546:	3b01      	subs	r3, #1
 8007548:	4313      	orrs	r3, r2
 800754a:	4682      	mov	sl, r0
 800754c:	468b      	mov	fp, r1
 800754e:	f040 81f1 	bne.w	8007934 <__ieee754_pow+0x6e4>
 8007552:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007610 <__ieee754_pow+0x3c0>
 8007556:	eeb0 8a47 	vmov.f32	s16, s14
 800755a:	eef0 8a67 	vmov.f32	s17, s15
 800755e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007562:	2600      	movs	r6, #0
 8007564:	4632      	mov	r2, r6
 8007566:	463b      	mov	r3, r7
 8007568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800756c:	f7f8 fe8c 	bl	8000288 <__aeabi_dsub>
 8007570:	4622      	mov	r2, r4
 8007572:	462b      	mov	r3, r5
 8007574:	f7f9 f840 	bl	80005f8 <__aeabi_dmul>
 8007578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800757c:	4680      	mov	r8, r0
 800757e:	4689      	mov	r9, r1
 8007580:	4650      	mov	r0, sl
 8007582:	4659      	mov	r1, fp
 8007584:	f7f9 f838 	bl	80005f8 <__aeabi_dmul>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4640      	mov	r0, r8
 800758e:	4649      	mov	r1, r9
 8007590:	f7f8 fe7c 	bl	800028c <__adddf3>
 8007594:	4632      	mov	r2, r6
 8007596:	463b      	mov	r3, r7
 8007598:	4680      	mov	r8, r0
 800759a:	4689      	mov	r9, r1
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f9 f82a 	bl	80005f8 <__aeabi_dmul>
 80075a4:	460b      	mov	r3, r1
 80075a6:	4604      	mov	r4, r0
 80075a8:	460d      	mov	r5, r1
 80075aa:	4602      	mov	r2, r0
 80075ac:	4649      	mov	r1, r9
 80075ae:	4640      	mov	r0, r8
 80075b0:	f7f8 fe6c 	bl	800028c <__adddf3>
 80075b4:	4b1d      	ldr	r3, [pc, #116]	; (800762c <__ieee754_pow+0x3dc>)
 80075b6:	4299      	cmp	r1, r3
 80075b8:	ec45 4b19 	vmov	d9, r4, r5
 80075bc:	4606      	mov	r6, r0
 80075be:	460f      	mov	r7, r1
 80075c0:	468b      	mov	fp, r1
 80075c2:	f340 82fe 	ble.w	8007bc2 <__ieee754_pow+0x972>
 80075c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80075ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80075ce:	4303      	orrs	r3, r0
 80075d0:	f000 81f0 	beq.w	80079b4 <__ieee754_pow+0x764>
 80075d4:	a310      	add	r3, pc, #64	; (adr r3, 8007618 <__ieee754_pow+0x3c8>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	ec51 0b18 	vmov	r0, r1, d8
 80075de:	f7f9 f80b 	bl	80005f8 <__aeabi_dmul>
 80075e2:	a30d      	add	r3, pc, #52	; (adr r3, 8007618 <__ieee754_pow+0x3c8>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	e6cb      	b.n	8007382 <__ieee754_pow+0x132>
 80075ea:	bf00      	nop
 80075ec:	f3af 8000 	nop.w
 80075f0:	60000000 	.word	0x60000000
 80075f4:	3ff71547 	.word	0x3ff71547
 80075f8:	f85ddf44 	.word	0xf85ddf44
 80075fc:	3e54ae0b 	.word	0x3e54ae0b
 8007600:	55555555 	.word	0x55555555
 8007604:	3fd55555 	.word	0x3fd55555
 8007608:	652b82fe 	.word	0x652b82fe
 800760c:	3ff71547 	.word	0x3ff71547
 8007610:	00000000 	.word	0x00000000
 8007614:	bff00000 	.word	0xbff00000
 8007618:	8800759c 	.word	0x8800759c
 800761c:	7e37e43c 	.word	0x7e37e43c
 8007620:	3ff00000 	.word	0x3ff00000
 8007624:	3fd00000 	.word	0x3fd00000
 8007628:	3fe00000 	.word	0x3fe00000
 800762c:	408fffff 	.word	0x408fffff
 8007630:	4bd7      	ldr	r3, [pc, #860]	; (8007990 <__ieee754_pow+0x740>)
 8007632:	ea03 0309 	and.w	r3, r3, r9
 8007636:	2200      	movs	r2, #0
 8007638:	b92b      	cbnz	r3, 8007646 <__ieee754_pow+0x3f6>
 800763a:	4bd6      	ldr	r3, [pc, #856]	; (8007994 <__ieee754_pow+0x744>)
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007644:	460c      	mov	r4, r1
 8007646:	1523      	asrs	r3, r4, #20
 8007648:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800764c:	4413      	add	r3, r2
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
 8007650:	4bd1      	ldr	r3, [pc, #836]	; (8007998 <__ieee754_pow+0x748>)
 8007652:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007656:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800765a:	429c      	cmp	r4, r3
 800765c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007660:	dd08      	ble.n	8007674 <__ieee754_pow+0x424>
 8007662:	4bce      	ldr	r3, [pc, #824]	; (800799c <__ieee754_pow+0x74c>)
 8007664:	429c      	cmp	r4, r3
 8007666:	f340 8163 	ble.w	8007930 <__ieee754_pow+0x6e0>
 800766a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766c:	3301      	adds	r3, #1
 800766e:	9309      	str	r3, [sp, #36]	; 0x24
 8007670:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007674:	2400      	movs	r4, #0
 8007676:	00e3      	lsls	r3, r4, #3
 8007678:	930b      	str	r3, [sp, #44]	; 0x2c
 800767a:	4bc9      	ldr	r3, [pc, #804]	; (80079a0 <__ieee754_pow+0x750>)
 800767c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007680:	ed93 7b00 	vldr	d7, [r3]
 8007684:	4629      	mov	r1, r5
 8007686:	ec53 2b17 	vmov	r2, r3, d7
 800768a:	eeb0 8a47 	vmov.f32	s16, s14
 800768e:	eef0 8a67 	vmov.f32	s17, s15
 8007692:	4682      	mov	sl, r0
 8007694:	f7f8 fdf8 	bl	8000288 <__aeabi_dsub>
 8007698:	4652      	mov	r2, sl
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	462b      	mov	r3, r5
 80076a0:	ec51 0b18 	vmov	r0, r1, d8
 80076a4:	f7f8 fdf2 	bl	800028c <__adddf3>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	2000      	movs	r0, #0
 80076ae:	49bd      	ldr	r1, [pc, #756]	; (80079a4 <__ieee754_pow+0x754>)
 80076b0:	f7f9 f8cc 	bl	800084c <__aeabi_ddiv>
 80076b4:	ec41 0b19 	vmov	d9, r0, r1
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4630      	mov	r0, r6
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f8 ff9a 	bl	80005f8 <__aeabi_dmul>
 80076c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076d0:	2300      	movs	r3, #0
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80076d8:	46ab      	mov	fp, r5
 80076da:	106d      	asrs	r5, r5, #1
 80076dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80076e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80076e4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80076e8:	2200      	movs	r2, #0
 80076ea:	4640      	mov	r0, r8
 80076ec:	4649      	mov	r1, r9
 80076ee:	4614      	mov	r4, r2
 80076f0:	461d      	mov	r5, r3
 80076f2:	f7f8 ff81 	bl	80005f8 <__aeabi_dmul>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4630      	mov	r0, r6
 80076fc:	4639      	mov	r1, r7
 80076fe:	f7f8 fdc3 	bl	8000288 <__aeabi_dsub>
 8007702:	ec53 2b18 	vmov	r2, r3, d8
 8007706:	4606      	mov	r6, r0
 8007708:	460f      	mov	r7, r1
 800770a:	4620      	mov	r0, r4
 800770c:	4629      	mov	r1, r5
 800770e:	f7f8 fdbb 	bl	8000288 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4650      	mov	r0, sl
 8007718:	4659      	mov	r1, fp
 800771a:	f7f8 fdb5 	bl	8000288 <__aeabi_dsub>
 800771e:	4642      	mov	r2, r8
 8007720:	464b      	mov	r3, r9
 8007722:	f7f8 ff69 	bl	80005f8 <__aeabi_dmul>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4630      	mov	r0, r6
 800772c:	4639      	mov	r1, r7
 800772e:	f7f8 fdab 	bl	8000288 <__aeabi_dsub>
 8007732:	ec53 2b19 	vmov	r2, r3, d9
 8007736:	f7f8 ff5f 	bl	80005f8 <__aeabi_dmul>
 800773a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800773e:	ec41 0b18 	vmov	d8, r0, r1
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	f7f8 ff57 	bl	80005f8 <__aeabi_dmul>
 800774a:	a37d      	add	r3, pc, #500	; (adr r3, 8007940 <__ieee754_pow+0x6f0>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	f7f8 ff50 	bl	80005f8 <__aeabi_dmul>
 8007758:	a37b      	add	r3, pc, #492	; (adr r3, 8007948 <__ieee754_pow+0x6f8>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f8 fd95 	bl	800028c <__adddf3>
 8007762:	4622      	mov	r2, r4
 8007764:	462b      	mov	r3, r5
 8007766:	f7f8 ff47 	bl	80005f8 <__aeabi_dmul>
 800776a:	a379      	add	r3, pc, #484	; (adr r3, 8007950 <__ieee754_pow+0x700>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f8 fd8c 	bl	800028c <__adddf3>
 8007774:	4622      	mov	r2, r4
 8007776:	462b      	mov	r3, r5
 8007778:	f7f8 ff3e 	bl	80005f8 <__aeabi_dmul>
 800777c:	a376      	add	r3, pc, #472	; (adr r3, 8007958 <__ieee754_pow+0x708>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f7f8 fd83 	bl	800028c <__adddf3>
 8007786:	4622      	mov	r2, r4
 8007788:	462b      	mov	r3, r5
 800778a:	f7f8 ff35 	bl	80005f8 <__aeabi_dmul>
 800778e:	a374      	add	r3, pc, #464	; (adr r3, 8007960 <__ieee754_pow+0x710>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f7f8 fd7a 	bl	800028c <__adddf3>
 8007798:	4622      	mov	r2, r4
 800779a:	462b      	mov	r3, r5
 800779c:	f7f8 ff2c 	bl	80005f8 <__aeabi_dmul>
 80077a0:	a371      	add	r3, pc, #452	; (adr r3, 8007968 <__ieee754_pow+0x718>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 fd71 	bl	800028c <__adddf3>
 80077aa:	4622      	mov	r2, r4
 80077ac:	4606      	mov	r6, r0
 80077ae:	460f      	mov	r7, r1
 80077b0:	462b      	mov	r3, r5
 80077b2:	4620      	mov	r0, r4
 80077b4:	4629      	mov	r1, r5
 80077b6:	f7f8 ff1f 	bl	80005f8 <__aeabi_dmul>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4630      	mov	r0, r6
 80077c0:	4639      	mov	r1, r7
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4642      	mov	r2, r8
 80077c8:	4604      	mov	r4, r0
 80077ca:	460d      	mov	r5, r1
 80077cc:	464b      	mov	r3, r9
 80077ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077d2:	f7f8 fd5b 	bl	800028c <__adddf3>
 80077d6:	ec53 2b18 	vmov	r2, r3, d8
 80077da:	f7f8 ff0d 	bl	80005f8 <__aeabi_dmul>
 80077de:	4622      	mov	r2, r4
 80077e0:	462b      	mov	r3, r5
 80077e2:	f7f8 fd53 	bl	800028c <__adddf3>
 80077e6:	4642      	mov	r2, r8
 80077e8:	4682      	mov	sl, r0
 80077ea:	468b      	mov	fp, r1
 80077ec:	464b      	mov	r3, r9
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	f7f8 ff01 	bl	80005f8 <__aeabi_dmul>
 80077f6:	4b6c      	ldr	r3, [pc, #432]	; (80079a8 <__ieee754_pow+0x758>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	f7f8 fd45 	bl	800028c <__adddf3>
 8007802:	4652      	mov	r2, sl
 8007804:	465b      	mov	r3, fp
 8007806:	f7f8 fd41 	bl	800028c <__adddf3>
 800780a:	9c04      	ldr	r4, [sp, #16]
 800780c:	460d      	mov	r5, r1
 800780e:	4622      	mov	r2, r4
 8007810:	460b      	mov	r3, r1
 8007812:	4640      	mov	r0, r8
 8007814:	4649      	mov	r1, r9
 8007816:	f7f8 feef 	bl	80005f8 <__aeabi_dmul>
 800781a:	4b63      	ldr	r3, [pc, #396]	; (80079a8 <__ieee754_pow+0x758>)
 800781c:	4680      	mov	r8, r0
 800781e:	4689      	mov	r9, r1
 8007820:	2200      	movs	r2, #0
 8007822:	4620      	mov	r0, r4
 8007824:	4629      	mov	r1, r5
 8007826:	f7f8 fd2f 	bl	8000288 <__aeabi_dsub>
 800782a:	4632      	mov	r2, r6
 800782c:	463b      	mov	r3, r7
 800782e:	f7f8 fd2b 	bl	8000288 <__aeabi_dsub>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4650      	mov	r0, sl
 8007838:	4659      	mov	r1, fp
 800783a:	f7f8 fd25 	bl	8000288 <__aeabi_dsub>
 800783e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007842:	f7f8 fed9 	bl	80005f8 <__aeabi_dmul>
 8007846:	4622      	mov	r2, r4
 8007848:	4606      	mov	r6, r0
 800784a:	460f      	mov	r7, r1
 800784c:	462b      	mov	r3, r5
 800784e:	ec51 0b18 	vmov	r0, r1, d8
 8007852:	f7f8 fed1 	bl	80005f8 <__aeabi_dmul>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4630      	mov	r0, r6
 800785c:	4639      	mov	r1, r7
 800785e:	f7f8 fd15 	bl	800028c <__adddf3>
 8007862:	4606      	mov	r6, r0
 8007864:	460f      	mov	r7, r1
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	f7f8 fd0d 	bl	800028c <__adddf3>
 8007872:	9c04      	ldr	r4, [sp, #16]
 8007874:	a33e      	add	r3, pc, #248	; (adr r3, 8007970 <__ieee754_pow+0x720>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	4620      	mov	r0, r4
 800787c:	460d      	mov	r5, r1
 800787e:	f7f8 febb 	bl	80005f8 <__aeabi_dmul>
 8007882:	4642      	mov	r2, r8
 8007884:	ec41 0b18 	vmov	d8, r0, r1
 8007888:	464b      	mov	r3, r9
 800788a:	4620      	mov	r0, r4
 800788c:	4629      	mov	r1, r5
 800788e:	f7f8 fcfb 	bl	8000288 <__aeabi_dsub>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 fcf5 	bl	8000288 <__aeabi_dsub>
 800789e:	a336      	add	r3, pc, #216	; (adr r3, 8007978 <__ieee754_pow+0x728>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fea8 	bl	80005f8 <__aeabi_dmul>
 80078a8:	a335      	add	r3, pc, #212	; (adr r3, 8007980 <__ieee754_pow+0x730>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	4606      	mov	r6, r0
 80078b0:	460f      	mov	r7, r1
 80078b2:	4620      	mov	r0, r4
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7f8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4630      	mov	r0, r6
 80078c0:	4639      	mov	r1, r7
 80078c2:	f7f8 fce3 	bl	800028c <__adddf3>
 80078c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078c8:	4b38      	ldr	r3, [pc, #224]	; (80079ac <__ieee754_pow+0x75c>)
 80078ca:	4413      	add	r3, r2
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f7f8 fcdc 	bl	800028c <__adddf3>
 80078d4:	4682      	mov	sl, r0
 80078d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078d8:	468b      	mov	fp, r1
 80078da:	f7f8 fe23 	bl	8000524 <__aeabi_i2d>
 80078de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078e0:	4b33      	ldr	r3, [pc, #204]	; (80079b0 <__ieee754_pow+0x760>)
 80078e2:	4413      	add	r3, r2
 80078e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e8:	4606      	mov	r6, r0
 80078ea:	460f      	mov	r7, r1
 80078ec:	4652      	mov	r2, sl
 80078ee:	465b      	mov	r3, fp
 80078f0:	ec51 0b18 	vmov	r0, r1, d8
 80078f4:	f7f8 fcca 	bl	800028c <__adddf3>
 80078f8:	4642      	mov	r2, r8
 80078fa:	464b      	mov	r3, r9
 80078fc:	f7f8 fcc6 	bl	800028c <__adddf3>
 8007900:	4632      	mov	r2, r6
 8007902:	463b      	mov	r3, r7
 8007904:	f7f8 fcc2 	bl	800028c <__adddf3>
 8007908:	9c04      	ldr	r4, [sp, #16]
 800790a:	4632      	mov	r2, r6
 800790c:	463b      	mov	r3, r7
 800790e:	4620      	mov	r0, r4
 8007910:	460d      	mov	r5, r1
 8007912:	f7f8 fcb9 	bl	8000288 <__aeabi_dsub>
 8007916:	4642      	mov	r2, r8
 8007918:	464b      	mov	r3, r9
 800791a:	f7f8 fcb5 	bl	8000288 <__aeabi_dsub>
 800791e:	ec53 2b18 	vmov	r2, r3, d8
 8007922:	f7f8 fcb1 	bl	8000288 <__aeabi_dsub>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4650      	mov	r0, sl
 800792c:	4659      	mov	r1, fp
 800792e:	e606      	b.n	800753e <__ieee754_pow+0x2ee>
 8007930:	2401      	movs	r4, #1
 8007932:	e6a0      	b.n	8007676 <__ieee754_pow+0x426>
 8007934:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007988 <__ieee754_pow+0x738>
 8007938:	e60d      	b.n	8007556 <__ieee754_pow+0x306>
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w
 8007940:	4a454eef 	.word	0x4a454eef
 8007944:	3fca7e28 	.word	0x3fca7e28
 8007948:	93c9db65 	.word	0x93c9db65
 800794c:	3fcd864a 	.word	0x3fcd864a
 8007950:	a91d4101 	.word	0xa91d4101
 8007954:	3fd17460 	.word	0x3fd17460
 8007958:	518f264d 	.word	0x518f264d
 800795c:	3fd55555 	.word	0x3fd55555
 8007960:	db6fabff 	.word	0xdb6fabff
 8007964:	3fdb6db6 	.word	0x3fdb6db6
 8007968:	33333303 	.word	0x33333303
 800796c:	3fe33333 	.word	0x3fe33333
 8007970:	e0000000 	.word	0xe0000000
 8007974:	3feec709 	.word	0x3feec709
 8007978:	dc3a03fd 	.word	0xdc3a03fd
 800797c:	3feec709 	.word	0x3feec709
 8007980:	145b01f5 	.word	0x145b01f5
 8007984:	be3e2fe0 	.word	0xbe3e2fe0
 8007988:	00000000 	.word	0x00000000
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	7ff00000 	.word	0x7ff00000
 8007994:	43400000 	.word	0x43400000
 8007998:	0003988e 	.word	0x0003988e
 800799c:	000bb679 	.word	0x000bb679
 80079a0:	080084f0 	.word	0x080084f0
 80079a4:	3ff00000 	.word	0x3ff00000
 80079a8:	40080000 	.word	0x40080000
 80079ac:	08008510 	.word	0x08008510
 80079b0:	08008500 	.word	0x08008500
 80079b4:	a3b5      	add	r3, pc, #724	; (adr r3, 8007c8c <__ieee754_pow+0xa3c>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f8 fc65 	bl	800028c <__adddf3>
 80079c2:	4622      	mov	r2, r4
 80079c4:	ec41 0b1a 	vmov	d10, r0, r1
 80079c8:	462b      	mov	r3, r5
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 fc5b 	bl	8000288 <__aeabi_dsub>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	ec51 0b1a 	vmov	r0, r1, d10
 80079da:	f7f9 f89d 	bl	8000b18 <__aeabi_dcmpgt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	f47f adf8 	bne.w	80075d4 <__ieee754_pow+0x384>
 80079e4:	4aa4      	ldr	r2, [pc, #656]	; (8007c78 <__ieee754_pow+0xa28>)
 80079e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079ea:	4293      	cmp	r3, r2
 80079ec:	f340 810b 	ble.w	8007c06 <__ieee754_pow+0x9b6>
 80079f0:	151b      	asrs	r3, r3, #20
 80079f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80079f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80079fa:	fa4a f303 	asr.w	r3, sl, r3
 80079fe:	445b      	add	r3, fp
 8007a00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007a04:	4e9d      	ldr	r6, [pc, #628]	; (8007c7c <__ieee754_pow+0xa2c>)
 8007a06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007a0a:	4116      	asrs	r6, r2
 8007a0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007a10:	2000      	movs	r0, #0
 8007a12:	ea23 0106 	bic.w	r1, r3, r6
 8007a16:	f1c2 0214 	rsb	r2, r2, #20
 8007a1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007a1e:	fa4a fa02 	asr.w	sl, sl, r2
 8007a22:	f1bb 0f00 	cmp.w	fp, #0
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	bfb8      	it	lt
 8007a30:	f1ca 0a00 	rsblt	sl, sl, #0
 8007a34:	f7f8 fc28 	bl	8000288 <__aeabi_dsub>
 8007a38:	ec41 0b19 	vmov	d9, r0, r1
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	464b      	mov	r3, r9
 8007a40:	ec51 0b19 	vmov	r0, r1, d9
 8007a44:	f7f8 fc22 	bl	800028c <__adddf3>
 8007a48:	2400      	movs	r4, #0
 8007a4a:	a379      	add	r3, pc, #484	; (adr r3, 8007c30 <__ieee754_pow+0x9e0>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	4620      	mov	r0, r4
 8007a52:	460d      	mov	r5, r1
 8007a54:	f7f8 fdd0 	bl	80005f8 <__aeabi_dmul>
 8007a58:	ec53 2b19 	vmov	r2, r3, d9
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	460f      	mov	r7, r1
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fc10 	bl	8000288 <__aeabi_dsub>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f8 fc0a 	bl	8000288 <__aeabi_dsub>
 8007a74:	a370      	add	r3, pc, #448	; (adr r3, 8007c38 <__ieee754_pow+0x9e8>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fdbd 	bl	80005f8 <__aeabi_dmul>
 8007a7e:	a370      	add	r3, pc, #448	; (adr r3, 8007c40 <__ieee754_pow+0x9f0>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	4620      	mov	r0, r4
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	f7f8 fdb4 	bl	80005f8 <__aeabi_dmul>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f8 fbf8 	bl	800028c <__adddf3>
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	460d      	mov	r5, r1
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	f7f8 fbf0 	bl	800028c <__adddf3>
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	4689      	mov	r9, r1
 8007ab4:	f7f8 fbe8 	bl	8000288 <__aeabi_dsub>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fbe2 	bl	8000288 <__aeabi_dsub>
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	464b      	mov	r3, r9
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f8 fd92 	bl	80005f8 <__aeabi_dmul>
 8007ad4:	a35c      	add	r3, pc, #368	; (adr r3, 8007c48 <__ieee754_pow+0x9f8>)
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	4604      	mov	r4, r0
 8007adc:	460d      	mov	r5, r1
 8007ade:	f7f8 fd8b 	bl	80005f8 <__aeabi_dmul>
 8007ae2:	a35b      	add	r3, pc, #364	; (adr r3, 8007c50 <__ieee754_pow+0xa00>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 fbce 	bl	8000288 <__aeabi_dsub>
 8007aec:	4622      	mov	r2, r4
 8007aee:	462b      	mov	r3, r5
 8007af0:	f7f8 fd82 	bl	80005f8 <__aeabi_dmul>
 8007af4:	a358      	add	r3, pc, #352	; (adr r3, 8007c58 <__ieee754_pow+0xa08>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f7f8 fbc7 	bl	800028c <__adddf3>
 8007afe:	4622      	mov	r2, r4
 8007b00:	462b      	mov	r3, r5
 8007b02:	f7f8 fd79 	bl	80005f8 <__aeabi_dmul>
 8007b06:	a356      	add	r3, pc, #344	; (adr r3, 8007c60 <__ieee754_pow+0xa10>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fbbc 	bl	8000288 <__aeabi_dsub>
 8007b10:	4622      	mov	r2, r4
 8007b12:	462b      	mov	r3, r5
 8007b14:	f7f8 fd70 	bl	80005f8 <__aeabi_dmul>
 8007b18:	a353      	add	r3, pc, #332	; (adr r3, 8007c68 <__ieee754_pow+0xa18>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fbb5 	bl	800028c <__adddf3>
 8007b22:	4622      	mov	r2, r4
 8007b24:	462b      	mov	r3, r5
 8007b26:	f7f8 fd67 	bl	80005f8 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f8 fba9 	bl	8000288 <__aeabi_dsub>
 8007b36:	4604      	mov	r4, r0
 8007b38:	460d      	mov	r5, r1
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4640      	mov	r0, r8
 8007b40:	4649      	mov	r1, r9
 8007b42:	f7f8 fd59 	bl	80005f8 <__aeabi_dmul>
 8007b46:	2200      	movs	r2, #0
 8007b48:	ec41 0b19 	vmov	d9, r0, r1
 8007b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b50:	4620      	mov	r0, r4
 8007b52:	4629      	mov	r1, r5
 8007b54:	f7f8 fb98 	bl	8000288 <__aeabi_dsub>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	ec51 0b19 	vmov	r0, r1, d9
 8007b60:	f7f8 fe74 	bl	800084c <__aeabi_ddiv>
 8007b64:	4632      	mov	r2, r6
 8007b66:	4604      	mov	r4, r0
 8007b68:	460d      	mov	r5, r1
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 fd42 	bl	80005f8 <__aeabi_dmul>
 8007b74:	4632      	mov	r2, r6
 8007b76:	463b      	mov	r3, r7
 8007b78:	f7f8 fb88 	bl	800028c <__adddf3>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4620      	mov	r0, r4
 8007b82:	4629      	mov	r1, r5
 8007b84:	f7f8 fb80 	bl	8000288 <__aeabi_dsub>
 8007b88:	4642      	mov	r2, r8
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	f7f8 fb7c 	bl	8000288 <__aeabi_dsub>
 8007b90:	460b      	mov	r3, r1
 8007b92:	4602      	mov	r2, r0
 8007b94:	493a      	ldr	r1, [pc, #232]	; (8007c80 <__ieee754_pow+0xa30>)
 8007b96:	2000      	movs	r0, #0
 8007b98:	f7f8 fb76 	bl	8000288 <__aeabi_dsub>
 8007b9c:	e9cd 0100 	strd	r0, r1, [sp]
 8007ba0:	9b01      	ldr	r3, [sp, #4]
 8007ba2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007baa:	da2f      	bge.n	8007c0c <__ieee754_pow+0x9bc>
 8007bac:	4650      	mov	r0, sl
 8007bae:	ed9d 0b00 	vldr	d0, [sp]
 8007bb2:	f000 f9cd 	bl	8007f50 <scalbn>
 8007bb6:	ec51 0b10 	vmov	r0, r1, d0
 8007bba:	ec53 2b18 	vmov	r2, r3, d8
 8007bbe:	f7ff bbe0 	b.w	8007382 <__ieee754_pow+0x132>
 8007bc2:	4b30      	ldr	r3, [pc, #192]	; (8007c84 <__ieee754_pow+0xa34>)
 8007bc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007bc8:	429e      	cmp	r6, r3
 8007bca:	f77f af0b 	ble.w	80079e4 <__ieee754_pow+0x794>
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <__ieee754_pow+0xa38>)
 8007bd0:	440b      	add	r3, r1
 8007bd2:	4303      	orrs	r3, r0
 8007bd4:	d00b      	beq.n	8007bee <__ieee754_pow+0x99e>
 8007bd6:	a326      	add	r3, pc, #152	; (adr r3, 8007c70 <__ieee754_pow+0xa20>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	ec51 0b18 	vmov	r0, r1, d8
 8007be0:	f7f8 fd0a 	bl	80005f8 <__aeabi_dmul>
 8007be4:	a322      	add	r3, pc, #136	; (adr r3, 8007c70 <__ieee754_pow+0xa20>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7ff bbca 	b.w	8007382 <__ieee754_pow+0x132>
 8007bee:	4622      	mov	r2, r4
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	f7f8 fb49 	bl	8000288 <__aeabi_dsub>
 8007bf6:	4642      	mov	r2, r8
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	f7f8 ff83 	bl	8000b04 <__aeabi_dcmpge>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f43f aef0 	beq.w	80079e4 <__ieee754_pow+0x794>
 8007c04:	e7e7      	b.n	8007bd6 <__ieee754_pow+0x986>
 8007c06:	f04f 0a00 	mov.w	sl, #0
 8007c0a:	e717      	b.n	8007a3c <__ieee754_pow+0x7ec>
 8007c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c10:	4619      	mov	r1, r3
 8007c12:	e7d2      	b.n	8007bba <__ieee754_pow+0x96a>
 8007c14:	491a      	ldr	r1, [pc, #104]	; (8007c80 <__ieee754_pow+0xa30>)
 8007c16:	2000      	movs	r0, #0
 8007c18:	f7ff bb9e 	b.w	8007358 <__ieee754_pow+0x108>
 8007c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c20:	f7ff bb9a 	b.w	8007358 <__ieee754_pow+0x108>
 8007c24:	9000      	str	r0, [sp, #0]
 8007c26:	f7ff bb76 	b.w	8007316 <__ieee754_pow+0xc6>
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f7ff bb60 	b.w	80072f0 <__ieee754_pow+0xa0>
 8007c30:	00000000 	.word	0x00000000
 8007c34:	3fe62e43 	.word	0x3fe62e43
 8007c38:	fefa39ef 	.word	0xfefa39ef
 8007c3c:	3fe62e42 	.word	0x3fe62e42
 8007c40:	0ca86c39 	.word	0x0ca86c39
 8007c44:	be205c61 	.word	0xbe205c61
 8007c48:	72bea4d0 	.word	0x72bea4d0
 8007c4c:	3e663769 	.word	0x3e663769
 8007c50:	c5d26bf1 	.word	0xc5d26bf1
 8007c54:	3ebbbd41 	.word	0x3ebbbd41
 8007c58:	af25de2c 	.word	0xaf25de2c
 8007c5c:	3f11566a 	.word	0x3f11566a
 8007c60:	16bebd93 	.word	0x16bebd93
 8007c64:	3f66c16c 	.word	0x3f66c16c
 8007c68:	5555553e 	.word	0x5555553e
 8007c6c:	3fc55555 	.word	0x3fc55555
 8007c70:	c2f8f359 	.word	0xc2f8f359
 8007c74:	01a56e1f 	.word	0x01a56e1f
 8007c78:	3fe00000 	.word	0x3fe00000
 8007c7c:	000fffff 	.word	0x000fffff
 8007c80:	3ff00000 	.word	0x3ff00000
 8007c84:	4090cbff 	.word	0x4090cbff
 8007c88:	3f6f3400 	.word	0x3f6f3400
 8007c8c:	652b82fe 	.word	0x652b82fe
 8007c90:	3c971547 	.word	0x3c971547

08007c94 <__ieee754_sqrt>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	ec55 4b10 	vmov	r4, r5, d0
 8007c9c:	4e56      	ldr	r6, [pc, #344]	; (8007df8 <__ieee754_sqrt+0x164>)
 8007c9e:	43ae      	bics	r6, r5
 8007ca0:	ee10 0a10 	vmov	r0, s0
 8007ca4:	ee10 3a10 	vmov	r3, s0
 8007ca8:	4629      	mov	r1, r5
 8007caa:	462a      	mov	r2, r5
 8007cac:	d110      	bne.n	8007cd0 <__ieee754_sqrt+0x3c>
 8007cae:	ee10 2a10 	vmov	r2, s0
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	f7f8 fca0 	bl	80005f8 <__aeabi_dmul>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 fae4 	bl	800028c <__adddf3>
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	ec45 4b10 	vmov	d0, r4, r5
 8007ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	dc10      	bgt.n	8007cf6 <__ieee754_sqrt+0x62>
 8007cd4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007cd8:	4330      	orrs	r0, r6
 8007cda:	d0f5      	beq.n	8007cc8 <__ieee754_sqrt+0x34>
 8007cdc:	b15d      	cbz	r5, 8007cf6 <__ieee754_sqrt+0x62>
 8007cde:	ee10 2a10 	vmov	r2, s0
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	ee10 0a10 	vmov	r0, s0
 8007ce8:	f7f8 face 	bl	8000288 <__aeabi_dsub>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	f7f8 fdac 	bl	800084c <__aeabi_ddiv>
 8007cf4:	e7e6      	b.n	8007cc4 <__ieee754_sqrt+0x30>
 8007cf6:	1509      	asrs	r1, r1, #20
 8007cf8:	d076      	beq.n	8007de8 <__ieee754_sqrt+0x154>
 8007cfa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007cfe:	07ce      	lsls	r6, r1, #31
 8007d00:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007d04:	bf5e      	ittt	pl
 8007d06:	0fda      	lsrpl	r2, r3, #31
 8007d08:	005b      	lslpl	r3, r3, #1
 8007d0a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007d0e:	0fda      	lsrs	r2, r3, #31
 8007d10:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007d14:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007d18:	2000      	movs	r0, #0
 8007d1a:	106d      	asrs	r5, r5, #1
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	f04f 0e16 	mov.w	lr, #22
 8007d22:	4684      	mov	ip, r0
 8007d24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d28:	eb0c 0401 	add.w	r4, ip, r1
 8007d2c:	4294      	cmp	r4, r2
 8007d2e:	bfde      	ittt	le
 8007d30:	1b12      	suble	r2, r2, r4
 8007d32:	eb04 0c01 	addle.w	ip, r4, r1
 8007d36:	1840      	addle	r0, r0, r1
 8007d38:	0052      	lsls	r2, r2, #1
 8007d3a:	f1be 0e01 	subs.w	lr, lr, #1
 8007d3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007d42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007d46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d4a:	d1ed      	bne.n	8007d28 <__ieee754_sqrt+0x94>
 8007d4c:	4671      	mov	r1, lr
 8007d4e:	2720      	movs	r7, #32
 8007d50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007d54:	4562      	cmp	r2, ip
 8007d56:	eb04 060e 	add.w	r6, r4, lr
 8007d5a:	dc02      	bgt.n	8007d62 <__ieee754_sqrt+0xce>
 8007d5c:	d113      	bne.n	8007d86 <__ieee754_sqrt+0xf2>
 8007d5e:	429e      	cmp	r6, r3
 8007d60:	d811      	bhi.n	8007d86 <__ieee754_sqrt+0xf2>
 8007d62:	2e00      	cmp	r6, #0
 8007d64:	eb06 0e04 	add.w	lr, r6, r4
 8007d68:	da43      	bge.n	8007df2 <__ieee754_sqrt+0x15e>
 8007d6a:	f1be 0f00 	cmp.w	lr, #0
 8007d6e:	db40      	blt.n	8007df2 <__ieee754_sqrt+0x15e>
 8007d70:	f10c 0801 	add.w	r8, ip, #1
 8007d74:	eba2 020c 	sub.w	r2, r2, ip
 8007d78:	429e      	cmp	r6, r3
 8007d7a:	bf88      	it	hi
 8007d7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007d80:	1b9b      	subs	r3, r3, r6
 8007d82:	4421      	add	r1, r4
 8007d84:	46c4      	mov	ip, r8
 8007d86:	0052      	lsls	r2, r2, #1
 8007d88:	3f01      	subs	r7, #1
 8007d8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007d8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007d92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d96:	d1dd      	bne.n	8007d54 <__ieee754_sqrt+0xc0>
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d006      	beq.n	8007daa <__ieee754_sqrt+0x116>
 8007d9c:	1c4c      	adds	r4, r1, #1
 8007d9e:	bf13      	iteet	ne
 8007da0:	3101      	addne	r1, #1
 8007da2:	3001      	addeq	r0, #1
 8007da4:	4639      	moveq	r1, r7
 8007da6:	f021 0101 	bicne.w	r1, r1, #1
 8007daa:	1043      	asrs	r3, r0, #1
 8007dac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007db0:	0849      	lsrs	r1, r1, #1
 8007db2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007db6:	07c2      	lsls	r2, r0, #31
 8007db8:	bf48      	it	mi
 8007dba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007dbe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	463d      	mov	r5, r7
 8007dc6:	e77f      	b.n	8007cc8 <__ieee754_sqrt+0x34>
 8007dc8:	0ada      	lsrs	r2, r3, #11
 8007dca:	3815      	subs	r0, #21
 8007dcc:	055b      	lsls	r3, r3, #21
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d0fa      	beq.n	8007dc8 <__ieee754_sqrt+0x134>
 8007dd2:	02d7      	lsls	r7, r2, #11
 8007dd4:	d50a      	bpl.n	8007dec <__ieee754_sqrt+0x158>
 8007dd6:	f1c1 0420 	rsb	r4, r1, #32
 8007dda:	fa23 f404 	lsr.w	r4, r3, r4
 8007dde:	1e4d      	subs	r5, r1, #1
 8007de0:	408b      	lsls	r3, r1
 8007de2:	4322      	orrs	r2, r4
 8007de4:	1b41      	subs	r1, r0, r5
 8007de6:	e788      	b.n	8007cfa <__ieee754_sqrt+0x66>
 8007de8:	4608      	mov	r0, r1
 8007dea:	e7f0      	b.n	8007dce <__ieee754_sqrt+0x13a>
 8007dec:	0052      	lsls	r2, r2, #1
 8007dee:	3101      	adds	r1, #1
 8007df0:	e7ef      	b.n	8007dd2 <__ieee754_sqrt+0x13e>
 8007df2:	46e0      	mov	r8, ip
 8007df4:	e7be      	b.n	8007d74 <__ieee754_sqrt+0xe0>
 8007df6:	bf00      	nop
 8007df8:	7ff00000 	.word	0x7ff00000

08007dfc <fabs>:
 8007dfc:	ec51 0b10 	vmov	r0, r1, d0
 8007e00:	ee10 2a10 	vmov	r2, s0
 8007e04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e08:	ec43 2b10 	vmov	d0, r2, r3
 8007e0c:	4770      	bx	lr

08007e0e <finite>:
 8007e0e:	b082      	sub	sp, #8
 8007e10:	ed8d 0b00 	vstr	d0, [sp]
 8007e14:	9801      	ldr	r0, [sp, #4]
 8007e16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007e1a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007e1e:	0fc0      	lsrs	r0, r0, #31
 8007e20:	b002      	add	sp, #8
 8007e22:	4770      	bx	lr
 8007e24:	0000      	movs	r0, r0
	...

08007e28 <nan>:
 8007e28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007e30 <nan+0x8>
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	00000000 	.word	0x00000000
 8007e34:	7ff80000 	.word	0x7ff80000

08007e38 <rint>:
 8007e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e3a:	ec51 0b10 	vmov	r0, r1, d0
 8007e3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007e46:	2e13      	cmp	r6, #19
 8007e48:	ee10 4a10 	vmov	r4, s0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007e52:	dc58      	bgt.n	8007f06 <rint+0xce>
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	da2b      	bge.n	8007eb0 <rint+0x78>
 8007e58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007e5c:	4302      	orrs	r2, r0
 8007e5e:	d023      	beq.n	8007ea8 <rint+0x70>
 8007e60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007e64:	4302      	orrs	r2, r0
 8007e66:	4254      	negs	r4, r2
 8007e68:	4314      	orrs	r4, r2
 8007e6a:	0c4b      	lsrs	r3, r1, #17
 8007e6c:	0b24      	lsrs	r4, r4, #12
 8007e6e:	045b      	lsls	r3, r3, #17
 8007e70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007e74:	ea44 0103 	orr.w	r1, r4, r3
 8007e78:	4b32      	ldr	r3, [pc, #200]	; (8007f44 <rint+0x10c>)
 8007e7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4630      	mov	r0, r6
 8007e88:	4639      	mov	r1, r7
 8007e8a:	f7f8 f9ff 	bl	800028c <__adddf3>
 8007e8e:	e9cd 0100 	strd	r0, r1, [sp]
 8007e92:	463b      	mov	r3, r7
 8007e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e98:	4632      	mov	r2, r6
 8007e9a:	f7f8 f9f5 	bl	8000288 <__aeabi_dsub>
 8007e9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ea2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	ec41 0b10 	vmov	d0, r0, r1
 8007eac:	b003      	add	sp, #12
 8007eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb0:	4a25      	ldr	r2, [pc, #148]	; (8007f48 <rint+0x110>)
 8007eb2:	4132      	asrs	r2, r6
 8007eb4:	ea01 0702 	and.w	r7, r1, r2
 8007eb8:	4307      	orrs	r7, r0
 8007eba:	d0f5      	beq.n	8007ea8 <rint+0x70>
 8007ebc:	0851      	lsrs	r1, r2, #1
 8007ebe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007ec2:	4314      	orrs	r4, r2
 8007ec4:	d00c      	beq.n	8007ee0 <rint+0xa8>
 8007ec6:	ea23 0201 	bic.w	r2, r3, r1
 8007eca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ece:	2e13      	cmp	r6, #19
 8007ed0:	fa43 f606 	asr.w	r6, r3, r6
 8007ed4:	bf0c      	ite	eq
 8007ed6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007eda:	2400      	movne	r4, #0
 8007edc:	ea42 0306 	orr.w	r3, r2, r6
 8007ee0:	4918      	ldr	r1, [pc, #96]	; (8007f44 <rint+0x10c>)
 8007ee2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 f9cc 	bl	800028c <__adddf3>
 8007ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8007ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007efc:	4622      	mov	r2, r4
 8007efe:	462b      	mov	r3, r5
 8007f00:	f7f8 f9c2 	bl	8000288 <__aeabi_dsub>
 8007f04:	e7d0      	b.n	8007ea8 <rint+0x70>
 8007f06:	2e33      	cmp	r6, #51	; 0x33
 8007f08:	dd07      	ble.n	8007f1a <rint+0xe2>
 8007f0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f0e:	d1cb      	bne.n	8007ea8 <rint+0x70>
 8007f10:	ee10 2a10 	vmov	r2, s0
 8007f14:	f7f8 f9ba 	bl	800028c <__adddf3>
 8007f18:	e7c6      	b.n	8007ea8 <rint+0x70>
 8007f1a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007f1e:	f04f 36ff 	mov.w	r6, #4294967295
 8007f22:	40d6      	lsrs	r6, r2
 8007f24:	4230      	tst	r0, r6
 8007f26:	d0bf      	beq.n	8007ea8 <rint+0x70>
 8007f28:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007f2c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007f30:	bf1f      	itttt	ne
 8007f32:	ea24 0101 	bicne.w	r1, r4, r1
 8007f36:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007f3a:	fa44 f202 	asrne.w	r2, r4, r2
 8007f3e:	ea41 0402 	orrne.w	r4, r1, r2
 8007f42:	e7cd      	b.n	8007ee0 <rint+0xa8>
 8007f44:	08008520 	.word	0x08008520
 8007f48:	000fffff 	.word	0x000fffff
 8007f4c:	00000000 	.word	0x00000000

08007f50 <scalbn>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	ec55 4b10 	vmov	r4, r5, d0
 8007f56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	462b      	mov	r3, r5
 8007f5e:	b99a      	cbnz	r2, 8007f88 <scalbn+0x38>
 8007f60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f64:	4323      	orrs	r3, r4
 8007f66:	d036      	beq.n	8007fd6 <scalbn+0x86>
 8007f68:	4b39      	ldr	r3, [pc, #228]	; (8008050 <scalbn+0x100>)
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	ee10 0a10 	vmov	r0, s0
 8007f70:	2200      	movs	r2, #0
 8007f72:	f7f8 fb41 	bl	80005f8 <__aeabi_dmul>
 8007f76:	4b37      	ldr	r3, [pc, #220]	; (8008054 <scalbn+0x104>)
 8007f78:	429e      	cmp	r6, r3
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	460d      	mov	r5, r1
 8007f7e:	da10      	bge.n	8007fa2 <scalbn+0x52>
 8007f80:	a32b      	add	r3, pc, #172	; (adr r3, 8008030 <scalbn+0xe0>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	e03a      	b.n	8007ffe <scalbn+0xae>
 8007f88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007f8c:	428a      	cmp	r2, r1
 8007f8e:	d10c      	bne.n	8007faa <scalbn+0x5a>
 8007f90:	ee10 2a10 	vmov	r2, s0
 8007f94:	4620      	mov	r0, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	f7f8 f978 	bl	800028c <__adddf3>
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	e019      	b.n	8007fd6 <scalbn+0x86>
 8007fa2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	3a36      	subs	r2, #54	; 0x36
 8007faa:	4432      	add	r2, r6
 8007fac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007fb0:	428a      	cmp	r2, r1
 8007fb2:	dd08      	ble.n	8007fc6 <scalbn+0x76>
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	a120      	add	r1, pc, #128	; (adr r1, 8008038 <scalbn+0xe8>)
 8007fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fbc:	da1c      	bge.n	8007ff8 <scalbn+0xa8>
 8007fbe:	a120      	add	r1, pc, #128	; (adr r1, 8008040 <scalbn+0xf0>)
 8007fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc4:	e018      	b.n	8007ff8 <scalbn+0xa8>
 8007fc6:	2a00      	cmp	r2, #0
 8007fc8:	dd08      	ble.n	8007fdc <scalbn+0x8c>
 8007fca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007fce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007fd6:	ec45 4b10 	vmov	d0, r4, r5
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007fe0:	da19      	bge.n	8008016 <scalbn+0xc6>
 8007fe2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007fe6:	429e      	cmp	r6, r3
 8007fe8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007fec:	dd0a      	ble.n	8008004 <scalbn+0xb4>
 8007fee:	a112      	add	r1, pc, #72	; (adr r1, 8008038 <scalbn+0xe8>)
 8007ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e2      	bne.n	8007fbe <scalbn+0x6e>
 8007ff8:	a30f      	add	r3, pc, #60	; (adr r3, 8008038 <scalbn+0xe8>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 fafb 	bl	80005f8 <__aeabi_dmul>
 8008002:	e7cb      	b.n	8007f9c <scalbn+0x4c>
 8008004:	a10a      	add	r1, pc, #40	; (adr r1, 8008030 <scalbn+0xe0>)
 8008006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0b8      	beq.n	8007f80 <scalbn+0x30>
 800800e:	a10e      	add	r1, pc, #56	; (adr r1, 8008048 <scalbn+0xf8>)
 8008010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008014:	e7b4      	b.n	8007f80 <scalbn+0x30>
 8008016:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800801a:	3236      	adds	r2, #54	; 0x36
 800801c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008020:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008024:	4620      	mov	r0, r4
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <scalbn+0x108>)
 8008028:	2200      	movs	r2, #0
 800802a:	e7e8      	b.n	8007ffe <scalbn+0xae>
 800802c:	f3af 8000 	nop.w
 8008030:	c2f8f359 	.word	0xc2f8f359
 8008034:	01a56e1f 	.word	0x01a56e1f
 8008038:	8800759c 	.word	0x8800759c
 800803c:	7e37e43c 	.word	0x7e37e43c
 8008040:	8800759c 	.word	0x8800759c
 8008044:	fe37e43c 	.word	0xfe37e43c
 8008048:	c2f8f359 	.word	0xc2f8f359
 800804c:	81a56e1f 	.word	0x81a56e1f
 8008050:	43500000 	.word	0x43500000
 8008054:	ffff3cb0 	.word	0xffff3cb0
 8008058:	3c900000 	.word	0x3c900000

0800805c <_init>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr

08008068 <_fini>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	bf00      	nop
 800806c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806e:	bc08      	pop	{r3}
 8008070:	469e      	mov	lr, r3
 8008072:	4770      	bx	lr
